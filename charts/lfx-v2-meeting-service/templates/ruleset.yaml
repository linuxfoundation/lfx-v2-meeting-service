# Copyright The Linux Foundation and each contributor to LFX.
# SPDX-License-Identifier: MIT
---
apiVersion: heimdall.dadrus.github.com/v1alpha4
kind: RuleSet
metadata:
  name: {{ .Chart.Name }}
  namespace: {{ .Release.Namespace }}
spec:
  rules:
    - id: "rule:lfx:lfx-v2-meeting-service:openapi:get"
      match:
        methods:
          - GET
        routes:
          - path: /_meetings/openapi.json
          - path: /_meetings/openapi.yaml
          - path: /_meetings/openapi3.json
          - path: /_meetings/openapi3.yaml
      allow_encoded_slashes: "off"
      execute:
        - authenticator: oidc
        - authenticator: anonymous_authenticator
        {{- if .Values.app.use_oidc_contextualizer }}
        - contextualizer: oidc_contextualizer
        {{- end }}
        - authorizer: allow_all
        - finalizer: create_jwt
          config:
            values:
              aud: {{ .Values.app.audience }}
    - id: "rule:lfx:lfx-v2-meeting-service:webhooks:zoom"
      match:
        methods:
          - POST
        routes:
          - path: /webhooks/zoom
      allow_encoded_slashes: "off"
      execute:
        - authenticator: oidc
        - authenticator: anonymous_authenticator
        {{- if .Values.app.use_oidc_contextualizer }}
        - contextualizer: oidc_contextualizer
        {{- end }}
        # Allow all requests on the zoom webhook endpoint because the endpoint does validation
        # of the request to check that it is coming from Zoom.
        - authorizer: allow_all
        - finalizer: create_jwt
          config:
            values:
              aud: {{ .Values.app.audience }}
    - id: "rule:lfx:lfx-v2-meeting-service:meetings:create"
      match:
        methods:
          - POST
        routes:
          - path: /meetings
      allow_encoded_slashes: "off"
      execute:
        - authenticator: oidc
        - authenticator: anonymous_authenticator
        {{- if .Values.app.use_oidc_contextualizer }}
        - contextualizer: oidc_contextualizer
        {{- end }}
        {{- if .Values.openfga.enabled }}
        - authorizer: json_content_type
        - authorizer: openfga_check
          config:
            values:
              relation: writer
              object: "project:{{ "{{- .Request.Body.project_uid -}}" }}"
        {{- else }}
        {{/*
          When OpenFGA is disabled, allow all requests
          (Only meant for *local development* because OpenFGA should be enabled when deployed)
        */}}
        - authorizer: allow_all
        {{- end }}
        - finalizer: create_jwt
          config:
            values:
              aud: {{ .Values.app.audience }}

    - id: "rule:lfx:lfx-v2-meeting-service:meetings:meeting:get"
      match:
        methods:
          - GET
        routes:
          - path: /meetings/:id
      allow_encoded_slashes: "off"
      execute:
        - authenticator: oidc
        - authenticator: anonymous_authenticator
        {{- if .Values.app.use_oidc_contextualizer }}
        - contextualizer: oidc_contextualizer
        {{- end }}
        {{- if .Values.openfga.enabled }}
        - authorizer: openfga_check
          config:
            values:
              relation: viewer
              object: "meeting:{{ "{{- .Request.URL.Captures.id -}}" }}"
        {{- else }}
        {{/*
          When OpenFGA is disabled, allow all requests
          (Only meant for *local development* because OpenFGA should be enabled when deployed)
        */}}
        - authorizer: allow_all
        {{- end }}
        - finalizer: create_jwt
          config:
            values:
              aud: {{ .Values.app.audience }}

    - id: "rule:lfx:lfx-v2-meeting-service:meetings:meeting:join_url"
      match:
        methods:
          - GET
        routes:
          - path: /meetings/:id/join_url
      allow_encoded_slashes: "off"
      execute:
        - authenticator: oidc
        - authenticator: anonymous_authenticator
        {{- if .Values.app.use_oidc_contextualizer }}
        - contextualizer: oidc_contextualizer
        {{- end }}
        {{- if .Values.openfga.enabled }}
        - authorizer: openfga_check
          config:
            values:
              relation: viewer
              object: "meeting:{{ "{{- .Request.URL.Captures.id -}}" }}"
        {{- else }}
        {{/*
          When OpenFGA is disabled, allow all requests
          (Only meant for *local development* because OpenFGA should be enabled when deployed)
        */}}
        - authorizer: allow_all
        {{- end }}
        - finalizer: create_jwt
          config:
            values:
              aud: {{ .Values.app.audience }}

    - id: "rule:lfx:lfx-v2-meeting-service:meeting_settings:get"
      match:
        methods:
          - GET
        routes:
          - path: /meetings/:id/settings
      allow_encoded_slashes: "off"
      execute:
        - authenticator: oidc
        - authenticator: anonymous_authenticator
        {{- if .Values.app.use_oidc_contextualizer }}
        - contextualizer: oidc_contextualizer
        {{- end }}
        {{- if .Values.openfga.enabled }}
        - authorizer: openfga_check
          config:
            values:
              relation: auditor
              object: "meeting:{{ "{{- .Request.URL.Captures.id -}}" }}"
        {{- else }}
        {{/*
          When OpenFGA is disabled, allow all requests
          (Only meant for *local development* because OpenFGA should be enabled when deployed)
        */}}
        - authorizer: allow_all
        {{- end }}
        - finalizer: create_jwt
          config:
            values:
              aud: {{ .Values.app.audience }}

    - id: "rule:lfx:lfx-v2-meeting-service:meetings:meeting:update"
      match:
        methods:
          - PUT
        routes:
          - path: /meetings/:id
      allow_encoded_slashes: "off"
      execute:
        - authenticator: oidc
        - authenticator: anonymous_authenticator
        {{- if .Values.app.use_oidc_contextualizer }}
        - contextualizer: oidc_contextualizer
        {{- end }}
        {{- if .Values.openfga.enabled }}
        - authorizer: openfga_check
          config:
            values:
              relation: organizer
              object: "meeting:{{ "{{- .Request.URL.Captures.id -}}" }}"
        {{- else }}
        {{/*
          When OpenFGA is disabled, allow all requests
          (Only meant for *local development* because OpenFGA should be enabled when deployed)
        */}}
        - authorizer: allow_all
        {{- end }}
        - finalizer: create_jwt
          config:
            values:
              aud: {{ .Values.app.audience }}

    - id: "rule:lfx:lfx-v2-meeting-service:meeting_settings:update"
      match:
        methods:
          - PUT
        routes:
          - path: /meetings/:id/settings
      allow_encoded_slashes: "off"
      execute:
        - authenticator: oidc
        - authenticator: anonymous_authenticator
        {{- if .Values.app.use_oidc_contextualizer }}
        - contextualizer: oidc_contextualizer
        {{- end }}
        {{- if .Values.openfga.enabled }}
        - authorizer: openfga_check
          config:
            values:
              relation: organizer
              object: "meeting:{{ "{{- .Request.URL.Captures.id -}}" }}"
        {{- else }}
        {{/*
          When OpenFGA is disabled, allow all requests
          (Only meant for *local development* because OpenFGA should be enabled when deployed)
        */}}
        - authorizer: allow_all
        {{- end }}
        - finalizer: create_jwt
          config:
            values:
              aud: {{ .Values.app.audience }}

    - id: "rule:lfx:lfx-v2-meeting-service:meetings:meeting:delete"
      match:
        methods:
          - DELETE
        routes:
          - path: /meetings/:id
      allow_encoded_slashes: "off"
      execute:
        - authenticator: oidc
        - authenticator: anonymous_authenticator
        {{- if .Values.app.use_oidc_contextualizer }}
        - contextualizer: oidc_contextualizer
        {{- end }}
        {{- if .Values.openfga.enabled }}
        - authorizer: openfga_check
          config:
            values:
              relation: organizer
              object: "meeting:{{ "{{- .Request.URL.Captures.id -}}" }}"
        {{- else }}
        {{/*
          When OpenFGA is disabled, allow all requests
          (Only meant for *local development* because OpenFGA should be enabled when deployed)
        */}}
        - authorizer: allow_all
        {{- end }}
        - finalizer: create_jwt
          config:
            values:
              aud: {{ .Values.app.audience }}

    - id: "rule:lfx:lfx-v2-meeting-service:meetings:occurrence:delete"
      match:
        methods:
          - DELETE
        routes:
          - path: /meetings/:id/occurrences/:occurrence_id
      allow_encoded_slashes: "off"
      execute:
        - authenticator: oidc
        - authenticator: anonymous_authenticator
        {{- if .Values.app.use_oidc_contextualizer }}
        - contextualizer: oidc_contextualizer
        {{- end }}
        {{- if .Values.openfga.enabled }}
        - authorizer: openfga_check
          config:
            values:
              relation: organizer
              object: "meeting:{{ "{{- .Request.URL.Captures.id -}}" }}"
        {{- else }}
        {{/*
          When OpenFGA is disabled, allow all requests
          (Only meant for *local development* because OpenFGA should be enabled when deployed)
        */}}
        - authorizer: allow_all
        {{- end }}
        - finalizer: create_jwt
          config:
            values:
              aud: {{ .Values.app.audience }}

    - id: "rule:lfx:lfx-v2-meeting-service:meeting_registrants:create"
      match:
        methods:
          - POST
        routes:
          - path: /meetings/:id/registrants
      allow_encoded_slashes: "off"
      execute:
        - authenticator: oidc
        - authenticator: anonymous_authenticator
        {{- if .Values.app.use_oidc_contextualizer }}
        - contextualizer: oidc_contextualizer
        {{- end }}
        {{- if .Values.openfga.enabled }}
        - authorizer: openfga_check
          config:
            values:
              relation: organizer
              object: "meeting:{{ "{{- .Request.URL.Captures.id -}}" }}"
        {{- else }}
        {{/*
          When OpenFGA is disabled, allow all requests
          (Only meant for *local development* because OpenFGA should be enabled when deployed)
        */}}
        - authorizer: allow_all
        {{- end }}
        - finalizer: create_jwt
          config:
            values:
              aud: {{ .Values.app.audience }}

    # TODO: remove this rule once we remove the list meeting registrants endpoint.
    # It is not meant to be used by applications, it should only be used
    # in local development, therefore the authorizer allows all requests.
    - id: "rule:lfx:lfx-v2-meeting-service:meeting_registrants:list"
      match:
        methods:
          - GET
        routes:
          - path: /meetings/:id/registrants
      allow_encoded_slashes: "off"
      execute:
        - authenticator: oidc
        - authenticator: anonymous_authenticator
        {{- if .Values.app.use_oidc_contextualizer }}
        - contextualizer: oidc_contextualizer
        {{- end }}
        {{- if .Values.openfga.enabled }}
        - authorizer: openfga_check
          config:
            values:
              relation: auditor
              object: "meeting:{{ "{{- .Request.URL.Captures.id -}}" }}"
        {{- else }}
        {{/*
          When OpenFGA is disabled, allow all requests
          (Only meant for *local development* because OpenFGA should be enabled when deployed)
        */}}
        - authorizer: allow_all
        {{- end }}
        - finalizer: create_jwt
          config:
            values:
              aud: {{ .Values.app.audience }}

    - id: "rule:lfx:lfx-v2-meeting-service:meeting_registrants:update"
      match:
        methods:
          - PUT
        routes:
          - path: /meetings/:id/registrants/:registrant_id
      allow_encoded_slashes: "off"
      execute:
        - authenticator: oidc
        - authenticator: anonymous_authenticator
        {{- if .Values.app.use_oidc_contextualizer }}
        - contextualizer: oidc_contextualizer
        {{- end }}
        {{- if .Values.openfga.enabled }}
        - authorizer: openfga_check
          config:
            values:
              relation: organizer
              object: "meeting:{{ "{{- .Request.URL.Captures.id -}}" }}"
        {{- else }}
        {{/*
          When OpenFGA is disabled, allow all requests
          (Only meant for *local development* because OpenFGA should be enabled when deployed)
        */}}
        - authorizer: allow_all
        {{- end }}
        - finalizer: create_jwt
          config:
            values:
              aud: {{ .Values.app.audience }}

    - id: "rule:lfx:lfx-v2-meeting-service:meeting_registrants:get"
      match:
        methods:
          - GET
        routes:
          - path: /meetings/:id/registrants/:registrant_id
      allow_encoded_slashes: "off"
      execute:
        - authenticator: oidc
        - authenticator: anonymous_authenticator
        {{- if .Values.app.use_oidc_contextualizer }}
        - contextualizer: oidc_contextualizer
        {{- end }}
        {{- if .Values.openfga.enabled }}
        - authorizer: openfga_check
          config:
            values:
              relation: auditor
              object: "meeting:{{ "{{- .Request.URL.Captures.id -}}" }}"
        {{- else }}
        {{/*
          When OpenFGA is disabled, allow all requests
          (Only meant for *local development* because OpenFGA should be enabled when deployed)
        */}}
        - authorizer: allow_all
        {{- end }}
        - finalizer: create_jwt
          config:
            values:
              aud: {{ .Values.app.audience }}

    - id: "rule:lfx:lfx-v2-meeting-service:meeting_registrants:delete"
      match:
        methods:
          - DELETE
        routes:
          - path: /meetings/:id/registrants/:registrant_id
      allow_encoded_slashes: "off"
      execute:
        - authenticator: oidc
        - authenticator: anonymous_authenticator
        {{- if .Values.app.use_oidc_contextualizer }}
        - contextualizer: oidc_contextualizer
        {{- end }}
        {{- if .Values.openfga.enabled }}
        - authorizer: openfga_check
          config:
            values:
              relation: organizer
              object: "meeting:{{ "{{- .Request.URL.Captures.id -}}" }}"
        {{- else }}
        {{/*
          When OpenFGA is disabled, allow all requests
          (Only meant for *local development* because OpenFGA should be enabled when deployed)
        */}}
        - authorizer: allow_all
        {{- end }}
        - finalizer: create_jwt
          config:
            values:
              aud: {{ .Values.app.audience }}

    - id: "rule:lfx:lfx-v2-meeting-service:meeting_registrants:resend_invitation"
      match:
        methods:
          - POST
        routes:
          - path: /meetings/:id/registrants/:registrant_id/resend
      allow_encoded_slashes: "off"
      execute:
        - authenticator: oidc
        - authenticator: anonymous_authenticator
        {{- if .Values.app.use_oidc_contextualizer }}
        - contextualizer: oidc_contextualizer
        {{- end }}
        {{- if .Values.openfga.enabled }}
        - authorizer: openfga_check
          config:
            values:
              relation: organizer
              object: "meeting:{{ "{{- .Request.URL.Captures.id -}}" }}"
        {{- else }}
        {{/*
          When OpenFGA is disabled, allow all requests
          (Only meant for *local development* because OpenFGA should be enabled when deployed)
        */}}
        - authorizer: allow_all
        {{- end }}
        - finalizer: create_jwt
          config:
            values:
              aud: {{ .Values.app.audience }}

    # =============== Meeting RSVPs ==================
    - id: "rule:lfx:lfx-v2-meeting-service:meeting_rsvp:create"
      match:
        methods:
          - POST
        routes:
          - path: /meetings/:id/rsvp
      allow_encoded_slashes: "off"
      execute:
        - authenticator: oidc
        - authenticator: anonymous_authenticator
        {{- if .Values.app.use_oidc_contextualizer }}
        - contextualizer: oidc_contextualizer
        {{- end }}
        {{- if .Values.openfga.enabled }}
        - authorizer: openfga_check
          config:
            values:
              relation: viewer
              object: "meeting:{{ "{{- .Request.URL.Captures.id -}}" }}"
        {{- else }}
        {{/*
          When OpenFGA is disabled, allow all requests
          (Only meant for *local development* because OpenFGA should be enabled when deployed)
        */}}
        - authorizer: allow_all
        {{- end }}
        - finalizer: create_jwt
          config:
            values:
              aud: {{ .Values.app.audience }}

  # TODO: remove this rule once we remove the list meeting rsvps endpoint.
  # It is not meant to be used by applications, it should only be used
  # in local development, therefore the authorizer allows all requests.
    - id: "rule:lfx:lfx-v2-meeting-service:meeting_rsvp:list"
      match:
        methods:
          - GET
        routes:
          - path: /meetings/:id/rsvp
      allow_encoded_slashes: "off"
      execute:
        - authenticator: oidc
        - authenticator: anonymous_authenticator
        {{- if .Values.app.use_oidc_contextualizer }}
        - contextualizer: oidc_contextualizer
        {{- end }}
        {{- if .Values.openfga.enabled }}
        - authorizer: openfga_check
          config:
            values:
              relation: organizer
              object: "meeting:{{ "{{- .Request.URL.Captures.id -}}" }}"
        {{- else }}
        {{/*
          When OpenFGA is disabled, allow all requests
          (Only meant for *local development* because OpenFGA should be enabled when deployed)
        */}}
        - authorizer: allow_all
        {{- end }}
        - finalizer: create_jwt
          config:
            values:
              aud: {{ .Values.app.audience }}

    # =============== Past meetings ==================
    - id: "rule:lfx:lfx-v2-meeting-service:past_meetings:create"
      match:
        methods:
          - POST
        routes:
          - path: /past_meetings
      allow_encoded_slashes: "off"
      execute:
        - authenticator: oidc
        - authenticator: anonymous_authenticator
        {{- if .Values.app.use_oidc_contextualizer }}
        - contextualizer: oidc_contextualizer
        {{- end }}
        {{- if .Values.openfga.enabled }}
        - authorizer: json_content_type
        - authorizer: openfga_check
          config:
            values:
              relation: writer
              object: "project:{{ "{{- .Request.Body.project_uid -}}" }}"
        {{- else }}
        {{/*
          When OpenFGA is disabled, allow all requests
          (Only meant for *local development* because OpenFGA should be enabled when deployed)
        */}}
        - authorizer: allow_all
        {{- end }}
        - finalizer: create_jwt
          config:
            values:
              aud: {{ .Values.app.audience }}

    # TODO: remove this rule once we remove the list past meetings endpoint.
    # It is not meant to be used by applications, it should only be used
    # in local development, therefore the authorizer allows all requests.
    - id: "rule:lfx:lfx-v2-meeting-service:past_meetings:list"
      match:
        methods:
          - GET
        routes:
          - path: /past_meetings
      allow_encoded_slashes: "off"
      execute:
        - authenticator: oidc
        - authenticator: anonymous_authenticator
        {{- if .Values.app.use_oidc_contextualizer }}
        - contextualizer: oidc_contextualizer
        {{- end }}
        {{/*
          This rule is on an endpoint that is just used for local development,
          it will get removed once we remove the list meetings endpoint.
        */}}
        - authorizer: allow_all
        - finalizer: create_jwt
          config:
            values:
              aud: {{ .Values.app.audience }}

    - id: "rule:lfx:lfx-v2-meeting-service:past_meetings:past_meeting:get"
      match:
        methods:
          - GET
        routes:
          - path: /past_meetings/:id
      allow_encoded_slashes: "off"
      execute:
        - authenticator: oidc
        - authenticator: anonymous_authenticator
        {{- if .Values.app.use_oidc_contextualizer }}
        - contextualizer: oidc_contextualizer
        {{- end }}
        {{- if .Values.openfga.enabled }}
        - authorizer: openfga_check
          config:
            values:
              relation: viewer
              object: "past_meeting:{{ "{{- .Request.URL.Captures.id -}}" }}"
        {{- else }}
        {{/*
          When OpenFGA is disabled, allow all requests
          (Only meant for *local development* because OpenFGA should be enabled when deployed)
        */}}
        - authorizer: allow_all
        {{- end }}
        - finalizer: create_jwt
          config:
            values:
              aud: {{ .Values.app.audience }}

    - id: "rule:lfx:lfx-v2-meeting-service:past_meetings:past_meeting:delete"
      match:
        methods:
          - DELETE
        routes:
          - path: /past_meetings/:id
      allow_encoded_slashes: "off"
      execute:
        - authenticator: oidc
        - authenticator: anonymous_authenticator
        {{- if .Values.app.use_oidc_contextualizer }}
        - contextualizer: oidc_contextualizer
        {{- end }}
        {{- if .Values.openfga.enabled }}
        - authorizer: openfga_check
          config:
            values:
              relation: organizer
              object: "past_meeting:{{ "{{- .Request.URL.Captures.id -}}" }}"
        {{- else }}
        {{/*
          When OpenFGA is disabled, allow all requests
          (Only meant for *local development* because OpenFGA should be enabled when deployed)
        */}}
        - authorizer: allow_all
        {{- end }}
        - finalizer: create_jwt
          config:
            values:
              aud: {{ .Values.app.audience }}

    - id: "rule:lfx:lfx-v2-meeting-service:past_meeting_participants:create"
      match:
        methods:
          - POST
        routes:
          - path: /past_meetings/:id/participants
      allow_encoded_slashes: "off"
      execute:
        - authenticator: oidc
        - authenticator: anonymous_authenticator
        {{- if .Values.app.use_oidc_contextualizer }}
        - contextualizer: oidc_contextualizer
        {{- end }}
        {{- if .Values.openfga.enabled }}
        - authorizer: openfga_check
          config:
            values:
              relation: organizer
              object: "past_meeting:{{ "{{- .Request.URL.Captures.id -}}" }}"
        {{- else }}
        {{/*
          When OpenFGA is disabled, allow all requests
          (Only meant for *local development* because OpenFGA should be enabled when deployed)
        */}}
        - authorizer: allow_all
        {{- end }}
        - finalizer: create_jwt
          config:
            values:
              aud: {{ .Values.app.audience }}

    # TODO: remove this rule once we remove the list past meeting participants endpoint.
    # It is not meant to be used by applications, it should only be used
    # in local development, therefore the authorizer allows all requests.
    - id: "rule:lfx:lfx-v2-meeting-service:past_meeting_participants:list"
      match:
        methods:
          - GET
        routes:
          - path: /past_meetings/:id/participants
      allow_encoded_slashes: "off"
      execute:
        - authenticator: oidc
        - authenticator: anonymous_authenticator
        {{- if .Values.app.use_oidc_contextualizer }}
        - contextualizer: oidc_contextualizer
        {{- end }}
        {{- if .Values.openfga.enabled }}
        - authorizer: openfga_check
          config:
            values:
              relation: auditor
              object: "past_meeting:{{ "{{- .Request.URL.Captures.id -}}" }}"
        {{- else }}
        {{/*
          When OpenFGA is disabled, allow all requests
          (Only meant for *local development* because OpenFGA should be enabled when deployed)
        */}}
        - authorizer: allow_all
        {{- end }}
        - finalizer: create_jwt
          config:
            values:
              aud: {{ .Values.app.audience }}

    - id: "rule:lfx:lfx-v2-meeting-service:past_meeting_participants:update"
      match:
        methods:
          - PUT
        routes:
          - path: /past_meetings/:id/participants/:participant_id
      allow_encoded_slashes: "off"
      execute:
        - authenticator: oidc
        - authenticator: anonymous_authenticator
        {{- if .Values.app.use_oidc_contextualizer }}
        - contextualizer: oidc_contextualizer
        {{- end }}
        {{- if .Values.openfga.enabled }}
        - authorizer: openfga_check
          config:
            values:
              relation: organizer
              object: "past_meeting:{{ "{{- .Request.URL.Captures.id -}}" }}"
        {{- else }}
        {{/*
          When OpenFGA is disabled, allow all requests
          (Only meant for *local development* because OpenFGA should be enabled when deployed)
        */}}
        - authorizer: allow_all
        {{- end }}
        - finalizer: create_jwt
          config:
            values:
              aud: {{ .Values.app.audience }}

    - id: "rule:lfx:lfx-v2-meeting-service:past_meeting_participants:get"
      match:
        methods:
          - GET
        routes:
          - path: /past_meetings/:id/participants/:participant_id
      allow_encoded_slashes: "off"
      execute:
        - authenticator: oidc
        - authenticator: anonymous_authenticator
        {{- if .Values.app.use_oidc_contextualizer }}
        - contextualizer: oidc_contextualizer
        {{- end }}
        {{- if .Values.openfga.enabled }}
        - authorizer: openfga_check
          config:
            values:
              relation: auditor
              object: "past_meeting:{{ "{{- .Request.URL.Captures.id -}}" }}"
        {{- else }}
        {{/*
          When OpenFGA is disabled, allow all requests
          (Only meant for *local development* because OpenFGA should be enabled when deployed)
        */}}
        - authorizer: allow_all
        {{- end }}
        - finalizer: create_jwt
          config:
            values:
              aud: {{ .Values.app.audience }}

    - id: "rule:lfx:lfx-v2-meeting-service:past_meeting_participants:delete"
      match:
        methods:
          - DELETE
        routes:
          - path: /past_meetings/:id/participants/:participant_id
      allow_encoded_slashes: "off"
      execute:
        - authenticator: oidc
        - authenticator: anonymous_authenticator
        {{- if .Values.app.use_oidc_contextualizer }}
        - contextualizer: oidc_contextualizer
        {{- end }}
        {{- if .Values.openfga.enabled }}
        - authorizer: openfga_check
          config:
            values:
              relation: organizer
              object: "past_meeting:{{ "{{- .Request.URL.Captures.id -}}" }}"
        {{- else }}
        {{/*
          When OpenFGA is disabled, allow all requests
          (Only meant for *local development* because OpenFGA should be enabled when deployed)
        */}}
        - authorizer: allow_all
        {{- end }}
        - finalizer: create_jwt
          config:
            values:
              aud: {{ .Values.app.audience }}

    # TODO: remove this rule once we remove the list past meeting summaries endpoint.
    # It is not meant to be used by applications, it should only be used
    # in local development, therefore the authorizer allows all requests.
    - id: "rule:lfx:lfx-v2-meeting-service:past_meeting_summaries:list"
      match:
        methods:
          - GET
        routes:
          - path: /past_meetings/:id/summaries
      allow_encoded_slashes: "off"
      execute:
        - authenticator: oidc
        - authenticator: anonymous_authenticator
        {{- if .Values.app.use_oidc_contextualizer }}
        - contextualizer: oidc_contextualizer
        {{- end }}
        {{- if .Values.openfga.enabled }}
        - authorizer: openfga_check
          config:
            values:
              relation: auditor
              object: "past_meeting:{{ "{{- .Request.URL.Captures.id -}}" }}"
        {{- else }}
        {{/*
          When OpenFGA is disabled, allow all requests
          (Only meant for *local development* because OpenFGA should be enabled when deployed)
        */}}
        - authorizer: allow_all
        {{- end }}
        - finalizer: create_jwt
          config:
            values:
              aud: {{ .Values.app.audience }}

    - id: "rule:lfx:lfx-v2-meeting-service:past_meeting_summaries:update"
      match:
        methods:
          - PUT
        routes:
          - path: /past_meetings/:id/summaries/:summary_id
      allow_encoded_slashes: "off"
      execute:
        - authenticator: oidc
        - authenticator: anonymous_authenticator
        {{- if .Values.app.use_oidc_contextualizer }}
        - contextualizer: oidc_contextualizer
        {{- end }}
        {{- if .Values.openfga.enabled }}
        - authorizer: openfga_check
          config:
            values:
              relation: organizer
              object: "past_meeting:{{ "{{- .Request.URL.Captures.id -}}" }}"
        {{- else }}
        {{/*
          When OpenFGA is disabled, allow all requests
          (Only meant for *local development* because OpenFGA should be enabled when deployed)
        */}}
        - authorizer: allow_all
        {{- end }}
        - finalizer: create_jwt
          config:
            values:
              aud: {{ .Values.app.audience }}

    - id: "rule:lfx:lfx-v2-meeting-service:past_meeting_summaries:get"
      match:
        methods:
          - GET
        routes:
          - path: /past_meetings/:id/summaries/:summary_id
      allow_encoded_slashes: "off"
      execute:
        - authenticator: oidc
        - authenticator: anonymous_authenticator
        {{- if .Values.app.use_oidc_contextualizer }}
        - contextualizer: oidc_contextualizer
        {{- end }}
        {{- if .Values.openfga.enabled }}
        - authorizer: openfga_check
          config:
            values:
              relation: auditor
              object: "past_meeting:{{ "{{- .Request.URL.Captures.id -}}" }}"
        {{- else }}
        {{/*
          When OpenFGA is disabled, allow all requests
          (Only meant for *local development* because OpenFGA should be enabled when deployed)
        */}}
        - authorizer: allow_all
        {{- end }}
        - finalizer: create_jwt
          config:
            values:
              aud: {{ .Values.app.audience }}
