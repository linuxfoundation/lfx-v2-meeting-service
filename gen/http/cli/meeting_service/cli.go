// Code generated by goa v3.21.1, DO NOT EDIT.
//
// Meeting Service HTTP client CLI support package
//
// Command:
// $ goa gen github.com/linuxfoundation/lfx-v2-meeting-service/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	meetingservicec "github.com/linuxfoundation/lfx-v2-meeting-service/gen/http/meeting_service/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `meeting-service (get-meetings|create-meeting|get-meeting-base|get-meeting-settings|update-meeting-base|update-meeting-settings|delete-meeting|get-meeting-registrants|create-meeting-registrant|get-meeting-registrant|update-meeting-registrant|delete-meeting-registrant|readyz|livez)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` meeting-service get-meetings --version "1" --bearer-token "eyJhbGci..."` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		meetingServiceFlags = flag.NewFlagSet("meeting-service", flag.ContinueOnError)

		meetingServiceGetMeetingsFlags           = flag.NewFlagSet("get-meetings", flag.ExitOnError)
		meetingServiceGetMeetingsVersionFlag     = meetingServiceGetMeetingsFlags.String("version", "", "")
		meetingServiceGetMeetingsBearerTokenFlag = meetingServiceGetMeetingsFlags.String("bearer-token", "", "")

		meetingServiceCreateMeetingFlags           = flag.NewFlagSet("create-meeting", flag.ExitOnError)
		meetingServiceCreateMeetingBodyFlag        = meetingServiceCreateMeetingFlags.String("body", "REQUIRED", "")
		meetingServiceCreateMeetingVersionFlag     = meetingServiceCreateMeetingFlags.String("version", "", "")
		meetingServiceCreateMeetingBearerTokenFlag = meetingServiceCreateMeetingFlags.String("bearer-token", "", "")

		meetingServiceGetMeetingBaseFlags           = flag.NewFlagSet("get-meeting-base", flag.ExitOnError)
		meetingServiceGetMeetingBaseUIDFlag         = meetingServiceGetMeetingBaseFlags.String("uid", "REQUIRED", "The UID of the meeting")
		meetingServiceGetMeetingBaseVersionFlag     = meetingServiceGetMeetingBaseFlags.String("version", "", "")
		meetingServiceGetMeetingBaseBearerTokenFlag = meetingServiceGetMeetingBaseFlags.String("bearer-token", "", "")

		meetingServiceGetMeetingSettingsFlags           = flag.NewFlagSet("get-meeting-settings", flag.ExitOnError)
		meetingServiceGetMeetingSettingsUIDFlag         = meetingServiceGetMeetingSettingsFlags.String("uid", "REQUIRED", "The UID of the meeting")
		meetingServiceGetMeetingSettingsVersionFlag     = meetingServiceGetMeetingSettingsFlags.String("version", "", "")
		meetingServiceGetMeetingSettingsBearerTokenFlag = meetingServiceGetMeetingSettingsFlags.String("bearer-token", "", "")

		meetingServiceUpdateMeetingBaseFlags           = flag.NewFlagSet("update-meeting-base", flag.ExitOnError)
		meetingServiceUpdateMeetingBaseBodyFlag        = meetingServiceUpdateMeetingBaseFlags.String("body", "REQUIRED", "")
		meetingServiceUpdateMeetingBaseUIDFlag         = meetingServiceUpdateMeetingBaseFlags.String("uid", "REQUIRED", "The UID of the meeting")
		meetingServiceUpdateMeetingBaseVersionFlag     = meetingServiceUpdateMeetingBaseFlags.String("version", "", "")
		meetingServiceUpdateMeetingBaseBearerTokenFlag = meetingServiceUpdateMeetingBaseFlags.String("bearer-token", "", "")
		meetingServiceUpdateMeetingBaseIfMatchFlag     = meetingServiceUpdateMeetingBaseFlags.String("if-match", "", "")

		meetingServiceUpdateMeetingSettingsFlags           = flag.NewFlagSet("update-meeting-settings", flag.ExitOnError)
		meetingServiceUpdateMeetingSettingsBodyFlag        = meetingServiceUpdateMeetingSettingsFlags.String("body", "REQUIRED", "")
		meetingServiceUpdateMeetingSettingsUIDFlag         = meetingServiceUpdateMeetingSettingsFlags.String("uid", "REQUIRED", "The UID of the meeting")
		meetingServiceUpdateMeetingSettingsVersionFlag     = meetingServiceUpdateMeetingSettingsFlags.String("version", "", "")
		meetingServiceUpdateMeetingSettingsBearerTokenFlag = meetingServiceUpdateMeetingSettingsFlags.String("bearer-token", "", "")
		meetingServiceUpdateMeetingSettingsIfMatchFlag     = meetingServiceUpdateMeetingSettingsFlags.String("if-match", "", "")

		meetingServiceDeleteMeetingFlags           = flag.NewFlagSet("delete-meeting", flag.ExitOnError)
		meetingServiceDeleteMeetingUIDFlag         = meetingServiceDeleteMeetingFlags.String("uid", "REQUIRED", "The UID of the meeting")
		meetingServiceDeleteMeetingVersionFlag     = meetingServiceDeleteMeetingFlags.String("version", "", "")
		meetingServiceDeleteMeetingBearerTokenFlag = meetingServiceDeleteMeetingFlags.String("bearer-token", "", "")
		meetingServiceDeleteMeetingIfMatchFlag     = meetingServiceDeleteMeetingFlags.String("if-match", "", "")

		meetingServiceGetMeetingRegistrantsFlags           = flag.NewFlagSet("get-meeting-registrants", flag.ExitOnError)
		meetingServiceGetMeetingRegistrantsUIDFlag         = meetingServiceGetMeetingRegistrantsFlags.String("uid", "REQUIRED", "The UID of the meeting")
		meetingServiceGetMeetingRegistrantsVersionFlag     = meetingServiceGetMeetingRegistrantsFlags.String("version", "", "")
		meetingServiceGetMeetingRegistrantsBearerTokenFlag = meetingServiceGetMeetingRegistrantsFlags.String("bearer-token", "", "")

		meetingServiceCreateMeetingRegistrantFlags           = flag.NewFlagSet("create-meeting-registrant", flag.ExitOnError)
		meetingServiceCreateMeetingRegistrantBodyFlag        = meetingServiceCreateMeetingRegistrantFlags.String("body", "REQUIRED", "")
		meetingServiceCreateMeetingRegistrantMeetingUIDFlag  = meetingServiceCreateMeetingRegistrantFlags.String("meeting-uid", "REQUIRED", "The UID of the meeting")
		meetingServiceCreateMeetingRegistrantVersionFlag     = meetingServiceCreateMeetingRegistrantFlags.String("version", "", "")
		meetingServiceCreateMeetingRegistrantBearerTokenFlag = meetingServiceCreateMeetingRegistrantFlags.String("bearer-token", "", "")

		meetingServiceGetMeetingRegistrantFlags           = flag.NewFlagSet("get-meeting-registrant", flag.ExitOnError)
		meetingServiceGetMeetingRegistrantMeetingUIDFlag  = meetingServiceGetMeetingRegistrantFlags.String("meeting-uid", "REQUIRED", "The UID of the meeting")
		meetingServiceGetMeetingRegistrantUIDFlag         = meetingServiceGetMeetingRegistrantFlags.String("uid", "REQUIRED", "The UID of the registrant")
		meetingServiceGetMeetingRegistrantVersionFlag     = meetingServiceGetMeetingRegistrantFlags.String("version", "", "")
		meetingServiceGetMeetingRegistrantBearerTokenFlag = meetingServiceGetMeetingRegistrantFlags.String("bearer-token", "", "")

		meetingServiceUpdateMeetingRegistrantFlags           = flag.NewFlagSet("update-meeting-registrant", flag.ExitOnError)
		meetingServiceUpdateMeetingRegistrantBodyFlag        = meetingServiceUpdateMeetingRegistrantFlags.String("body", "REQUIRED", "")
		meetingServiceUpdateMeetingRegistrantMeetingUIDFlag  = meetingServiceUpdateMeetingRegistrantFlags.String("meeting-uid", "REQUIRED", "The UID of the meeting")
		meetingServiceUpdateMeetingRegistrantUIDFlag         = meetingServiceUpdateMeetingRegistrantFlags.String("uid", "REQUIRED", "The UID of the registrant")
		meetingServiceUpdateMeetingRegistrantVersionFlag     = meetingServiceUpdateMeetingRegistrantFlags.String("version", "", "")
		meetingServiceUpdateMeetingRegistrantBearerTokenFlag = meetingServiceUpdateMeetingRegistrantFlags.String("bearer-token", "", "")
		meetingServiceUpdateMeetingRegistrantIfMatchFlag     = meetingServiceUpdateMeetingRegistrantFlags.String("if-match", "", "")

		meetingServiceDeleteMeetingRegistrantFlags           = flag.NewFlagSet("delete-meeting-registrant", flag.ExitOnError)
		meetingServiceDeleteMeetingRegistrantMeetingUIDFlag  = meetingServiceDeleteMeetingRegistrantFlags.String("meeting-uid", "REQUIRED", "The UID of the meeting")
		meetingServiceDeleteMeetingRegistrantUIDFlag         = meetingServiceDeleteMeetingRegistrantFlags.String("uid", "REQUIRED", "The UID of the registrant")
		meetingServiceDeleteMeetingRegistrantVersionFlag     = meetingServiceDeleteMeetingRegistrantFlags.String("version", "", "")
		meetingServiceDeleteMeetingRegistrantBearerTokenFlag = meetingServiceDeleteMeetingRegistrantFlags.String("bearer-token", "", "")
		meetingServiceDeleteMeetingRegistrantIfMatchFlag     = meetingServiceDeleteMeetingRegistrantFlags.String("if-match", "", "")

		meetingServiceReadyzFlags = flag.NewFlagSet("readyz", flag.ExitOnError)

		meetingServiceLivezFlags = flag.NewFlagSet("livez", flag.ExitOnError)
	)
	meetingServiceFlags.Usage = meetingServiceUsage
	meetingServiceGetMeetingsFlags.Usage = meetingServiceGetMeetingsUsage
	meetingServiceCreateMeetingFlags.Usage = meetingServiceCreateMeetingUsage
	meetingServiceGetMeetingBaseFlags.Usage = meetingServiceGetMeetingBaseUsage
	meetingServiceGetMeetingSettingsFlags.Usage = meetingServiceGetMeetingSettingsUsage
	meetingServiceUpdateMeetingBaseFlags.Usage = meetingServiceUpdateMeetingBaseUsage
	meetingServiceUpdateMeetingSettingsFlags.Usage = meetingServiceUpdateMeetingSettingsUsage
	meetingServiceDeleteMeetingFlags.Usage = meetingServiceDeleteMeetingUsage
	meetingServiceGetMeetingRegistrantsFlags.Usage = meetingServiceGetMeetingRegistrantsUsage
	meetingServiceCreateMeetingRegistrantFlags.Usage = meetingServiceCreateMeetingRegistrantUsage
	meetingServiceGetMeetingRegistrantFlags.Usage = meetingServiceGetMeetingRegistrantUsage
	meetingServiceUpdateMeetingRegistrantFlags.Usage = meetingServiceUpdateMeetingRegistrantUsage
	meetingServiceDeleteMeetingRegistrantFlags.Usage = meetingServiceDeleteMeetingRegistrantUsage
	meetingServiceReadyzFlags.Usage = meetingServiceReadyzUsage
	meetingServiceLivezFlags.Usage = meetingServiceLivezUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "meeting-service":
			svcf = meetingServiceFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "meeting-service":
			switch epn {
			case "get-meetings":
				epf = meetingServiceGetMeetingsFlags

			case "create-meeting":
				epf = meetingServiceCreateMeetingFlags

			case "get-meeting-base":
				epf = meetingServiceGetMeetingBaseFlags

			case "get-meeting-settings":
				epf = meetingServiceGetMeetingSettingsFlags

			case "update-meeting-base":
				epf = meetingServiceUpdateMeetingBaseFlags

			case "update-meeting-settings":
				epf = meetingServiceUpdateMeetingSettingsFlags

			case "delete-meeting":
				epf = meetingServiceDeleteMeetingFlags

			case "get-meeting-registrants":
				epf = meetingServiceGetMeetingRegistrantsFlags

			case "create-meeting-registrant":
				epf = meetingServiceCreateMeetingRegistrantFlags

			case "get-meeting-registrant":
				epf = meetingServiceGetMeetingRegistrantFlags

			case "update-meeting-registrant":
				epf = meetingServiceUpdateMeetingRegistrantFlags

			case "delete-meeting-registrant":
				epf = meetingServiceDeleteMeetingRegistrantFlags

			case "readyz":
				epf = meetingServiceReadyzFlags

			case "livez":
				epf = meetingServiceLivezFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "meeting-service":
			c := meetingservicec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get-meetings":
				endpoint = c.GetMeetings()
				data, err = meetingservicec.BuildGetMeetingsPayload(*meetingServiceGetMeetingsVersionFlag, *meetingServiceGetMeetingsBearerTokenFlag)
			case "create-meeting":
				endpoint = c.CreateMeeting()
				data, err = meetingservicec.BuildCreateMeetingPayload(*meetingServiceCreateMeetingBodyFlag, *meetingServiceCreateMeetingVersionFlag, *meetingServiceCreateMeetingBearerTokenFlag)
			case "get-meeting-base":
				endpoint = c.GetMeetingBase()
				data, err = meetingservicec.BuildGetMeetingBasePayload(*meetingServiceGetMeetingBaseUIDFlag, *meetingServiceGetMeetingBaseVersionFlag, *meetingServiceGetMeetingBaseBearerTokenFlag)
			case "get-meeting-settings":
				endpoint = c.GetMeetingSettings()
				data, err = meetingservicec.BuildGetMeetingSettingsPayload(*meetingServiceGetMeetingSettingsUIDFlag, *meetingServiceGetMeetingSettingsVersionFlag, *meetingServiceGetMeetingSettingsBearerTokenFlag)
			case "update-meeting-base":
				endpoint = c.UpdateMeetingBase()
				data, err = meetingservicec.BuildUpdateMeetingBasePayload(*meetingServiceUpdateMeetingBaseBodyFlag, *meetingServiceUpdateMeetingBaseUIDFlag, *meetingServiceUpdateMeetingBaseVersionFlag, *meetingServiceUpdateMeetingBaseBearerTokenFlag, *meetingServiceUpdateMeetingBaseIfMatchFlag)
			case "update-meeting-settings":
				endpoint = c.UpdateMeetingSettings()
				data, err = meetingservicec.BuildUpdateMeetingSettingsPayload(*meetingServiceUpdateMeetingSettingsBodyFlag, *meetingServiceUpdateMeetingSettingsUIDFlag, *meetingServiceUpdateMeetingSettingsVersionFlag, *meetingServiceUpdateMeetingSettingsBearerTokenFlag, *meetingServiceUpdateMeetingSettingsIfMatchFlag)
			case "delete-meeting":
				endpoint = c.DeleteMeeting()
				data, err = meetingservicec.BuildDeleteMeetingPayload(*meetingServiceDeleteMeetingUIDFlag, *meetingServiceDeleteMeetingVersionFlag, *meetingServiceDeleteMeetingBearerTokenFlag, *meetingServiceDeleteMeetingIfMatchFlag)
			case "get-meeting-registrants":
				endpoint = c.GetMeetingRegistrants()
				data, err = meetingservicec.BuildGetMeetingRegistrantsPayload(*meetingServiceGetMeetingRegistrantsUIDFlag, *meetingServiceGetMeetingRegistrantsVersionFlag, *meetingServiceGetMeetingRegistrantsBearerTokenFlag)
			case "create-meeting-registrant":
				endpoint = c.CreateMeetingRegistrant()
				data, err = meetingservicec.BuildCreateMeetingRegistrantPayload(*meetingServiceCreateMeetingRegistrantBodyFlag, *meetingServiceCreateMeetingRegistrantMeetingUIDFlag, *meetingServiceCreateMeetingRegistrantVersionFlag, *meetingServiceCreateMeetingRegistrantBearerTokenFlag)
			case "get-meeting-registrant":
				endpoint = c.GetMeetingRegistrant()
				data, err = meetingservicec.BuildGetMeetingRegistrantPayload(*meetingServiceGetMeetingRegistrantMeetingUIDFlag, *meetingServiceGetMeetingRegistrantUIDFlag, *meetingServiceGetMeetingRegistrantVersionFlag, *meetingServiceGetMeetingRegistrantBearerTokenFlag)
			case "update-meeting-registrant":
				endpoint = c.UpdateMeetingRegistrant()
				data, err = meetingservicec.BuildUpdateMeetingRegistrantPayload(*meetingServiceUpdateMeetingRegistrantBodyFlag, *meetingServiceUpdateMeetingRegistrantMeetingUIDFlag, *meetingServiceUpdateMeetingRegistrantUIDFlag, *meetingServiceUpdateMeetingRegistrantVersionFlag, *meetingServiceUpdateMeetingRegistrantBearerTokenFlag, *meetingServiceUpdateMeetingRegistrantIfMatchFlag)
			case "delete-meeting-registrant":
				endpoint = c.DeleteMeetingRegistrant()
				data, err = meetingservicec.BuildDeleteMeetingRegistrantPayload(*meetingServiceDeleteMeetingRegistrantMeetingUIDFlag, *meetingServiceDeleteMeetingRegistrantUIDFlag, *meetingServiceDeleteMeetingRegistrantVersionFlag, *meetingServiceDeleteMeetingRegistrantBearerTokenFlag, *meetingServiceDeleteMeetingRegistrantIfMatchFlag)
			case "readyz":
				endpoint = c.Readyz()
			case "livez":
				endpoint = c.Livez()
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// meetingServiceUsage displays the usage of the meeting-service command and
// its subcommands.
func meetingServiceUsage() {
	fmt.Fprintf(os.Stderr, `The meeting service handles all meeting-related operations for LF projects.
Usage:
    %[1]s [globalflags] meeting-service COMMAND [flags]

COMMAND:
    get-meetings: Get all meetings.
    create-meeting: Create a new meeting for a project. An actual meeting in the specific platform will be created by
			this endpoint. The meeting's occurrences and registrants are managed by this service rather than the third-party platform.
    get-meeting-base: Get a meeting by ID
    get-meeting-settings: Get a single meeting's settings.
    update-meeting-base: Update an existing meeting base.
    update-meeting-settings: Update an existing meeting's settings.
    delete-meeting: Delete an existing meeting.
    get-meeting-registrants: Get all registrants for a meeting
    create-meeting-registrant: Create a new registrant for a meeting
    get-meeting-registrant: Get a specific registrant for a meeting by UID
    update-meeting-registrant: Update an existing registrant for a meeting
    delete-meeting-registrant: Delete a registrant from a meeting
    readyz: Check if the service is able to take inbound requests.
    livez: Check if the service is alive.

Additional help:
    %[1]s meeting-service COMMAND --help
`, os.Args[0])
}
func meetingServiceGetMeetingsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] meeting-service get-meetings -version STRING -bearer-token STRING

Get all meetings.
    -version STRING: 
    -bearer-token STRING: 

Example:
    %[1]s meeting-service get-meetings --version "1" --bearer-token "eyJhbGci..."
`, os.Args[0])
}

func meetingServiceCreateMeetingUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] meeting-service create-meeting -body JSON -version STRING -bearer-token STRING

Create a new meeting for a project. An actual meeting in the specific platform will be created by
			this endpoint. The meeting's occurrences and registrants are managed by this service rather than the third-party platform.
    -body JSON: 
    -version STRING: 
    -bearer-token STRING: 

Example:
    %[1]s meeting-service create-meeting --body '{
      "artifact_visibility": "meeting_hosts",
      "committees": [
         {
            "allowed_voting_statuses": [
               "Veniam occaecati sed vitae non aut totam.",
               "Laborum earum praesentium.",
               "Velit recusandae voluptatem in ut."
            ],
            "uid": "Repudiandae laborum quibusdam ut ut earum assumenda."
         },
         {
            "allowed_voting_statuses": [
               "Veniam occaecati sed vitae non aut totam.",
               "Laborum earum praesentium.",
               "Velit recusandae voluptatem in ut."
            ],
            "uid": "Repudiandae laborum quibusdam ut ut earum assumenda."
         }
      ],
      "description": "Alias quasi eum non ipsum minima fuga.",
      "duration": 590,
      "early_join_time_minutes": 16,
      "meeting_type": "Board",
      "organizers": [
         "A iure vero ipsa possimus sint.",
         "Consequatur quod vero ipsa esse."
      ],
      "platform": "Zoom",
      "project_uid": "7cad5a8d-19d0-41a4-81a6-043453daf9ee",
      "recording_enabled": true,
      "recurrence": {
         "end_date_time": "1977-09-25T01:54:22Z",
         "end_times": 3400756039590933957,
         "monthly_day": 16,
         "monthly_week": 1,
         "monthly_week_day": 6,
         "repeat_interval": 7055716465626542352,
         "type": 2,
         "weekly_days": "1,3,5"
      },
      "restricted": false,
      "start_time": "2021-01-01T00:00:00Z",
      "timezone": "Delectus totam ullam quia iusto sed atque.",
      "title": "Distinctio similique.",
      "transcript_enabled": false,
      "visibility": "public",
      "youtube_upload_enabled": true,
      "zoom_config": {
         "ai_companion_enabled": true,
         "ai_summary_require_approval": false
      }
   }' --version "1" --bearer-token "eyJhbGci..."
`, os.Args[0])
}

func meetingServiceGetMeetingBaseUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] meeting-service get-meeting-base -uid STRING -version STRING -bearer-token STRING

Get a meeting by ID
    -uid STRING: The UID of the meeting
    -version STRING: 
    -bearer-token STRING: 

Example:
    %[1]s meeting-service get-meeting-base --uid "7cad5a8d-19d0-41a4-81a6-043453daf9ee" --version "1" --bearer-token "eyJhbGci..."
`, os.Args[0])
}

func meetingServiceGetMeetingSettingsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] meeting-service get-meeting-settings -uid STRING -version STRING -bearer-token STRING

Get a single meeting's settings.
    -uid STRING: The UID of the meeting
    -version STRING: 
    -bearer-token STRING: 

Example:
    %[1]s meeting-service get-meeting-settings --uid "7cad5a8d-19d0-41a4-81a6-043453daf9ee" --version "1" --bearer-token "eyJhbGci..."
`, os.Args[0])
}

func meetingServiceUpdateMeetingBaseUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] meeting-service update-meeting-base -body JSON -uid STRING -version STRING -bearer-token STRING -if-match STRING

Update an existing meeting base.
    -body JSON: 
    -uid STRING: The UID of the meeting
    -version STRING: 
    -bearer-token STRING: 
    -if-match STRING: 

Example:
    %[1]s meeting-service update-meeting-base --body '{
      "artifact_visibility": "meeting_hosts",
      "committees": [
         {
            "allowed_voting_statuses": [
               "Veniam occaecati sed vitae non aut totam.",
               "Laborum earum praesentium.",
               "Velit recusandae voluptatem in ut."
            ],
            "uid": "Repudiandae laborum quibusdam ut ut earum assumenda."
         },
         {
            "allowed_voting_statuses": [
               "Veniam occaecati sed vitae non aut totam.",
               "Laborum earum praesentium.",
               "Velit recusandae voluptatem in ut."
            ],
            "uid": "Repudiandae laborum quibusdam ut ut earum assumenda."
         },
         {
            "allowed_voting_statuses": [
               "Veniam occaecati sed vitae non aut totam.",
               "Laborum earum praesentium.",
               "Velit recusandae voluptatem in ut."
            ],
            "uid": "Repudiandae laborum quibusdam ut ut earum assumenda."
         },
         {
            "allowed_voting_statuses": [
               "Veniam occaecati sed vitae non aut totam.",
               "Laborum earum praesentium.",
               "Velit recusandae voluptatem in ut."
            ],
            "uid": "Repudiandae laborum quibusdam ut ut earum assumenda."
         }
      ],
      "description": "Et vero.",
      "duration": 273,
      "early_join_time_minutes": 32,
      "meeting_type": "None",
      "platform": "Zoom",
      "project_uid": "7cad5a8d-19d0-41a4-81a6-043453daf9ee",
      "recording_enabled": true,
      "recurrence": {
         "end_date_time": "1977-09-25T01:54:22Z",
         "end_times": 3400756039590933957,
         "monthly_day": 16,
         "monthly_week": 1,
         "monthly_week_day": 6,
         "repeat_interval": 7055716465626542352,
         "type": 2,
         "weekly_days": "1,3,5"
      },
      "restricted": true,
      "start_time": "2021-01-01T00:00:00Z",
      "timezone": "Mollitia nemo est aut dolores.",
      "title": "Officia provident perspiciatis nihil.",
      "transcript_enabled": false,
      "visibility": "private",
      "youtube_upload_enabled": true,
      "zoom_config": {
         "ai_companion_enabled": true,
         "ai_summary_require_approval": false
      }
   }' --uid "7cad5a8d-19d0-41a4-81a6-043453daf9ee" --version "1" --bearer-token "eyJhbGci..." --if-match "123"
`, os.Args[0])
}

func meetingServiceUpdateMeetingSettingsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] meeting-service update-meeting-settings -body JSON -uid STRING -version STRING -bearer-token STRING -if-match STRING

Update an existing meeting's settings.
    -body JSON: 
    -uid STRING: The UID of the meeting
    -version STRING: 
    -bearer-token STRING: 
    -if-match STRING: 

Example:
    %[1]s meeting-service update-meeting-settings --body '{
      "organizers": [
         "Esse occaecati rem recusandae architecto vero.",
         "Impedit autem.",
         "Est consequatur qui tenetur."
      ]
   }' --uid "7cad5a8d-19d0-41a4-81a6-043453daf9ee" --version "1" --bearer-token "eyJhbGci..." --if-match "123"
`, os.Args[0])
}

func meetingServiceDeleteMeetingUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] meeting-service delete-meeting -uid STRING -version STRING -bearer-token STRING -if-match STRING

Delete an existing meeting.
    -uid STRING: The UID of the meeting
    -version STRING: 
    -bearer-token STRING: 
    -if-match STRING: 

Example:
    %[1]s meeting-service delete-meeting --uid "7cad5a8d-19d0-41a4-81a6-043453daf9ee" --version "1" --bearer-token "eyJhbGci..." --if-match "123"
`, os.Args[0])
}

func meetingServiceGetMeetingRegistrantsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] meeting-service get-meeting-registrants -uid STRING -version STRING -bearer-token STRING

Get all registrants for a meeting
    -uid STRING: The UID of the meeting
    -version STRING: 
    -bearer-token STRING: 

Example:
    %[1]s meeting-service get-meeting-registrants --uid "7cad5a8d-19d0-41a4-81a6-043453daf9ee" --version "1" --bearer-token "eyJhbGci..."
`, os.Args[0])
}

func meetingServiceCreateMeetingRegistrantUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] meeting-service create-meeting-registrant -body JSON -meeting-uid STRING -version STRING -bearer-token STRING

Create a new registrant for a meeting
    -body JSON: 
    -meeting-uid STRING: The UID of the meeting
    -version STRING: 
    -bearer-token STRING: 

Example:
    %[1]s meeting-service create-meeting-registrant --body '{
      "avatar_url": "https://example.com/avatar.jpg",
      "email": "user@example.com",
      "first_name": "John",
      "host": true,
      "job_title": "Software Engineer",
      "last_name": "Doe",
      "occurrence_id": "1640995200",
      "org_name": "Ducimus itaque quaerat voluptatibus magni.",
      "username": "Temporibus rerum quidem voluptatem est nobis optio."
   }' --meeting-uid "7cad5a8d-19d0-41a4-81a6-043453daf9ee" --version "1" --bearer-token "eyJhbGci..."
`, os.Args[0])
}

func meetingServiceGetMeetingRegistrantUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] meeting-service get-meeting-registrant -meeting-uid STRING -uid STRING -version STRING -bearer-token STRING

Get a specific registrant for a meeting by UID
    -meeting-uid STRING: The UID of the meeting
    -uid STRING: The UID of the registrant
    -version STRING: 
    -bearer-token STRING: 

Example:
    %[1]s meeting-service get-meeting-registrant --meeting-uid "7cad5a8d-19d0-41a4-81a6-043453daf9ee" --uid "7cad5a8d-19d0-41a4-81a6-043453daf9ee" --version "1" --bearer-token "eyJhbGci..."
`, os.Args[0])
}

func meetingServiceUpdateMeetingRegistrantUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] meeting-service update-meeting-registrant -body JSON -meeting-uid STRING -uid STRING -version STRING -bearer-token STRING -if-match STRING

Update an existing registrant for a meeting
    -body JSON: 
    -meeting-uid STRING: The UID of the meeting
    -uid STRING: The UID of the registrant
    -version STRING: 
    -bearer-token STRING: 
    -if-match STRING: 

Example:
    %[1]s meeting-service update-meeting-registrant --body '{
      "avatar_url": "https://example.com/avatar.jpg",
      "email": "user@example.com",
      "first_name": "John",
      "host": false,
      "job_title": "Software Engineer",
      "last_name": "Doe",
      "occurrence_id": "1640995200",
      "org_name": "Eligendi temporibus occaecati ut delectus repudiandae.",
      "username": "Explicabo minima."
   }' --meeting-uid "7cad5a8d-19d0-41a4-81a6-043453daf9ee" --uid "7cad5a8d-19d0-41a4-81a6-043453daf9ee" --version "1" --bearer-token "eyJhbGci..." --if-match "123"
`, os.Args[0])
}

func meetingServiceDeleteMeetingRegistrantUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] meeting-service delete-meeting-registrant -meeting-uid STRING -uid STRING -version STRING -bearer-token STRING -if-match STRING

Delete a registrant from a meeting
    -meeting-uid STRING: The UID of the meeting
    -uid STRING: The UID of the registrant
    -version STRING: 
    -bearer-token STRING: 
    -if-match STRING: 

Example:
    %[1]s meeting-service delete-meeting-registrant --meeting-uid "7cad5a8d-19d0-41a4-81a6-043453daf9ee" --uid "7cad5a8d-19d0-41a4-81a6-043453daf9ee" --version "1" --bearer-token "eyJhbGci..." --if-match "123"
`, os.Args[0])
}

func meetingServiceReadyzUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] meeting-service readyz

Check if the service is able to take inbound requests.

Example:
    %[1]s meeting-service readyz
`, os.Args[0])
}

func meetingServiceLivezUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] meeting-service livez

Check if the service is alive.

Example:
    %[1]s meeting-service livez
`, os.Args[0])
}
