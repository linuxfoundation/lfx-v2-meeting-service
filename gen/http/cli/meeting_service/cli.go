// Code generated by goa v3.21.1, DO NOT EDIT.
//
// Meeting Service HTTP client CLI support package
//
// Command:
// $ goa gen github.com/linuxfoundation/lfx-v2-meeting-service/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	meetingservicec "github.com/linuxfoundation/lfx-v2-meeting-service/gen/http/meeting_service/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `meeting-service (get-meetings|create-meeting|get-meeting-base|get-meeting-settings|update-meeting-base|update-meeting-settings|delete-meeting|get-meeting-registrants|create-meeting-registrant|get-meeting-registrant|update-meeting-registrant|delete-meeting-registrant|zoom-webhook|get-past-meetings|create-past-meeting|get-past-meeting|delete-past-meeting|get-past-meeting-participants|create-past-meeting-participant|get-past-meeting-participant|update-past-meeting-participant|delete-past-meeting-participant|readyz|livez)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` meeting-service get-meetings --version "1" --bearer-token "eyJhbGci..."` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		meetingServiceFlags = flag.NewFlagSet("meeting-service", flag.ContinueOnError)

		meetingServiceGetMeetingsFlags           = flag.NewFlagSet("get-meetings", flag.ExitOnError)
		meetingServiceGetMeetingsVersionFlag     = meetingServiceGetMeetingsFlags.String("version", "", "")
		meetingServiceGetMeetingsBearerTokenFlag = meetingServiceGetMeetingsFlags.String("bearer-token", "", "")

		meetingServiceCreateMeetingFlags           = flag.NewFlagSet("create-meeting", flag.ExitOnError)
		meetingServiceCreateMeetingBodyFlag        = meetingServiceCreateMeetingFlags.String("body", "REQUIRED", "")
		meetingServiceCreateMeetingVersionFlag     = meetingServiceCreateMeetingFlags.String("version", "", "")
		meetingServiceCreateMeetingBearerTokenFlag = meetingServiceCreateMeetingFlags.String("bearer-token", "", "")

		meetingServiceGetMeetingBaseFlags           = flag.NewFlagSet("get-meeting-base", flag.ExitOnError)
		meetingServiceGetMeetingBaseUIDFlag         = meetingServiceGetMeetingBaseFlags.String("uid", "REQUIRED", "The UID of the meeting")
		meetingServiceGetMeetingBaseVersionFlag     = meetingServiceGetMeetingBaseFlags.String("version", "", "")
		meetingServiceGetMeetingBaseBearerTokenFlag = meetingServiceGetMeetingBaseFlags.String("bearer-token", "", "")

		meetingServiceGetMeetingSettingsFlags           = flag.NewFlagSet("get-meeting-settings", flag.ExitOnError)
		meetingServiceGetMeetingSettingsUIDFlag         = meetingServiceGetMeetingSettingsFlags.String("uid", "REQUIRED", "The UID of the meeting")
		meetingServiceGetMeetingSettingsVersionFlag     = meetingServiceGetMeetingSettingsFlags.String("version", "", "")
		meetingServiceGetMeetingSettingsBearerTokenFlag = meetingServiceGetMeetingSettingsFlags.String("bearer-token", "", "")

		meetingServiceUpdateMeetingBaseFlags           = flag.NewFlagSet("update-meeting-base", flag.ExitOnError)
		meetingServiceUpdateMeetingBaseBodyFlag        = meetingServiceUpdateMeetingBaseFlags.String("body", "REQUIRED", "")
		meetingServiceUpdateMeetingBaseUIDFlag         = meetingServiceUpdateMeetingBaseFlags.String("uid", "REQUIRED", "The UID of the meeting")
		meetingServiceUpdateMeetingBaseVersionFlag     = meetingServiceUpdateMeetingBaseFlags.String("version", "", "")
		meetingServiceUpdateMeetingBaseBearerTokenFlag = meetingServiceUpdateMeetingBaseFlags.String("bearer-token", "", "")
		meetingServiceUpdateMeetingBaseIfMatchFlag     = meetingServiceUpdateMeetingBaseFlags.String("if-match", "", "")

		meetingServiceUpdateMeetingSettingsFlags           = flag.NewFlagSet("update-meeting-settings", flag.ExitOnError)
		meetingServiceUpdateMeetingSettingsBodyFlag        = meetingServiceUpdateMeetingSettingsFlags.String("body", "REQUIRED", "")
		meetingServiceUpdateMeetingSettingsUIDFlag         = meetingServiceUpdateMeetingSettingsFlags.String("uid", "REQUIRED", "The UID of the meeting")
		meetingServiceUpdateMeetingSettingsVersionFlag     = meetingServiceUpdateMeetingSettingsFlags.String("version", "", "")
		meetingServiceUpdateMeetingSettingsBearerTokenFlag = meetingServiceUpdateMeetingSettingsFlags.String("bearer-token", "", "")
		meetingServiceUpdateMeetingSettingsIfMatchFlag     = meetingServiceUpdateMeetingSettingsFlags.String("if-match", "", "")

		meetingServiceDeleteMeetingFlags           = flag.NewFlagSet("delete-meeting", flag.ExitOnError)
		meetingServiceDeleteMeetingUIDFlag         = meetingServiceDeleteMeetingFlags.String("uid", "REQUIRED", "The UID of the meeting")
		meetingServiceDeleteMeetingVersionFlag     = meetingServiceDeleteMeetingFlags.String("version", "", "")
		meetingServiceDeleteMeetingBearerTokenFlag = meetingServiceDeleteMeetingFlags.String("bearer-token", "", "")
		meetingServiceDeleteMeetingIfMatchFlag     = meetingServiceDeleteMeetingFlags.String("if-match", "", "")

		meetingServiceGetMeetingRegistrantsFlags           = flag.NewFlagSet("get-meeting-registrants", flag.ExitOnError)
		meetingServiceGetMeetingRegistrantsUIDFlag         = meetingServiceGetMeetingRegistrantsFlags.String("uid", "REQUIRED", "The UID of the meeting")
		meetingServiceGetMeetingRegistrantsVersionFlag     = meetingServiceGetMeetingRegistrantsFlags.String("version", "", "")
		meetingServiceGetMeetingRegistrantsBearerTokenFlag = meetingServiceGetMeetingRegistrantsFlags.String("bearer-token", "", "")

		meetingServiceCreateMeetingRegistrantFlags           = flag.NewFlagSet("create-meeting-registrant", flag.ExitOnError)
		meetingServiceCreateMeetingRegistrantBodyFlag        = meetingServiceCreateMeetingRegistrantFlags.String("body", "REQUIRED", "")
		meetingServiceCreateMeetingRegistrantMeetingUIDFlag  = meetingServiceCreateMeetingRegistrantFlags.String("meeting-uid", "REQUIRED", "The UID of the meeting")
		meetingServiceCreateMeetingRegistrantVersionFlag     = meetingServiceCreateMeetingRegistrantFlags.String("version", "", "")
		meetingServiceCreateMeetingRegistrantBearerTokenFlag = meetingServiceCreateMeetingRegistrantFlags.String("bearer-token", "", "")

		meetingServiceGetMeetingRegistrantFlags           = flag.NewFlagSet("get-meeting-registrant", flag.ExitOnError)
		meetingServiceGetMeetingRegistrantMeetingUIDFlag  = meetingServiceGetMeetingRegistrantFlags.String("meeting-uid", "REQUIRED", "The UID of the meeting")
		meetingServiceGetMeetingRegistrantUIDFlag         = meetingServiceGetMeetingRegistrantFlags.String("uid", "REQUIRED", "The UID of the registrant")
		meetingServiceGetMeetingRegistrantVersionFlag     = meetingServiceGetMeetingRegistrantFlags.String("version", "", "")
		meetingServiceGetMeetingRegistrantBearerTokenFlag = meetingServiceGetMeetingRegistrantFlags.String("bearer-token", "", "")

		meetingServiceUpdateMeetingRegistrantFlags           = flag.NewFlagSet("update-meeting-registrant", flag.ExitOnError)
		meetingServiceUpdateMeetingRegistrantBodyFlag        = meetingServiceUpdateMeetingRegistrantFlags.String("body", "REQUIRED", "")
		meetingServiceUpdateMeetingRegistrantMeetingUIDFlag  = meetingServiceUpdateMeetingRegistrantFlags.String("meeting-uid", "REQUIRED", "The UID of the meeting")
		meetingServiceUpdateMeetingRegistrantUIDFlag         = meetingServiceUpdateMeetingRegistrantFlags.String("uid", "REQUIRED", "The UID of the registrant")
		meetingServiceUpdateMeetingRegistrantVersionFlag     = meetingServiceUpdateMeetingRegistrantFlags.String("version", "", "")
		meetingServiceUpdateMeetingRegistrantBearerTokenFlag = meetingServiceUpdateMeetingRegistrantFlags.String("bearer-token", "", "")
		meetingServiceUpdateMeetingRegistrantIfMatchFlag     = meetingServiceUpdateMeetingRegistrantFlags.String("if-match", "", "")

		meetingServiceDeleteMeetingRegistrantFlags           = flag.NewFlagSet("delete-meeting-registrant", flag.ExitOnError)
		meetingServiceDeleteMeetingRegistrantMeetingUIDFlag  = meetingServiceDeleteMeetingRegistrantFlags.String("meeting-uid", "REQUIRED", "The UID of the meeting")
		meetingServiceDeleteMeetingRegistrantUIDFlag         = meetingServiceDeleteMeetingRegistrantFlags.String("uid", "REQUIRED", "The UID of the registrant")
		meetingServiceDeleteMeetingRegistrantVersionFlag     = meetingServiceDeleteMeetingRegistrantFlags.String("version", "", "")
		meetingServiceDeleteMeetingRegistrantBearerTokenFlag = meetingServiceDeleteMeetingRegistrantFlags.String("bearer-token", "", "")
		meetingServiceDeleteMeetingRegistrantIfMatchFlag     = meetingServiceDeleteMeetingRegistrantFlags.String("if-match", "", "")

		meetingServiceZoomWebhookFlags             = flag.NewFlagSet("zoom-webhook", flag.ExitOnError)
		meetingServiceZoomWebhookBodyFlag          = meetingServiceZoomWebhookFlags.String("body", "REQUIRED", "")
		meetingServiceZoomWebhookZoomSignatureFlag = meetingServiceZoomWebhookFlags.String("zoom-signature", "", "")
		meetingServiceZoomWebhookZoomTimestampFlag = meetingServiceZoomWebhookFlags.String("zoom-timestamp", "", "")

		meetingServiceGetPastMeetingsFlags           = flag.NewFlagSet("get-past-meetings", flag.ExitOnError)
		meetingServiceGetPastMeetingsVersionFlag     = meetingServiceGetPastMeetingsFlags.String("version", "", "")
		meetingServiceGetPastMeetingsBearerTokenFlag = meetingServiceGetPastMeetingsFlags.String("bearer-token", "", "")

		meetingServiceCreatePastMeetingFlags           = flag.NewFlagSet("create-past-meeting", flag.ExitOnError)
		meetingServiceCreatePastMeetingBodyFlag        = meetingServiceCreatePastMeetingFlags.String("body", "REQUIRED", "")
		meetingServiceCreatePastMeetingVersionFlag     = meetingServiceCreatePastMeetingFlags.String("version", "", "")
		meetingServiceCreatePastMeetingBearerTokenFlag = meetingServiceCreatePastMeetingFlags.String("bearer-token", "", "")

		meetingServiceGetPastMeetingFlags           = flag.NewFlagSet("get-past-meeting", flag.ExitOnError)
		meetingServiceGetPastMeetingUIDFlag         = meetingServiceGetPastMeetingFlags.String("uid", "REQUIRED", "The unique identifier of the past meeting")
		meetingServiceGetPastMeetingVersionFlag     = meetingServiceGetPastMeetingFlags.String("version", "", "")
		meetingServiceGetPastMeetingBearerTokenFlag = meetingServiceGetPastMeetingFlags.String("bearer-token", "", "")

		meetingServiceDeletePastMeetingFlags           = flag.NewFlagSet("delete-past-meeting", flag.ExitOnError)
		meetingServiceDeletePastMeetingUIDFlag         = meetingServiceDeletePastMeetingFlags.String("uid", "REQUIRED", "The unique identifier of the past meeting")
		meetingServiceDeletePastMeetingVersionFlag     = meetingServiceDeletePastMeetingFlags.String("version", "", "")
		meetingServiceDeletePastMeetingBearerTokenFlag = meetingServiceDeletePastMeetingFlags.String("bearer-token", "", "")
		meetingServiceDeletePastMeetingIfMatchFlag     = meetingServiceDeletePastMeetingFlags.String("if-match", "", "")

		meetingServiceGetPastMeetingParticipantsFlags           = flag.NewFlagSet("get-past-meeting-participants", flag.ExitOnError)
		meetingServiceGetPastMeetingParticipantsUIDFlag         = meetingServiceGetPastMeetingParticipantsFlags.String("uid", "REQUIRED", "The unique identifier of the past meeting")
		meetingServiceGetPastMeetingParticipantsVersionFlag     = meetingServiceGetPastMeetingParticipantsFlags.String("version", "", "")
		meetingServiceGetPastMeetingParticipantsBearerTokenFlag = meetingServiceGetPastMeetingParticipantsFlags.String("bearer-token", "", "")

		meetingServiceCreatePastMeetingParticipantFlags           = flag.NewFlagSet("create-past-meeting-participant", flag.ExitOnError)
		meetingServiceCreatePastMeetingParticipantBodyFlag        = meetingServiceCreatePastMeetingParticipantFlags.String("body", "REQUIRED", "")
		meetingServiceCreatePastMeetingParticipantUIDFlag         = meetingServiceCreatePastMeetingParticipantFlags.String("uid", "REQUIRED", "The unique identifier of the past meeting")
		meetingServiceCreatePastMeetingParticipantVersionFlag     = meetingServiceCreatePastMeetingParticipantFlags.String("version", "", "")
		meetingServiceCreatePastMeetingParticipantBearerTokenFlag = meetingServiceCreatePastMeetingParticipantFlags.String("bearer-token", "", "")

		meetingServiceGetPastMeetingParticipantFlags              = flag.NewFlagSet("get-past-meeting-participant", flag.ExitOnError)
		meetingServiceGetPastMeetingParticipantPastMeetingUIDFlag = meetingServiceGetPastMeetingParticipantFlags.String("past-meeting-uid", "REQUIRED", "The unique identifier of the past meeting")
		meetingServiceGetPastMeetingParticipantUIDFlag            = meetingServiceGetPastMeetingParticipantFlags.String("uid", "REQUIRED", "The UID of the past meeting participant")
		meetingServiceGetPastMeetingParticipantVersionFlag        = meetingServiceGetPastMeetingParticipantFlags.String("version", "", "")
		meetingServiceGetPastMeetingParticipantBearerTokenFlag    = meetingServiceGetPastMeetingParticipantFlags.String("bearer-token", "", "")

		meetingServiceUpdatePastMeetingParticipantFlags              = flag.NewFlagSet("update-past-meeting-participant", flag.ExitOnError)
		meetingServiceUpdatePastMeetingParticipantBodyFlag           = meetingServiceUpdatePastMeetingParticipantFlags.String("body", "REQUIRED", "")
		meetingServiceUpdatePastMeetingParticipantPastMeetingUIDFlag = meetingServiceUpdatePastMeetingParticipantFlags.String("past-meeting-uid", "REQUIRED", "The unique identifier of the past meeting")
		meetingServiceUpdatePastMeetingParticipantUIDFlag            = meetingServiceUpdatePastMeetingParticipantFlags.String("uid", "REQUIRED", "The UID of the past meeting participant")
		meetingServiceUpdatePastMeetingParticipantVersionFlag        = meetingServiceUpdatePastMeetingParticipantFlags.String("version", "", "")
		meetingServiceUpdatePastMeetingParticipantBearerTokenFlag    = meetingServiceUpdatePastMeetingParticipantFlags.String("bearer-token", "", "")
		meetingServiceUpdatePastMeetingParticipantIfMatchFlag        = meetingServiceUpdatePastMeetingParticipantFlags.String("if-match", "", "")

		meetingServiceDeletePastMeetingParticipantFlags              = flag.NewFlagSet("delete-past-meeting-participant", flag.ExitOnError)
		meetingServiceDeletePastMeetingParticipantPastMeetingUIDFlag = meetingServiceDeletePastMeetingParticipantFlags.String("past-meeting-uid", "REQUIRED", "The unique identifier of the past meeting")
		meetingServiceDeletePastMeetingParticipantUIDFlag            = meetingServiceDeletePastMeetingParticipantFlags.String("uid", "REQUIRED", "The UID of the past meeting participant")
		meetingServiceDeletePastMeetingParticipantVersionFlag        = meetingServiceDeletePastMeetingParticipantFlags.String("version", "", "")
		meetingServiceDeletePastMeetingParticipantBearerTokenFlag    = meetingServiceDeletePastMeetingParticipantFlags.String("bearer-token", "", "")
		meetingServiceDeletePastMeetingParticipantIfMatchFlag        = meetingServiceDeletePastMeetingParticipantFlags.String("if-match", "", "")

		meetingServiceReadyzFlags = flag.NewFlagSet("readyz", flag.ExitOnError)

		meetingServiceLivezFlags = flag.NewFlagSet("livez", flag.ExitOnError)
	)
	meetingServiceFlags.Usage = meetingServiceUsage
	meetingServiceGetMeetingsFlags.Usage = meetingServiceGetMeetingsUsage
	meetingServiceCreateMeetingFlags.Usage = meetingServiceCreateMeetingUsage
	meetingServiceGetMeetingBaseFlags.Usage = meetingServiceGetMeetingBaseUsage
	meetingServiceGetMeetingSettingsFlags.Usage = meetingServiceGetMeetingSettingsUsage
	meetingServiceUpdateMeetingBaseFlags.Usage = meetingServiceUpdateMeetingBaseUsage
	meetingServiceUpdateMeetingSettingsFlags.Usage = meetingServiceUpdateMeetingSettingsUsage
	meetingServiceDeleteMeetingFlags.Usage = meetingServiceDeleteMeetingUsage
	meetingServiceGetMeetingRegistrantsFlags.Usage = meetingServiceGetMeetingRegistrantsUsage
	meetingServiceCreateMeetingRegistrantFlags.Usage = meetingServiceCreateMeetingRegistrantUsage
	meetingServiceGetMeetingRegistrantFlags.Usage = meetingServiceGetMeetingRegistrantUsage
	meetingServiceUpdateMeetingRegistrantFlags.Usage = meetingServiceUpdateMeetingRegistrantUsage
	meetingServiceDeleteMeetingRegistrantFlags.Usage = meetingServiceDeleteMeetingRegistrantUsage
	meetingServiceZoomWebhookFlags.Usage = meetingServiceZoomWebhookUsage
	meetingServiceGetPastMeetingsFlags.Usage = meetingServiceGetPastMeetingsUsage
	meetingServiceCreatePastMeetingFlags.Usage = meetingServiceCreatePastMeetingUsage
	meetingServiceGetPastMeetingFlags.Usage = meetingServiceGetPastMeetingUsage
	meetingServiceDeletePastMeetingFlags.Usage = meetingServiceDeletePastMeetingUsage
	meetingServiceGetPastMeetingParticipantsFlags.Usage = meetingServiceGetPastMeetingParticipantsUsage
	meetingServiceCreatePastMeetingParticipantFlags.Usage = meetingServiceCreatePastMeetingParticipantUsage
	meetingServiceGetPastMeetingParticipantFlags.Usage = meetingServiceGetPastMeetingParticipantUsage
	meetingServiceUpdatePastMeetingParticipantFlags.Usage = meetingServiceUpdatePastMeetingParticipantUsage
	meetingServiceDeletePastMeetingParticipantFlags.Usage = meetingServiceDeletePastMeetingParticipantUsage
	meetingServiceReadyzFlags.Usage = meetingServiceReadyzUsage
	meetingServiceLivezFlags.Usage = meetingServiceLivezUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "meeting-service":
			svcf = meetingServiceFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "meeting-service":
			switch epn {
			case "get-meetings":
				epf = meetingServiceGetMeetingsFlags

			case "create-meeting":
				epf = meetingServiceCreateMeetingFlags

			case "get-meeting-base":
				epf = meetingServiceGetMeetingBaseFlags

			case "get-meeting-settings":
				epf = meetingServiceGetMeetingSettingsFlags

			case "update-meeting-base":
				epf = meetingServiceUpdateMeetingBaseFlags

			case "update-meeting-settings":
				epf = meetingServiceUpdateMeetingSettingsFlags

			case "delete-meeting":
				epf = meetingServiceDeleteMeetingFlags

			case "get-meeting-registrants":
				epf = meetingServiceGetMeetingRegistrantsFlags

			case "create-meeting-registrant":
				epf = meetingServiceCreateMeetingRegistrantFlags

			case "get-meeting-registrant":
				epf = meetingServiceGetMeetingRegistrantFlags

			case "update-meeting-registrant":
				epf = meetingServiceUpdateMeetingRegistrantFlags

			case "delete-meeting-registrant":
				epf = meetingServiceDeleteMeetingRegistrantFlags

			case "zoom-webhook":
				epf = meetingServiceZoomWebhookFlags

			case "get-past-meetings":
				epf = meetingServiceGetPastMeetingsFlags

			case "create-past-meeting":
				epf = meetingServiceCreatePastMeetingFlags

			case "get-past-meeting":
				epf = meetingServiceGetPastMeetingFlags

			case "delete-past-meeting":
				epf = meetingServiceDeletePastMeetingFlags

			case "get-past-meeting-participants":
				epf = meetingServiceGetPastMeetingParticipantsFlags

			case "create-past-meeting-participant":
				epf = meetingServiceCreatePastMeetingParticipantFlags

			case "get-past-meeting-participant":
				epf = meetingServiceGetPastMeetingParticipantFlags

			case "update-past-meeting-participant":
				epf = meetingServiceUpdatePastMeetingParticipantFlags

			case "delete-past-meeting-participant":
				epf = meetingServiceDeletePastMeetingParticipantFlags

			case "readyz":
				epf = meetingServiceReadyzFlags

			case "livez":
				epf = meetingServiceLivezFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "meeting-service":
			c := meetingservicec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get-meetings":
				endpoint = c.GetMeetings()
				data, err = meetingservicec.BuildGetMeetingsPayload(*meetingServiceGetMeetingsVersionFlag, *meetingServiceGetMeetingsBearerTokenFlag)
			case "create-meeting":
				endpoint = c.CreateMeeting()
				data, err = meetingservicec.BuildCreateMeetingPayload(*meetingServiceCreateMeetingBodyFlag, *meetingServiceCreateMeetingVersionFlag, *meetingServiceCreateMeetingBearerTokenFlag)
			case "get-meeting-base":
				endpoint = c.GetMeetingBase()
				data, err = meetingservicec.BuildGetMeetingBasePayload(*meetingServiceGetMeetingBaseUIDFlag, *meetingServiceGetMeetingBaseVersionFlag, *meetingServiceGetMeetingBaseBearerTokenFlag)
			case "get-meeting-settings":
				endpoint = c.GetMeetingSettings()
				data, err = meetingservicec.BuildGetMeetingSettingsPayload(*meetingServiceGetMeetingSettingsUIDFlag, *meetingServiceGetMeetingSettingsVersionFlag, *meetingServiceGetMeetingSettingsBearerTokenFlag)
			case "update-meeting-base":
				endpoint = c.UpdateMeetingBase()
				data, err = meetingservicec.BuildUpdateMeetingBasePayload(*meetingServiceUpdateMeetingBaseBodyFlag, *meetingServiceUpdateMeetingBaseUIDFlag, *meetingServiceUpdateMeetingBaseVersionFlag, *meetingServiceUpdateMeetingBaseBearerTokenFlag, *meetingServiceUpdateMeetingBaseIfMatchFlag)
			case "update-meeting-settings":
				endpoint = c.UpdateMeetingSettings()
				data, err = meetingservicec.BuildUpdateMeetingSettingsPayload(*meetingServiceUpdateMeetingSettingsBodyFlag, *meetingServiceUpdateMeetingSettingsUIDFlag, *meetingServiceUpdateMeetingSettingsVersionFlag, *meetingServiceUpdateMeetingSettingsBearerTokenFlag, *meetingServiceUpdateMeetingSettingsIfMatchFlag)
			case "delete-meeting":
				endpoint = c.DeleteMeeting()
				data, err = meetingservicec.BuildDeleteMeetingPayload(*meetingServiceDeleteMeetingUIDFlag, *meetingServiceDeleteMeetingVersionFlag, *meetingServiceDeleteMeetingBearerTokenFlag, *meetingServiceDeleteMeetingIfMatchFlag)
			case "get-meeting-registrants":
				endpoint = c.GetMeetingRegistrants()
				data, err = meetingservicec.BuildGetMeetingRegistrantsPayload(*meetingServiceGetMeetingRegistrantsUIDFlag, *meetingServiceGetMeetingRegistrantsVersionFlag, *meetingServiceGetMeetingRegistrantsBearerTokenFlag)
			case "create-meeting-registrant":
				endpoint = c.CreateMeetingRegistrant()
				data, err = meetingservicec.BuildCreateMeetingRegistrantPayload(*meetingServiceCreateMeetingRegistrantBodyFlag, *meetingServiceCreateMeetingRegistrantMeetingUIDFlag, *meetingServiceCreateMeetingRegistrantVersionFlag, *meetingServiceCreateMeetingRegistrantBearerTokenFlag)
			case "get-meeting-registrant":
				endpoint = c.GetMeetingRegistrant()
				data, err = meetingservicec.BuildGetMeetingRegistrantPayload(*meetingServiceGetMeetingRegistrantMeetingUIDFlag, *meetingServiceGetMeetingRegistrantUIDFlag, *meetingServiceGetMeetingRegistrantVersionFlag, *meetingServiceGetMeetingRegistrantBearerTokenFlag)
			case "update-meeting-registrant":
				endpoint = c.UpdateMeetingRegistrant()
				data, err = meetingservicec.BuildUpdateMeetingRegistrantPayload(*meetingServiceUpdateMeetingRegistrantBodyFlag, *meetingServiceUpdateMeetingRegistrantMeetingUIDFlag, *meetingServiceUpdateMeetingRegistrantUIDFlag, *meetingServiceUpdateMeetingRegistrantVersionFlag, *meetingServiceUpdateMeetingRegistrantBearerTokenFlag, *meetingServiceUpdateMeetingRegistrantIfMatchFlag)
			case "delete-meeting-registrant":
				endpoint = c.DeleteMeetingRegistrant()
				data, err = meetingservicec.BuildDeleteMeetingRegistrantPayload(*meetingServiceDeleteMeetingRegistrantMeetingUIDFlag, *meetingServiceDeleteMeetingRegistrantUIDFlag, *meetingServiceDeleteMeetingRegistrantVersionFlag, *meetingServiceDeleteMeetingRegistrantBearerTokenFlag, *meetingServiceDeleteMeetingRegistrantIfMatchFlag)
			case "zoom-webhook":
				endpoint = c.ZoomWebhook()
				data, err = meetingservicec.BuildZoomWebhookPayload(*meetingServiceZoomWebhookBodyFlag, *meetingServiceZoomWebhookZoomSignatureFlag, *meetingServiceZoomWebhookZoomTimestampFlag)
			case "get-past-meetings":
				endpoint = c.GetPastMeetings()
				data, err = meetingservicec.BuildGetPastMeetingsPayload(*meetingServiceGetPastMeetingsVersionFlag, *meetingServiceGetPastMeetingsBearerTokenFlag)
			case "create-past-meeting":
				endpoint = c.CreatePastMeeting()
				data, err = meetingservicec.BuildCreatePastMeetingPayload(*meetingServiceCreatePastMeetingBodyFlag, *meetingServiceCreatePastMeetingVersionFlag, *meetingServiceCreatePastMeetingBearerTokenFlag)
			case "get-past-meeting":
				endpoint = c.GetPastMeeting()
				data, err = meetingservicec.BuildGetPastMeetingPayload(*meetingServiceGetPastMeetingUIDFlag, *meetingServiceGetPastMeetingVersionFlag, *meetingServiceGetPastMeetingBearerTokenFlag)
			case "delete-past-meeting":
				endpoint = c.DeletePastMeeting()
				data, err = meetingservicec.BuildDeletePastMeetingPayload(*meetingServiceDeletePastMeetingUIDFlag, *meetingServiceDeletePastMeetingVersionFlag, *meetingServiceDeletePastMeetingBearerTokenFlag, *meetingServiceDeletePastMeetingIfMatchFlag)
			case "get-past-meeting-participants":
				endpoint = c.GetPastMeetingParticipants()
				data, err = meetingservicec.BuildGetPastMeetingParticipantsPayload(*meetingServiceGetPastMeetingParticipantsUIDFlag, *meetingServiceGetPastMeetingParticipantsVersionFlag, *meetingServiceGetPastMeetingParticipantsBearerTokenFlag)
			case "create-past-meeting-participant":
				endpoint = c.CreatePastMeetingParticipant()
				data, err = meetingservicec.BuildCreatePastMeetingParticipantPayload(*meetingServiceCreatePastMeetingParticipantBodyFlag, *meetingServiceCreatePastMeetingParticipantUIDFlag, *meetingServiceCreatePastMeetingParticipantVersionFlag, *meetingServiceCreatePastMeetingParticipantBearerTokenFlag)
			case "get-past-meeting-participant":
				endpoint = c.GetPastMeetingParticipant()
				data, err = meetingservicec.BuildGetPastMeetingParticipantPayload(*meetingServiceGetPastMeetingParticipantPastMeetingUIDFlag, *meetingServiceGetPastMeetingParticipantUIDFlag, *meetingServiceGetPastMeetingParticipantVersionFlag, *meetingServiceGetPastMeetingParticipantBearerTokenFlag)
			case "update-past-meeting-participant":
				endpoint = c.UpdatePastMeetingParticipant()
				data, err = meetingservicec.BuildUpdatePastMeetingParticipantPayload(*meetingServiceUpdatePastMeetingParticipantBodyFlag, *meetingServiceUpdatePastMeetingParticipantPastMeetingUIDFlag, *meetingServiceUpdatePastMeetingParticipantUIDFlag, *meetingServiceUpdatePastMeetingParticipantVersionFlag, *meetingServiceUpdatePastMeetingParticipantBearerTokenFlag, *meetingServiceUpdatePastMeetingParticipantIfMatchFlag)
			case "delete-past-meeting-participant":
				endpoint = c.DeletePastMeetingParticipant()
				data, err = meetingservicec.BuildDeletePastMeetingParticipantPayload(*meetingServiceDeletePastMeetingParticipantPastMeetingUIDFlag, *meetingServiceDeletePastMeetingParticipantUIDFlag, *meetingServiceDeletePastMeetingParticipantVersionFlag, *meetingServiceDeletePastMeetingParticipantBearerTokenFlag, *meetingServiceDeletePastMeetingParticipantIfMatchFlag)
			case "readyz":
				endpoint = c.Readyz()
			case "livez":
				endpoint = c.Livez()
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// meetingServiceUsage displays the usage of the meeting-service command and
// its subcommands.
func meetingServiceUsage() {
	fmt.Fprintf(os.Stderr, `The meeting service handles all meeting-related operations for LF projects.
Usage:
    %[1]s [globalflags] meeting-service COMMAND [flags]

COMMAND:
    get-meetings: Get all meetings.
    create-meeting: Create a new meeting for a project. An actual meeting in the specific platform will be created by
			this endpoint. The meeting's occurrences and registrants are managed by this service rather than the third-party platform.
    get-meeting-base: Get a meeting by ID
    get-meeting-settings: Get a single meeting's settings.
    update-meeting-base: Update an existing meeting base.
    update-meeting-settings: Update an existing meeting's settings.
    delete-meeting: Delete an existing meeting.
    get-meeting-registrants: Get all registrants for a meeting
    create-meeting-registrant: Create a new registrant for a meeting
    get-meeting-registrant: Get a specific registrant for a meeting by UID
    update-meeting-registrant: Update an existing registrant for a meeting
    delete-meeting-registrant: Delete a registrant from a meeting
    zoom-webhook: Handle Zoom webhook events for meeting lifecycle, participants, and recordings.
    get-past-meetings: Get all past meetings.
    create-past-meeting: Create a new past meeting record. This allows manual addition of past meetings that didn't come from webhooks.
    get-past-meeting: Get a past meeting by ID
    delete-past-meeting: Delete an existing past meeting.
    get-past-meeting-participants: Get all participants for a past meeting
    create-past-meeting-participant: Create a new participant for a past meeting
    get-past-meeting-participant: Get a specific participant for a past meeting by UID
    update-past-meeting-participant: Update an existing participant for a past meeting
    delete-past-meeting-participant: Delete a participant from a past meeting
    readyz: Check if the service is able to take inbound requests.
    livez: Check if the service is alive.

Additional help:
    %[1]s meeting-service COMMAND --help
`, os.Args[0])
}
func meetingServiceGetMeetingsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] meeting-service get-meetings -version STRING -bearer-token STRING

Get all meetings.
    -version STRING: 
    -bearer-token STRING: 

Example:
    %[1]s meeting-service get-meetings --version "1" --bearer-token "eyJhbGci..."
`, os.Args[0])
}

func meetingServiceCreateMeetingUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] meeting-service create-meeting -body JSON -version STRING -bearer-token STRING

Create a new meeting for a project. An actual meeting in the specific platform will be created by
			this endpoint. The meeting's occurrences and registrants are managed by this service rather than the third-party platform.
    -body JSON: 
    -version STRING: 
    -bearer-token STRING: 

Example:
    %[1]s meeting-service create-meeting --body '{
      "artifact_visibility": "public",
      "committees": [
         {
            "allowed_voting_statuses": [
               "Doloremque et.",
               "Vel voluptates consequatur numquam."
            ],
            "uid": "Aspernatur enim doloremque sunt et et aut."
         },
         {
            "allowed_voting_statuses": [
               "Doloremque et.",
               "Vel voluptates consequatur numquam."
            ],
            "uid": "Aspernatur enim doloremque sunt et et aut."
         },
         {
            "allowed_voting_statuses": [
               "Doloremque et.",
               "Vel voluptates consequatur numquam."
            ],
            "uid": "Aspernatur enim doloremque sunt et et aut."
         },
         {
            "allowed_voting_statuses": [
               "Doloremque et.",
               "Vel voluptates consequatur numquam."
            ],
            "uid": "Aspernatur enim doloremque sunt et et aut."
         }
      ],
      "description": "Exercitationem rem unde.",
      "duration": 311,
      "early_join_time_minutes": 14,
      "meeting_type": "Maintainers",
      "organizers": [
         "Repudiandae voluptas.",
         "Ut earum vel quasi praesentium perferendis.",
         "Dignissimos fuga ratione.",
         "Architecto consequatur perferendis quis."
      ],
      "platform": "Zoom",
      "project_uid": "7cad5a8d-19d0-41a4-81a6-043453daf9ee",
      "recording_enabled": false,
      "recurrence": {
         "end_date_time": "1972-01-29T09:24:35Z",
         "end_times": 2368020361800503641,
         "monthly_day": 24,
         "monthly_week": -1,
         "monthly_week_day": 6,
         "repeat_interval": 4711238312625320147,
         "type": 1,
         "weekly_days": "1,3,5"
      },
      "restricted": true,
      "start_time": "2021-01-01T00:00:00Z",
      "timezone": "Debitis possimus qui est.",
      "title": "Molestias quis sit quia quasi dolor.",
      "transcript_enabled": true,
      "visibility": "private",
      "youtube_upload_enabled": false,
      "zoom_config": {
         "ai_companion_enabled": false,
         "ai_summary_require_approval": true
      }
   }' --version "1" --bearer-token "eyJhbGci..."
`, os.Args[0])
}

func meetingServiceGetMeetingBaseUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] meeting-service get-meeting-base -uid STRING -version STRING -bearer-token STRING

Get a meeting by ID
    -uid STRING: The UID of the meeting
    -version STRING: 
    -bearer-token STRING: 

Example:
    %[1]s meeting-service get-meeting-base --uid "7cad5a8d-19d0-41a4-81a6-043453daf9ee" --version "1" --bearer-token "eyJhbGci..."
`, os.Args[0])
}

func meetingServiceGetMeetingSettingsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] meeting-service get-meeting-settings -uid STRING -version STRING -bearer-token STRING

Get a single meeting's settings.
    -uid STRING: The UID of the meeting
    -version STRING: 
    -bearer-token STRING: 

Example:
    %[1]s meeting-service get-meeting-settings --uid "7cad5a8d-19d0-41a4-81a6-043453daf9ee" --version "1" --bearer-token "eyJhbGci..."
`, os.Args[0])
}

func meetingServiceUpdateMeetingBaseUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] meeting-service update-meeting-base -body JSON -uid STRING -version STRING -bearer-token STRING -if-match STRING

Update an existing meeting base.
    -body JSON: 
    -uid STRING: The UID of the meeting
    -version STRING: 
    -bearer-token STRING: 
    -if-match STRING: 

Example:
    %[1]s meeting-service update-meeting-base --body '{
      "artifact_visibility": "public",
      "committees": [
         {
            "allowed_voting_statuses": [
               "Doloremque et.",
               "Vel voluptates consequatur numquam."
            ],
            "uid": "Aspernatur enim doloremque sunt et et aut."
         },
         {
            "allowed_voting_statuses": [
               "Doloremque et.",
               "Vel voluptates consequatur numquam."
            ],
            "uid": "Aspernatur enim doloremque sunt et et aut."
         }
      ],
      "description": "Unde aut dicta quod.",
      "duration": 361,
      "early_join_time_minutes": 19,
      "meeting_type": "Marketing",
      "platform": "Zoom",
      "project_uid": "7cad5a8d-19d0-41a4-81a6-043453daf9ee",
      "recording_enabled": false,
      "recurrence": {
         "end_date_time": "1972-01-29T09:24:35Z",
         "end_times": 2368020361800503641,
         "monthly_day": 24,
         "monthly_week": -1,
         "monthly_week_day": 6,
         "repeat_interval": 4711238312625320147,
         "type": 1,
         "weekly_days": "1,3,5"
      },
      "restricted": false,
      "start_time": "2021-01-01T00:00:00Z",
      "timezone": "Rerum quidem voluptatem est nobis optio.",
      "title": "At occaecati reprehenderit.",
      "transcript_enabled": false,
      "visibility": "public",
      "youtube_upload_enabled": false,
      "zoom_config": {
         "ai_companion_enabled": false,
         "ai_summary_require_approval": true
      }
   }' --uid "7cad5a8d-19d0-41a4-81a6-043453daf9ee" --version "1" --bearer-token "eyJhbGci..." --if-match "123"
`, os.Args[0])
}

func meetingServiceUpdateMeetingSettingsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] meeting-service update-meeting-settings -body JSON -uid STRING -version STRING -bearer-token STRING -if-match STRING

Update an existing meeting's settings.
    -body JSON: 
    -uid STRING: The UID of the meeting
    -version STRING: 
    -bearer-token STRING: 
    -if-match STRING: 

Example:
    %[1]s meeting-service update-meeting-settings --body '{
      "organizers": [
         "Rerum a aut blanditiis illum praesentium magni.",
         "Alias asperiores."
      ]
   }' --uid "7cad5a8d-19d0-41a4-81a6-043453daf9ee" --version "1" --bearer-token "eyJhbGci..." --if-match "123"
`, os.Args[0])
}

func meetingServiceDeleteMeetingUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] meeting-service delete-meeting -uid STRING -version STRING -bearer-token STRING -if-match STRING

Delete an existing meeting.
    -uid STRING: The UID of the meeting
    -version STRING: 
    -bearer-token STRING: 
    -if-match STRING: 

Example:
    %[1]s meeting-service delete-meeting --uid "7cad5a8d-19d0-41a4-81a6-043453daf9ee" --version "1" --bearer-token "eyJhbGci..." --if-match "123"
`, os.Args[0])
}

func meetingServiceGetMeetingRegistrantsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] meeting-service get-meeting-registrants -uid STRING -version STRING -bearer-token STRING

Get all registrants for a meeting
    -uid STRING: The UID of the meeting
    -version STRING: 
    -bearer-token STRING: 

Example:
    %[1]s meeting-service get-meeting-registrants --uid "7cad5a8d-19d0-41a4-81a6-043453daf9ee" --version "1" --bearer-token "eyJhbGci..."
`, os.Args[0])
}

func meetingServiceCreateMeetingRegistrantUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] meeting-service create-meeting-registrant -body JSON -meeting-uid STRING -version STRING -bearer-token STRING

Create a new registrant for a meeting
    -body JSON: 
    -meeting-uid STRING: The UID of the meeting
    -version STRING: 
    -bearer-token STRING: 

Example:
    %[1]s meeting-service create-meeting-registrant --body '{
      "avatar_url": "https://example.com/avatar.jpg",
      "email": "user@example.com",
      "first_name": "John",
      "host": false,
      "job_title": "Software Engineer",
      "last_name": "Doe",
      "occurrence_id": "1640995200",
      "org_name": "Magnam dolor mollitia neque ducimus voluptate ullam.",
      "username": "Et consequatur aut aut praesentium qui aliquam."
   }' --meeting-uid "7cad5a8d-19d0-41a4-81a6-043453daf9ee" --version "1" --bearer-token "eyJhbGci..."
`, os.Args[0])
}

func meetingServiceGetMeetingRegistrantUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] meeting-service get-meeting-registrant -meeting-uid STRING -uid STRING -version STRING -bearer-token STRING

Get a specific registrant for a meeting by UID
    -meeting-uid STRING: The UID of the meeting
    -uid STRING: The UID of the registrant
    -version STRING: 
    -bearer-token STRING: 

Example:
    %[1]s meeting-service get-meeting-registrant --meeting-uid "7cad5a8d-19d0-41a4-81a6-043453daf9ee" --uid "7cad5a8d-19d0-41a4-81a6-043453daf9ee" --version "1" --bearer-token "eyJhbGci..."
`, os.Args[0])
}

func meetingServiceUpdateMeetingRegistrantUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] meeting-service update-meeting-registrant -body JSON -meeting-uid STRING -uid STRING -version STRING -bearer-token STRING -if-match STRING

Update an existing registrant for a meeting
    -body JSON: 
    -meeting-uid STRING: The UID of the meeting
    -uid STRING: The UID of the registrant
    -version STRING: 
    -bearer-token STRING: 
    -if-match STRING: 

Example:
    %[1]s meeting-service update-meeting-registrant --body '{
      "avatar_url": "https://example.com/avatar.jpg",
      "email": "user@example.com",
      "first_name": "John",
      "host": false,
      "job_title": "Software Engineer",
      "last_name": "Doe",
      "occurrence_id": "1640995200",
      "org_name": "Temporibus eligendi laudantium et.",
      "username": "Voluptatem ex sapiente laudantium ipsum velit quod."
   }' --meeting-uid "7cad5a8d-19d0-41a4-81a6-043453daf9ee" --uid "7cad5a8d-19d0-41a4-81a6-043453daf9ee" --version "1" --bearer-token "eyJhbGci..." --if-match "123"
`, os.Args[0])
}

func meetingServiceDeleteMeetingRegistrantUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] meeting-service delete-meeting-registrant -meeting-uid STRING -uid STRING -version STRING -bearer-token STRING -if-match STRING

Delete a registrant from a meeting
    -meeting-uid STRING: The UID of the meeting
    -uid STRING: The UID of the registrant
    -version STRING: 
    -bearer-token STRING: 
    -if-match STRING: 

Example:
    %[1]s meeting-service delete-meeting-registrant --meeting-uid "7cad5a8d-19d0-41a4-81a6-043453daf9ee" --uid "7cad5a8d-19d0-41a4-81a6-043453daf9ee" --version "1" --bearer-token "eyJhbGci..." --if-match "123"
`, os.Args[0])
}

func meetingServiceZoomWebhookUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] meeting-service zoom-webhook -body JSON -zoom-signature STRING -zoom-timestamp STRING

Handle Zoom webhook events for meeting lifecycle, participants, and recordings.
    -body JSON: 
    -zoom-signature STRING: 
    -zoom-timestamp STRING: 

Example:
    %[1]s meeting-service zoom-webhook --body '{
      "event": "meeting.started",
      "event_ts": 1609459200000,
      "payload": "Iste sed sunt."
   }' --zoom-signature "Molestiae quam odio ut quae facilis sit." --zoom-timestamp "Voluptate qui ipsa."
`, os.Args[0])
}

func meetingServiceGetPastMeetingsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] meeting-service get-past-meetings -version STRING -bearer-token STRING

Get all past meetings.
    -version STRING: 
    -bearer-token STRING: 

Example:
    %[1]s meeting-service get-past-meetings --version "1" --bearer-token "eyJhbGci..."
`, os.Args[0])
}

func meetingServiceCreatePastMeetingUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] meeting-service create-past-meeting -body JSON -version STRING -bearer-token STRING

Create a new past meeting record. This allows manual addition of past meetings that didn't come from webhooks.
    -body JSON: 
    -version STRING: 
    -bearer-token STRING: 

Example:
    %[1]s meeting-service create-past-meeting --body '{
      "artifact_visibility": "public",
      "committees": [
         {
            "allowed_voting_statuses": [
               "Doloremque et.",
               "Vel voluptates consequatur numquam."
            ],
            "uid": "Aspernatur enim doloremque sunt et et aut."
         },
         {
            "allowed_voting_statuses": [
               "Doloremque et.",
               "Vel voluptates consequatur numquam."
            ],
            "uid": "Aspernatur enim doloremque sunt et et aut."
         },
         {
            "allowed_voting_statuses": [
               "Doloremque et.",
               "Vel voluptates consequatur numquam."
            ],
            "uid": "Aspernatur enim doloremque sunt et et aut."
         },
         {
            "allowed_voting_statuses": [
               "Doloremque et.",
               "Vel voluptates consequatur numquam."
            ],
            "uid": "Aspernatur enim doloremque sunt et et aut."
         }
      ],
      "description": "Voluptatem sapiente.",
      "duration": 430,
      "early_join_time_minutes": 48,
      "meeting_type": "Technical",
      "meeting_uid": "7cad5a8d-19d0-41a4-81a6-043453daf9ee",
      "occurrence_id": "1640995200",
      "platform": "Zoom",
      "platform_meeting_id": "1234567890",
      "project_uid": "7cad5a8d-19d0-41a4-81a6-043453daf9ee",
      "public_link": "http://howeohara.net/adelle",
      "recording_enabled": false,
      "recurrence": {
         "end_date_time": "1972-01-29T09:24:35Z",
         "end_times": 2368020361800503641,
         "monthly_day": 24,
         "monthly_week": -1,
         "monthly_week_day": 6,
         "repeat_interval": 4711238312625320147,
         "type": 1,
         "weekly_days": "1,3,5"
      },
      "restricted": true,
      "scheduled_end_time": "2021-01-01T11:00:00Z",
      "scheduled_start_time": "2021-01-01T10:00:00Z",
      "sessions": [
         {
            "end_time": "2021-01-01T11:00:00Z",
            "start_time": "2021-01-01T10:00:00Z",
            "uid": "7cad5a8d-19d0-41a4-81a6-043453daf9ee"
         },
         {
            "end_time": "2021-01-01T11:00:00Z",
            "start_time": "2021-01-01T10:00:00Z",
            "uid": "7cad5a8d-19d0-41a4-81a6-043453daf9ee"
         }
      ],
      "timezone": "Quis tenetur voluptas in.",
      "title": "Dicta est.",
      "transcript_enabled": false,
      "visibility": "public",
      "youtube_upload_enabled": false,
      "zoom_config": {
         "ai_companion_enabled": true,
         "ai_summary_require_approval": true,
         "meeting_id": "1234567890",
         "passcode": "147258"
      }
   }' --version "1" --bearer-token "eyJhbGci..."
`, os.Args[0])
}

func meetingServiceGetPastMeetingUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] meeting-service get-past-meeting -uid STRING -version STRING -bearer-token STRING

Get a past meeting by ID
    -uid STRING: The unique identifier of the past meeting
    -version STRING: 
    -bearer-token STRING: 

Example:
    %[1]s meeting-service get-past-meeting --uid "7cad5a8d-19d0-41a4-81a6-043453daf9ee" --version "1" --bearer-token "eyJhbGci..."
`, os.Args[0])
}

func meetingServiceDeletePastMeetingUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] meeting-service delete-past-meeting -uid STRING -version STRING -bearer-token STRING -if-match STRING

Delete an existing past meeting.
    -uid STRING: The unique identifier of the past meeting
    -version STRING: 
    -bearer-token STRING: 
    -if-match STRING: 

Example:
    %[1]s meeting-service delete-past-meeting --uid "7cad5a8d-19d0-41a4-81a6-043453daf9ee" --version "1" --bearer-token "eyJhbGci..." --if-match "123"
`, os.Args[0])
}

func meetingServiceGetPastMeetingParticipantsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] meeting-service get-past-meeting-participants -uid STRING -version STRING -bearer-token STRING

Get all participants for a past meeting
    -uid STRING: The unique identifier of the past meeting
    -version STRING: 
    -bearer-token STRING: 

Example:
    %[1]s meeting-service get-past-meeting-participants --uid "7cad5a8d-19d0-41a4-81a6-043453daf9ee" --version "1" --bearer-token "eyJhbGci..."
`, os.Args[0])
}

func meetingServiceCreatePastMeetingParticipantUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] meeting-service create-past-meeting-participant -body JSON -uid STRING -version STRING -bearer-token STRING

Create a new participant for a past meeting
    -body JSON: 
    -uid STRING: The unique identifier of the past meeting
    -version STRING: 
    -bearer-token STRING: 

Example:
    %[1]s meeting-service create-past-meeting-participant --body '{
      "avatar_url": "https://example.com/avatar.jpg",
      "email": "user@example.com",
      "first_name": "John",
      "host": true,
      "is_attended": true,
      "is_invited": true,
      "job_title": "Software Engineer",
      "last_name": "Doe",
      "org_name": "Ipsam fugiat quis qui quam explicabo molestiae.",
      "past_meeting_uid": "7cad5a8d-19d0-41a4-81a6-043453daf9ee",
      "username": "Iste non commodi sint sed est."
   }' --uid "7cad5a8d-19d0-41a4-81a6-043453daf9ee" --version "1" --bearer-token "eyJhbGci..."
`, os.Args[0])
}

func meetingServiceGetPastMeetingParticipantUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] meeting-service get-past-meeting-participant -past-meeting-uid STRING -uid STRING -version STRING -bearer-token STRING

Get a specific participant for a past meeting by UID
    -past-meeting-uid STRING: The unique identifier of the past meeting
    -uid STRING: The UID of the past meeting participant
    -version STRING: 
    -bearer-token STRING: 

Example:
    %[1]s meeting-service get-past-meeting-participant --past-meeting-uid "7cad5a8d-19d0-41a4-81a6-043453daf9ee" --uid "7cad5a8d-19d0-41a4-81a6-043453daf9ee" --version "1" --bearer-token "eyJhbGci..."
`, os.Args[0])
}

func meetingServiceUpdatePastMeetingParticipantUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] meeting-service update-past-meeting-participant -body JSON -past-meeting-uid STRING -uid STRING -version STRING -bearer-token STRING -if-match STRING

Update an existing participant for a past meeting
    -body JSON: 
    -past-meeting-uid STRING: The unique identifier of the past meeting
    -uid STRING: The UID of the past meeting participant
    -version STRING: 
    -bearer-token STRING: 
    -if-match STRING: 

Example:
    %[1]s meeting-service update-past-meeting-participant --body '{
      "avatar_url": "https://example.com/avatar.jpg",
      "email": "user@example.com",
      "first_name": "John",
      "host": true,
      "is_attended": true,
      "is_invited": true,
      "job_title": "Software Engineer",
      "last_name": "Doe",
      "org_name": "Tempora voluptatem inventore.",
      "username": "Officia tempore necessitatibus deleniti natus."
   }' --past-meeting-uid "7cad5a8d-19d0-41a4-81a6-043453daf9ee" --uid "7cad5a8d-19d0-41a4-81a6-043453daf9ee" --version "1" --bearer-token "eyJhbGci..." --if-match "123"
`, os.Args[0])
}

func meetingServiceDeletePastMeetingParticipantUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] meeting-service delete-past-meeting-participant -past-meeting-uid STRING -uid STRING -version STRING -bearer-token STRING -if-match STRING

Delete a participant from a past meeting
    -past-meeting-uid STRING: The unique identifier of the past meeting
    -uid STRING: The UID of the past meeting participant
    -version STRING: 
    -bearer-token STRING: 
    -if-match STRING: 

Example:
    %[1]s meeting-service delete-past-meeting-participant --past-meeting-uid "7cad5a8d-19d0-41a4-81a6-043453daf9ee" --uid "7cad5a8d-19d0-41a4-81a6-043453daf9ee" --version "1" --bearer-token "eyJhbGci..." --if-match "123"
`, os.Args[0])
}

func meetingServiceReadyzUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] meeting-service readyz

Check if the service is able to take inbound requests.

Example:
    %[1]s meeting-service readyz
`, os.Args[0])
}

func meetingServiceLivezUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] meeting-service livez

Check if the service is alive.

Example:
    %[1]s meeting-service livez
`, os.Args[0])
}
