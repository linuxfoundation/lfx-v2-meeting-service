// Code generated by goa v3.21.1, DO NOT EDIT.
//
// Meeting Service HTTP server
//
// Command:
// $ goa gen github.com/linuxfoundation/lfx-v2-meeting-service/design

package server

import (
	"context"
	"net/http"
	"path"

	meetingservice "github.com/linuxfoundation/lfx-v2-meeting-service/gen/meeting_service"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the Meeting Service service endpoint HTTP handlers.
type Server struct {
	Mounts                  []*MountPoint
	GetMeetings             http.Handler
	CreateMeeting           http.Handler
	GetMeeting              http.Handler
	UpdateMeeting           http.Handler
	DeleteMeeting           http.Handler
	GetMeetingRegistrants   http.Handler
	CreateMeetingRegistrant http.Handler
	GetMeetingRegistrant    http.Handler
	UpdateMeetingRegistrant http.Handler
	DeleteMeetingRegistrant http.Handler
	Readyz                  http.Handler
	Livez                   http.Handler
	GenHTTPOpenapi3JSON     http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the Meeting Service service endpoints
// using the provided encoder and decoder. The handlers are mounted on the
// given mux using the HTTP verb and path defined in the design. errhandler is
// called whenever a response fails to be encoded. formatter is used to format
// errors returned by the service methods prior to encoding. Both errhandler
// and formatter are optional and can be nil.
func New(
	e *meetingservice.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
	fileSystemGenHTTPOpenapi3JSON http.FileSystem,
) *Server {
	if fileSystemGenHTTPOpenapi3JSON == nil {
		fileSystemGenHTTPOpenapi3JSON = http.Dir(".")
	}
	fileSystemGenHTTPOpenapi3JSON = appendPrefix(fileSystemGenHTTPOpenapi3JSON, "/gen/http")
	return &Server{
		Mounts: []*MountPoint{
			{"GetMeetings", "GET", "/meetings"},
			{"CreateMeeting", "POST", "/meetings"},
			{"GetMeeting", "GET", "/meetings/{uid}"},
			{"UpdateMeeting", "PUT", "/meetings/{uid}"},
			{"DeleteMeeting", "DELETE", "/meetings/{uid}"},
			{"GetMeetingRegistrants", "GET", "/meetings/{uid}/registrants"},
			{"CreateMeetingRegistrant", "POST", "/meetings/{uid}/registrants"},
			{"GetMeetingRegistrant", "GET", "/meetings/{meeting_uid}/registrants/{uid}"},
			{"UpdateMeetingRegistrant", "PUT", "/meetings/{meeting_uid}/registrants/{uid}"},
			{"DeleteMeetingRegistrant", "DELETE", "/meetings/{meeting_uid}/registrants/{uid}"},
			{"Readyz", "GET", "/readyz"},
			{"Livez", "GET", "/livez"},
			{"Serve gen/http/openapi3.json", "GET", "/openapi.json"},
		},
		GetMeetings:             NewGetMeetingsHandler(e.GetMeetings, mux, decoder, encoder, errhandler, formatter),
		CreateMeeting:           NewCreateMeetingHandler(e.CreateMeeting, mux, decoder, encoder, errhandler, formatter),
		GetMeeting:              NewGetMeetingHandler(e.GetMeeting, mux, decoder, encoder, errhandler, formatter),
		UpdateMeeting:           NewUpdateMeetingHandler(e.UpdateMeeting, mux, decoder, encoder, errhandler, formatter),
		DeleteMeeting:           NewDeleteMeetingHandler(e.DeleteMeeting, mux, decoder, encoder, errhandler, formatter),
		GetMeetingRegistrants:   NewGetMeetingRegistrantsHandler(e.GetMeetingRegistrants, mux, decoder, encoder, errhandler, formatter),
		CreateMeetingRegistrant: NewCreateMeetingRegistrantHandler(e.CreateMeetingRegistrant, mux, decoder, encoder, errhandler, formatter),
		GetMeetingRegistrant:    NewGetMeetingRegistrantHandler(e.GetMeetingRegistrant, mux, decoder, encoder, errhandler, formatter),
		UpdateMeetingRegistrant: NewUpdateMeetingRegistrantHandler(e.UpdateMeetingRegistrant, mux, decoder, encoder, errhandler, formatter),
		DeleteMeetingRegistrant: NewDeleteMeetingRegistrantHandler(e.DeleteMeetingRegistrant, mux, decoder, encoder, errhandler, formatter),
		Readyz:                  NewReadyzHandler(e.Readyz, mux, decoder, encoder, errhandler, formatter),
		Livez:                   NewLivezHandler(e.Livez, mux, decoder, encoder, errhandler, formatter),
		GenHTTPOpenapi3JSON:     http.FileServer(fileSystemGenHTTPOpenapi3JSON),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "Meeting Service" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.GetMeetings = m(s.GetMeetings)
	s.CreateMeeting = m(s.CreateMeeting)
	s.GetMeeting = m(s.GetMeeting)
	s.UpdateMeeting = m(s.UpdateMeeting)
	s.DeleteMeeting = m(s.DeleteMeeting)
	s.GetMeetingRegistrants = m(s.GetMeetingRegistrants)
	s.CreateMeetingRegistrant = m(s.CreateMeetingRegistrant)
	s.GetMeetingRegistrant = m(s.GetMeetingRegistrant)
	s.UpdateMeetingRegistrant = m(s.UpdateMeetingRegistrant)
	s.DeleteMeetingRegistrant = m(s.DeleteMeetingRegistrant)
	s.Readyz = m(s.Readyz)
	s.Livez = m(s.Livez)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return meetingservice.MethodNames[:] }

// Mount configures the mux to serve the Meeting Service endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountGetMeetingsHandler(mux, h.GetMeetings)
	MountCreateMeetingHandler(mux, h.CreateMeeting)
	MountGetMeetingHandler(mux, h.GetMeeting)
	MountUpdateMeetingHandler(mux, h.UpdateMeeting)
	MountDeleteMeetingHandler(mux, h.DeleteMeeting)
	MountGetMeetingRegistrantsHandler(mux, h.GetMeetingRegistrants)
	MountCreateMeetingRegistrantHandler(mux, h.CreateMeetingRegistrant)
	MountGetMeetingRegistrantHandler(mux, h.GetMeetingRegistrant)
	MountUpdateMeetingRegistrantHandler(mux, h.UpdateMeetingRegistrant)
	MountDeleteMeetingRegistrantHandler(mux, h.DeleteMeetingRegistrant)
	MountReadyzHandler(mux, h.Readyz)
	MountLivezHandler(mux, h.Livez)
	MountGenHTTPOpenapi3JSON(mux, h.GenHTTPOpenapi3JSON)
}

// Mount configures the mux to serve the Meeting Service endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountGetMeetingsHandler configures the mux to serve the "Meeting Service"
// service "get-meetings" endpoint.
func MountGetMeetingsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/meetings", f)
}

// NewGetMeetingsHandler creates a HTTP handler which loads the HTTP request
// and calls the "Meeting Service" service "get-meetings" endpoint.
func NewGetMeetingsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetMeetingsRequest(mux, decoder)
		encodeResponse = EncodeGetMeetingsResponse(encoder)
		encodeError    = EncodeGetMeetingsError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "get-meetings")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Meeting Service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCreateMeetingHandler configures the mux to serve the "Meeting Service"
// service "create-meeting" endpoint.
func MountCreateMeetingHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/meetings", f)
}

// NewCreateMeetingHandler creates a HTTP handler which loads the HTTP request
// and calls the "Meeting Service" service "create-meeting" endpoint.
func NewCreateMeetingHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateMeetingRequest(mux, decoder)
		encodeResponse = EncodeCreateMeetingResponse(encoder)
		encodeError    = EncodeCreateMeetingError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "create-meeting")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Meeting Service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetMeetingHandler configures the mux to serve the "Meeting Service"
// service "get-meeting" endpoint.
func MountGetMeetingHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/meetings/{uid}", f)
}

// NewGetMeetingHandler creates a HTTP handler which loads the HTTP request and
// calls the "Meeting Service" service "get-meeting" endpoint.
func NewGetMeetingHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetMeetingRequest(mux, decoder)
		encodeResponse = EncodeGetMeetingResponse(encoder)
		encodeError    = EncodeGetMeetingError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "get-meeting")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Meeting Service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpdateMeetingHandler configures the mux to serve the "Meeting Service"
// service "update-meeting" endpoint.
func MountUpdateMeetingHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/meetings/{uid}", f)
}

// NewUpdateMeetingHandler creates a HTTP handler which loads the HTTP request
// and calls the "Meeting Service" service "update-meeting" endpoint.
func NewUpdateMeetingHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateMeetingRequest(mux, decoder)
		encodeResponse = EncodeUpdateMeetingResponse(encoder)
		encodeError    = EncodeUpdateMeetingError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "update-meeting")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Meeting Service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteMeetingHandler configures the mux to serve the "Meeting Service"
// service "delete-meeting" endpoint.
func MountDeleteMeetingHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/meetings/{uid}", f)
}

// NewDeleteMeetingHandler creates a HTTP handler which loads the HTTP request
// and calls the "Meeting Service" service "delete-meeting" endpoint.
func NewDeleteMeetingHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteMeetingRequest(mux, decoder)
		encodeResponse = EncodeDeleteMeetingResponse(encoder)
		encodeError    = EncodeDeleteMeetingError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "delete-meeting")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Meeting Service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetMeetingRegistrantsHandler configures the mux to serve the "Meeting
// Service" service "get-meeting-registrants" endpoint.
func MountGetMeetingRegistrantsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/meetings/{uid}/registrants", f)
}

// NewGetMeetingRegistrantsHandler creates a HTTP handler which loads the HTTP
// request and calls the "Meeting Service" service "get-meeting-registrants"
// endpoint.
func NewGetMeetingRegistrantsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetMeetingRegistrantsRequest(mux, decoder)
		encodeResponse = EncodeGetMeetingRegistrantsResponse(encoder)
		encodeError    = EncodeGetMeetingRegistrantsError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "get-meeting-registrants")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Meeting Service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCreateMeetingRegistrantHandler configures the mux to serve the "Meeting
// Service" service "create-meeting-registrant" endpoint.
func MountCreateMeetingRegistrantHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/meetings/{uid}/registrants", f)
}

// NewCreateMeetingRegistrantHandler creates a HTTP handler which loads the
// HTTP request and calls the "Meeting Service" service
// "create-meeting-registrant" endpoint.
func NewCreateMeetingRegistrantHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateMeetingRegistrantRequest(mux, decoder)
		encodeResponse = EncodeCreateMeetingRegistrantResponse(encoder)
		encodeError    = EncodeCreateMeetingRegistrantError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "create-meeting-registrant")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Meeting Service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetMeetingRegistrantHandler configures the mux to serve the "Meeting
// Service" service "get-meeting-registrant" endpoint.
func MountGetMeetingRegistrantHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/meetings/{meeting_uid}/registrants/{uid}", f)
}

// NewGetMeetingRegistrantHandler creates a HTTP handler which loads the HTTP
// request and calls the "Meeting Service" service "get-meeting-registrant"
// endpoint.
func NewGetMeetingRegistrantHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetMeetingRegistrantRequest(mux, decoder)
		encodeResponse = EncodeGetMeetingRegistrantResponse(encoder)
		encodeError    = EncodeGetMeetingRegistrantError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "get-meeting-registrant")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Meeting Service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpdateMeetingRegistrantHandler configures the mux to serve the "Meeting
// Service" service "update-meeting-registrant" endpoint.
func MountUpdateMeetingRegistrantHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/meetings/{meeting_uid}/registrants/{uid}", f)
}

// NewUpdateMeetingRegistrantHandler creates a HTTP handler which loads the
// HTTP request and calls the "Meeting Service" service
// "update-meeting-registrant" endpoint.
func NewUpdateMeetingRegistrantHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateMeetingRegistrantRequest(mux, decoder)
		encodeResponse = EncodeUpdateMeetingRegistrantResponse(encoder)
		encodeError    = EncodeUpdateMeetingRegistrantError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "update-meeting-registrant")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Meeting Service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteMeetingRegistrantHandler configures the mux to serve the "Meeting
// Service" service "delete-meeting-registrant" endpoint.
func MountDeleteMeetingRegistrantHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/meetings/{meeting_uid}/registrants/{uid}", f)
}

// NewDeleteMeetingRegistrantHandler creates a HTTP handler which loads the
// HTTP request and calls the "Meeting Service" service
// "delete-meeting-registrant" endpoint.
func NewDeleteMeetingRegistrantHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteMeetingRegistrantRequest(mux, decoder)
		encodeResponse = EncodeDeleteMeetingRegistrantResponse(encoder)
		encodeError    = EncodeDeleteMeetingRegistrantError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "delete-meeting-registrant")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Meeting Service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountReadyzHandler configures the mux to serve the "Meeting Service" service
// "readyz" endpoint.
func MountReadyzHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/readyz", f)
}

// NewReadyzHandler creates a HTTP handler which loads the HTTP request and
// calls the "Meeting Service" service "readyz" endpoint.
func NewReadyzHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeReadyzResponse(encoder)
		encodeError    = EncodeReadyzError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "readyz")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Meeting Service")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountLivezHandler configures the mux to serve the "Meeting Service" service
// "livez" endpoint.
func MountLivezHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/livez", f)
}

// NewLivezHandler creates a HTTP handler which loads the HTTP request and
// calls the "Meeting Service" service "livez" endpoint.
func NewLivezHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeLivezResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "livez")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Meeting Service")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// appendFS is a custom implementation of fs.FS that appends a specified prefix
// to the file paths before delegating the Open call to the underlying fs.FS.
type appendFS struct {
	prefix string
	fs     http.FileSystem
}

// Open opens the named file, appending the prefix to the file path before
// passing it to the underlying fs.FS.
func (s appendFS) Open(name string) (http.File, error) {
	switch name {
	case "/openapi.json":
		name = "/openapi3.json"
	}
	return s.fs.Open(path.Join(s.prefix, name))
}

// appendPrefix returns a new fs.FS that appends the specified prefix to file paths
// before delegating to the provided embed.FS.
func appendPrefix(fsys http.FileSystem, prefix string) http.FileSystem {
	return appendFS{prefix: prefix, fs: fsys}
}

// MountGenHTTPOpenapi3JSON configures the mux to serve GET request made to
// "/openapi.json".
func MountGenHTTPOpenapi3JSON(mux goahttp.Muxer, h http.Handler) {
	mux.Handle("GET", "/openapi.json", h.ServeHTTP)
}
