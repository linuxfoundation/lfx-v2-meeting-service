// Code generated by goa v3.21.1, DO NOT EDIT.
//
// Meeting Service HTTP server
//
// Command:
// $ goa gen github.com/linuxfoundation/lfx-v2-meeting-service/design

package server

import (
	"context"
	"net/http"
	"path"

	meetingservice "github.com/linuxfoundation/lfx-v2-meeting-service/gen/meeting_service"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the Meeting Service service endpoint HTTP handlers.
type Server struct {
	Mounts                       []*MountPoint
	GetMeetings                  http.Handler
	CreateMeeting                http.Handler
	GetMeetingBase               http.Handler
	GetMeetingSettings           http.Handler
	GetMeetingJoinURL            http.Handler
	UpdateMeetingBase            http.Handler
	UpdateMeetingSettings        http.Handler
	DeleteMeeting                http.Handler
	GetMeetingRegistrants        http.Handler
	CreateMeetingRegistrant      http.Handler
	GetMeetingRegistrant         http.Handler
	UpdateMeetingRegistrant      http.Handler
	DeleteMeetingRegistrant      http.Handler
	ZoomWebhook                  http.Handler
	GetPastMeetings              http.Handler
	CreatePastMeeting            http.Handler
	GetPastMeeting               http.Handler
	DeletePastMeeting            http.Handler
	GetPastMeetingParticipants   http.Handler
	CreatePastMeetingParticipant http.Handler
	GetPastMeetingParticipant    http.Handler
	UpdatePastMeetingParticipant http.Handler
	DeletePastMeetingParticipant http.Handler
	GetPastMeetingSummaries      http.Handler
	GetPastMeetingSummary        http.Handler
	Readyz                       http.Handler
	Livez                        http.Handler
	GenHTTPOpenapiJSON           http.Handler
	GenHTTPOpenapiYaml           http.Handler
	GenHTTPOpenapi3JSON          http.Handler
	GenHTTPOpenapi3Yaml          http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the Meeting Service service endpoints
// using the provided encoder and decoder. The handlers are mounted on the
// given mux using the HTTP verb and path defined in the design. errhandler is
// called whenever a response fails to be encoded. formatter is used to format
// errors returned by the service methods prior to encoding. Both errhandler
// and formatter are optional and can be nil.
func New(
	e *meetingservice.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
	fileSystemGenHTTPOpenapiJSON http.FileSystem,
	fileSystemGenHTTPOpenapiYaml http.FileSystem,
	fileSystemGenHTTPOpenapi3JSON http.FileSystem,
	fileSystemGenHTTPOpenapi3Yaml http.FileSystem,
) *Server {
	if fileSystemGenHTTPOpenapiJSON == nil {
		fileSystemGenHTTPOpenapiJSON = http.Dir(".")
	}
	fileSystemGenHTTPOpenapiJSON = appendPrefix(fileSystemGenHTTPOpenapiJSON, "/gen/http")
	if fileSystemGenHTTPOpenapiYaml == nil {
		fileSystemGenHTTPOpenapiYaml = http.Dir(".")
	}
	fileSystemGenHTTPOpenapiYaml = appendPrefix(fileSystemGenHTTPOpenapiYaml, "/gen/http")
	if fileSystemGenHTTPOpenapi3JSON == nil {
		fileSystemGenHTTPOpenapi3JSON = http.Dir(".")
	}
	fileSystemGenHTTPOpenapi3JSON = appendPrefix(fileSystemGenHTTPOpenapi3JSON, "/gen/http")
	if fileSystemGenHTTPOpenapi3Yaml == nil {
		fileSystemGenHTTPOpenapi3Yaml = http.Dir(".")
	}
	fileSystemGenHTTPOpenapi3Yaml = appendPrefix(fileSystemGenHTTPOpenapi3Yaml, "/gen/http")
	return &Server{
		Mounts: []*MountPoint{
			{"GetMeetings", "GET", "/meetings"},
			{"CreateMeeting", "POST", "/meetings"},
			{"GetMeetingBase", "GET", "/meetings/{uid}"},
			{"GetMeetingSettings", "GET", "/meetings/{uid}/settings"},
			{"GetMeetingJoinURL", "GET", "/meetings/{uid}/join_url"},
			{"UpdateMeetingBase", "PUT", "/meetings/{uid}"},
			{"UpdateMeetingSettings", "PUT", "/meetings/{uid}/settings"},
			{"DeleteMeeting", "DELETE", "/meetings/{uid}"},
			{"GetMeetingRegistrants", "GET", "/meetings/{uid}/registrants"},
			{"CreateMeetingRegistrant", "POST", "/meetings/{meeting_uid}/registrants"},
			{"GetMeetingRegistrant", "GET", "/meetings/{meeting_uid}/registrants/{uid}"},
			{"UpdateMeetingRegistrant", "PUT", "/meetings/{meeting_uid}/registrants/{uid}"},
			{"DeleteMeetingRegistrant", "DELETE", "/meetings/{meeting_uid}/registrants/{uid}"},
			{"ZoomWebhook", "POST", "/webhooks/zoom"},
			{"GetPastMeetings", "GET", "/past_meetings"},
			{"CreatePastMeeting", "POST", "/past_meetings"},
			{"GetPastMeeting", "GET", "/past_meetings/{uid}"},
			{"DeletePastMeeting", "DELETE", "/past_meetings/{uid}"},
			{"GetPastMeetingParticipants", "GET", "/past_meetings/{uid}/participants"},
			{"CreatePastMeetingParticipant", "POST", "/past_meetings/{uid}/participants"},
			{"GetPastMeetingParticipant", "GET", "/past_meetings/{past_meeting_uid}/participants/{uid}"},
			{"UpdatePastMeetingParticipant", "PUT", "/past_meetings/{past_meeting_uid}/participants/{uid}"},
			{"DeletePastMeetingParticipant", "DELETE", "/past_meetings/{past_meeting_uid}/participants/{uid}"},
			{"GetPastMeetingSummaries", "GET", "/past_meetings/{uid}/summaries"},
			{"GetPastMeetingSummary", "GET", "/past_meetings/{past_meeting_uid}/summaries/{summary_uid}"},
			{"Readyz", "GET", "/readyz"},
			{"Livez", "GET", "/livez"},
			{"Serve gen/http/openapi.json", "GET", "/_meetings/openapi.json"},
			{"Serve gen/http/openapi.yaml", "GET", "/_meetings/openapi.yaml"},
			{"Serve gen/http/openapi3.json", "GET", "/_meetings/openapi3.json"},
			{"Serve gen/http/openapi3.yaml", "GET", "/_meetings/openapi3.yaml"},
		},
		GetMeetings:                  NewGetMeetingsHandler(e.GetMeetings, mux, decoder, encoder, errhandler, formatter),
		CreateMeeting:                NewCreateMeetingHandler(e.CreateMeeting, mux, decoder, encoder, errhandler, formatter),
		GetMeetingBase:               NewGetMeetingBaseHandler(e.GetMeetingBase, mux, decoder, encoder, errhandler, formatter),
		GetMeetingSettings:           NewGetMeetingSettingsHandler(e.GetMeetingSettings, mux, decoder, encoder, errhandler, formatter),
		GetMeetingJoinURL:            NewGetMeetingJoinURLHandler(e.GetMeetingJoinURL, mux, decoder, encoder, errhandler, formatter),
		UpdateMeetingBase:            NewUpdateMeetingBaseHandler(e.UpdateMeetingBase, mux, decoder, encoder, errhandler, formatter),
		UpdateMeetingSettings:        NewUpdateMeetingSettingsHandler(e.UpdateMeetingSettings, mux, decoder, encoder, errhandler, formatter),
		DeleteMeeting:                NewDeleteMeetingHandler(e.DeleteMeeting, mux, decoder, encoder, errhandler, formatter),
		GetMeetingRegistrants:        NewGetMeetingRegistrantsHandler(e.GetMeetingRegistrants, mux, decoder, encoder, errhandler, formatter),
		CreateMeetingRegistrant:      NewCreateMeetingRegistrantHandler(e.CreateMeetingRegistrant, mux, decoder, encoder, errhandler, formatter),
		GetMeetingRegistrant:         NewGetMeetingRegistrantHandler(e.GetMeetingRegistrant, mux, decoder, encoder, errhandler, formatter),
		UpdateMeetingRegistrant:      NewUpdateMeetingRegistrantHandler(e.UpdateMeetingRegistrant, mux, decoder, encoder, errhandler, formatter),
		DeleteMeetingRegistrant:      NewDeleteMeetingRegistrantHandler(e.DeleteMeetingRegistrant, mux, decoder, encoder, errhandler, formatter),
		ZoomWebhook:                  NewZoomWebhookHandler(e.ZoomWebhook, mux, decoder, encoder, errhandler, formatter),
		GetPastMeetings:              NewGetPastMeetingsHandler(e.GetPastMeetings, mux, decoder, encoder, errhandler, formatter),
		CreatePastMeeting:            NewCreatePastMeetingHandler(e.CreatePastMeeting, mux, decoder, encoder, errhandler, formatter),
		GetPastMeeting:               NewGetPastMeetingHandler(e.GetPastMeeting, mux, decoder, encoder, errhandler, formatter),
		DeletePastMeeting:            NewDeletePastMeetingHandler(e.DeletePastMeeting, mux, decoder, encoder, errhandler, formatter),
		GetPastMeetingParticipants:   NewGetPastMeetingParticipantsHandler(e.GetPastMeetingParticipants, mux, decoder, encoder, errhandler, formatter),
		CreatePastMeetingParticipant: NewCreatePastMeetingParticipantHandler(e.CreatePastMeetingParticipant, mux, decoder, encoder, errhandler, formatter),
		GetPastMeetingParticipant:    NewGetPastMeetingParticipantHandler(e.GetPastMeetingParticipant, mux, decoder, encoder, errhandler, formatter),
		UpdatePastMeetingParticipant: NewUpdatePastMeetingParticipantHandler(e.UpdatePastMeetingParticipant, mux, decoder, encoder, errhandler, formatter),
		DeletePastMeetingParticipant: NewDeletePastMeetingParticipantHandler(e.DeletePastMeetingParticipant, mux, decoder, encoder, errhandler, formatter),
		GetPastMeetingSummaries:      NewGetPastMeetingSummariesHandler(e.GetPastMeetingSummaries, mux, decoder, encoder, errhandler, formatter),
		GetPastMeetingSummary:        NewGetPastMeetingSummaryHandler(e.GetPastMeetingSummary, mux, decoder, encoder, errhandler, formatter),
		Readyz:                       NewReadyzHandler(e.Readyz, mux, decoder, encoder, errhandler, formatter),
		Livez:                        NewLivezHandler(e.Livez, mux, decoder, encoder, errhandler, formatter),
		GenHTTPOpenapiJSON:           http.FileServer(fileSystemGenHTTPOpenapiJSON),
		GenHTTPOpenapiYaml:           http.FileServer(fileSystemGenHTTPOpenapiYaml),
		GenHTTPOpenapi3JSON:          http.FileServer(fileSystemGenHTTPOpenapi3JSON),
		GenHTTPOpenapi3Yaml:          http.FileServer(fileSystemGenHTTPOpenapi3Yaml),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "Meeting Service" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.GetMeetings = m(s.GetMeetings)
	s.CreateMeeting = m(s.CreateMeeting)
	s.GetMeetingBase = m(s.GetMeetingBase)
	s.GetMeetingSettings = m(s.GetMeetingSettings)
	s.GetMeetingJoinURL = m(s.GetMeetingJoinURL)
	s.UpdateMeetingBase = m(s.UpdateMeetingBase)
	s.UpdateMeetingSettings = m(s.UpdateMeetingSettings)
	s.DeleteMeeting = m(s.DeleteMeeting)
	s.GetMeetingRegistrants = m(s.GetMeetingRegistrants)
	s.CreateMeetingRegistrant = m(s.CreateMeetingRegistrant)
	s.GetMeetingRegistrant = m(s.GetMeetingRegistrant)
	s.UpdateMeetingRegistrant = m(s.UpdateMeetingRegistrant)
	s.DeleteMeetingRegistrant = m(s.DeleteMeetingRegistrant)
	s.ZoomWebhook = m(s.ZoomWebhook)
	s.GetPastMeetings = m(s.GetPastMeetings)
	s.CreatePastMeeting = m(s.CreatePastMeeting)
	s.GetPastMeeting = m(s.GetPastMeeting)
	s.DeletePastMeeting = m(s.DeletePastMeeting)
	s.GetPastMeetingParticipants = m(s.GetPastMeetingParticipants)
	s.CreatePastMeetingParticipant = m(s.CreatePastMeetingParticipant)
	s.GetPastMeetingParticipant = m(s.GetPastMeetingParticipant)
	s.UpdatePastMeetingParticipant = m(s.UpdatePastMeetingParticipant)
	s.DeletePastMeetingParticipant = m(s.DeletePastMeetingParticipant)
	s.GetPastMeetingSummaries = m(s.GetPastMeetingSummaries)
	s.GetPastMeetingSummary = m(s.GetPastMeetingSummary)
	s.Readyz = m(s.Readyz)
	s.Livez = m(s.Livez)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return meetingservice.MethodNames[:] }

// Mount configures the mux to serve the Meeting Service endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountGetMeetingsHandler(mux, h.GetMeetings)
	MountCreateMeetingHandler(mux, h.CreateMeeting)
	MountGetMeetingBaseHandler(mux, h.GetMeetingBase)
	MountGetMeetingSettingsHandler(mux, h.GetMeetingSettings)
	MountGetMeetingJoinURLHandler(mux, h.GetMeetingJoinURL)
	MountUpdateMeetingBaseHandler(mux, h.UpdateMeetingBase)
	MountUpdateMeetingSettingsHandler(mux, h.UpdateMeetingSettings)
	MountDeleteMeetingHandler(mux, h.DeleteMeeting)
	MountGetMeetingRegistrantsHandler(mux, h.GetMeetingRegistrants)
	MountCreateMeetingRegistrantHandler(mux, h.CreateMeetingRegistrant)
	MountGetMeetingRegistrantHandler(mux, h.GetMeetingRegistrant)
	MountUpdateMeetingRegistrantHandler(mux, h.UpdateMeetingRegistrant)
	MountDeleteMeetingRegistrantHandler(mux, h.DeleteMeetingRegistrant)
	MountZoomWebhookHandler(mux, h.ZoomWebhook)
	MountGetPastMeetingsHandler(mux, h.GetPastMeetings)
	MountCreatePastMeetingHandler(mux, h.CreatePastMeeting)
	MountGetPastMeetingHandler(mux, h.GetPastMeeting)
	MountDeletePastMeetingHandler(mux, h.DeletePastMeeting)
	MountGetPastMeetingParticipantsHandler(mux, h.GetPastMeetingParticipants)
	MountCreatePastMeetingParticipantHandler(mux, h.CreatePastMeetingParticipant)
	MountGetPastMeetingParticipantHandler(mux, h.GetPastMeetingParticipant)
	MountUpdatePastMeetingParticipantHandler(mux, h.UpdatePastMeetingParticipant)
	MountDeletePastMeetingParticipantHandler(mux, h.DeletePastMeetingParticipant)
	MountGetPastMeetingSummariesHandler(mux, h.GetPastMeetingSummaries)
	MountGetPastMeetingSummaryHandler(mux, h.GetPastMeetingSummary)
	MountReadyzHandler(mux, h.Readyz)
	MountLivezHandler(mux, h.Livez)
	MountGenHTTPOpenapiJSON(mux, http.StripPrefix("/_meetings", h.GenHTTPOpenapiJSON))
	MountGenHTTPOpenapiYaml(mux, http.StripPrefix("/_meetings", h.GenHTTPOpenapiYaml))
	MountGenHTTPOpenapi3JSON(mux, http.StripPrefix("/_meetings", h.GenHTTPOpenapi3JSON))
	MountGenHTTPOpenapi3Yaml(mux, http.StripPrefix("/_meetings", h.GenHTTPOpenapi3Yaml))
}

// Mount configures the mux to serve the Meeting Service endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountGetMeetingsHandler configures the mux to serve the "Meeting Service"
// service "get-meetings" endpoint.
func MountGetMeetingsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/meetings", f)
}

// NewGetMeetingsHandler creates a HTTP handler which loads the HTTP request
// and calls the "Meeting Service" service "get-meetings" endpoint.
func NewGetMeetingsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetMeetingsRequest(mux, decoder)
		encodeResponse = EncodeGetMeetingsResponse(encoder)
		encodeError    = EncodeGetMeetingsError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "get-meetings")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Meeting Service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCreateMeetingHandler configures the mux to serve the "Meeting Service"
// service "create-meeting" endpoint.
func MountCreateMeetingHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/meetings", f)
}

// NewCreateMeetingHandler creates a HTTP handler which loads the HTTP request
// and calls the "Meeting Service" service "create-meeting" endpoint.
func NewCreateMeetingHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateMeetingRequest(mux, decoder)
		encodeResponse = EncodeCreateMeetingResponse(encoder)
		encodeError    = EncodeCreateMeetingError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "create-meeting")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Meeting Service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetMeetingBaseHandler configures the mux to serve the "Meeting Service"
// service "get-meeting-base" endpoint.
func MountGetMeetingBaseHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/meetings/{uid}", f)
}

// NewGetMeetingBaseHandler creates a HTTP handler which loads the HTTP request
// and calls the "Meeting Service" service "get-meeting-base" endpoint.
func NewGetMeetingBaseHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetMeetingBaseRequest(mux, decoder)
		encodeResponse = EncodeGetMeetingBaseResponse(encoder)
		encodeError    = EncodeGetMeetingBaseError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "get-meeting-base")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Meeting Service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetMeetingSettingsHandler configures the mux to serve the "Meeting
// Service" service "get-meeting-settings" endpoint.
func MountGetMeetingSettingsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/meetings/{uid}/settings", f)
}

// NewGetMeetingSettingsHandler creates a HTTP handler which loads the HTTP
// request and calls the "Meeting Service" service "get-meeting-settings"
// endpoint.
func NewGetMeetingSettingsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetMeetingSettingsRequest(mux, decoder)
		encodeResponse = EncodeGetMeetingSettingsResponse(encoder)
		encodeError    = EncodeGetMeetingSettingsError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "get-meeting-settings")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Meeting Service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetMeetingJoinURLHandler configures the mux to serve the "Meeting
// Service" service "get-meeting-join-url" endpoint.
func MountGetMeetingJoinURLHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/meetings/{uid}/join_url", f)
}

// NewGetMeetingJoinURLHandler creates a HTTP handler which loads the HTTP
// request and calls the "Meeting Service" service "get-meeting-join-url"
// endpoint.
func NewGetMeetingJoinURLHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetMeetingJoinURLRequest(mux, decoder)
		encodeResponse = EncodeGetMeetingJoinURLResponse(encoder)
		encodeError    = EncodeGetMeetingJoinURLError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "get-meeting-join-url")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Meeting Service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpdateMeetingBaseHandler configures the mux to serve the "Meeting
// Service" service "update-meeting-base" endpoint.
func MountUpdateMeetingBaseHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/meetings/{uid}", f)
}

// NewUpdateMeetingBaseHandler creates a HTTP handler which loads the HTTP
// request and calls the "Meeting Service" service "update-meeting-base"
// endpoint.
func NewUpdateMeetingBaseHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateMeetingBaseRequest(mux, decoder)
		encodeResponse = EncodeUpdateMeetingBaseResponse(encoder)
		encodeError    = EncodeUpdateMeetingBaseError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "update-meeting-base")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Meeting Service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpdateMeetingSettingsHandler configures the mux to serve the "Meeting
// Service" service "update-meeting-settings" endpoint.
func MountUpdateMeetingSettingsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/meetings/{uid}/settings", f)
}

// NewUpdateMeetingSettingsHandler creates a HTTP handler which loads the HTTP
// request and calls the "Meeting Service" service "update-meeting-settings"
// endpoint.
func NewUpdateMeetingSettingsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateMeetingSettingsRequest(mux, decoder)
		encodeResponse = EncodeUpdateMeetingSettingsResponse(encoder)
		encodeError    = EncodeUpdateMeetingSettingsError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "update-meeting-settings")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Meeting Service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteMeetingHandler configures the mux to serve the "Meeting Service"
// service "delete-meeting" endpoint.
func MountDeleteMeetingHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/meetings/{uid}", f)
}

// NewDeleteMeetingHandler creates a HTTP handler which loads the HTTP request
// and calls the "Meeting Service" service "delete-meeting" endpoint.
func NewDeleteMeetingHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteMeetingRequest(mux, decoder)
		encodeResponse = EncodeDeleteMeetingResponse(encoder)
		encodeError    = EncodeDeleteMeetingError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "delete-meeting")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Meeting Service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetMeetingRegistrantsHandler configures the mux to serve the "Meeting
// Service" service "get-meeting-registrants" endpoint.
func MountGetMeetingRegistrantsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/meetings/{uid}/registrants", f)
}

// NewGetMeetingRegistrantsHandler creates a HTTP handler which loads the HTTP
// request and calls the "Meeting Service" service "get-meeting-registrants"
// endpoint.
func NewGetMeetingRegistrantsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetMeetingRegistrantsRequest(mux, decoder)
		encodeResponse = EncodeGetMeetingRegistrantsResponse(encoder)
		encodeError    = EncodeGetMeetingRegistrantsError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "get-meeting-registrants")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Meeting Service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCreateMeetingRegistrantHandler configures the mux to serve the "Meeting
// Service" service "create-meeting-registrant" endpoint.
func MountCreateMeetingRegistrantHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/meetings/{meeting_uid}/registrants", f)
}

// NewCreateMeetingRegistrantHandler creates a HTTP handler which loads the
// HTTP request and calls the "Meeting Service" service
// "create-meeting-registrant" endpoint.
func NewCreateMeetingRegistrantHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateMeetingRegistrantRequest(mux, decoder)
		encodeResponse = EncodeCreateMeetingRegistrantResponse(encoder)
		encodeError    = EncodeCreateMeetingRegistrantError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "create-meeting-registrant")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Meeting Service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetMeetingRegistrantHandler configures the mux to serve the "Meeting
// Service" service "get-meeting-registrant" endpoint.
func MountGetMeetingRegistrantHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/meetings/{meeting_uid}/registrants/{uid}", f)
}

// NewGetMeetingRegistrantHandler creates a HTTP handler which loads the HTTP
// request and calls the "Meeting Service" service "get-meeting-registrant"
// endpoint.
func NewGetMeetingRegistrantHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetMeetingRegistrantRequest(mux, decoder)
		encodeResponse = EncodeGetMeetingRegistrantResponse(encoder)
		encodeError    = EncodeGetMeetingRegistrantError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "get-meeting-registrant")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Meeting Service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpdateMeetingRegistrantHandler configures the mux to serve the "Meeting
// Service" service "update-meeting-registrant" endpoint.
func MountUpdateMeetingRegistrantHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/meetings/{meeting_uid}/registrants/{uid}", f)
}

// NewUpdateMeetingRegistrantHandler creates a HTTP handler which loads the
// HTTP request and calls the "Meeting Service" service
// "update-meeting-registrant" endpoint.
func NewUpdateMeetingRegistrantHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateMeetingRegistrantRequest(mux, decoder)
		encodeResponse = EncodeUpdateMeetingRegistrantResponse(encoder)
		encodeError    = EncodeUpdateMeetingRegistrantError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "update-meeting-registrant")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Meeting Service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteMeetingRegistrantHandler configures the mux to serve the "Meeting
// Service" service "delete-meeting-registrant" endpoint.
func MountDeleteMeetingRegistrantHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/meetings/{meeting_uid}/registrants/{uid}", f)
}

// NewDeleteMeetingRegistrantHandler creates a HTTP handler which loads the
// HTTP request and calls the "Meeting Service" service
// "delete-meeting-registrant" endpoint.
func NewDeleteMeetingRegistrantHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteMeetingRegistrantRequest(mux, decoder)
		encodeResponse = EncodeDeleteMeetingRegistrantResponse(encoder)
		encodeError    = EncodeDeleteMeetingRegistrantError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "delete-meeting-registrant")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Meeting Service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountZoomWebhookHandler configures the mux to serve the "Meeting Service"
// service "zoom-webhook" endpoint.
func MountZoomWebhookHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/webhooks/zoom", f)
}

// NewZoomWebhookHandler creates a HTTP handler which loads the HTTP request
// and calls the "Meeting Service" service "zoom-webhook" endpoint.
func NewZoomWebhookHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeZoomWebhookRequest(mux, decoder)
		encodeResponse = EncodeZoomWebhookResponse(encoder)
		encodeError    = EncodeZoomWebhookError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "zoom-webhook")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Meeting Service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetPastMeetingsHandler configures the mux to serve the "Meeting
// Service" service "get-past-meetings" endpoint.
func MountGetPastMeetingsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/past_meetings", f)
}

// NewGetPastMeetingsHandler creates a HTTP handler which loads the HTTP
// request and calls the "Meeting Service" service "get-past-meetings" endpoint.
func NewGetPastMeetingsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetPastMeetingsRequest(mux, decoder)
		encodeResponse = EncodeGetPastMeetingsResponse(encoder)
		encodeError    = EncodeGetPastMeetingsError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "get-past-meetings")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Meeting Service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCreatePastMeetingHandler configures the mux to serve the "Meeting
// Service" service "create-past-meeting" endpoint.
func MountCreatePastMeetingHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/past_meetings", f)
}

// NewCreatePastMeetingHandler creates a HTTP handler which loads the HTTP
// request and calls the "Meeting Service" service "create-past-meeting"
// endpoint.
func NewCreatePastMeetingHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreatePastMeetingRequest(mux, decoder)
		encodeResponse = EncodeCreatePastMeetingResponse(encoder)
		encodeError    = EncodeCreatePastMeetingError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "create-past-meeting")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Meeting Service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetPastMeetingHandler configures the mux to serve the "Meeting Service"
// service "get-past-meeting" endpoint.
func MountGetPastMeetingHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/past_meetings/{uid}", f)
}

// NewGetPastMeetingHandler creates a HTTP handler which loads the HTTP request
// and calls the "Meeting Service" service "get-past-meeting" endpoint.
func NewGetPastMeetingHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetPastMeetingRequest(mux, decoder)
		encodeResponse = EncodeGetPastMeetingResponse(encoder)
		encodeError    = EncodeGetPastMeetingError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "get-past-meeting")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Meeting Service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeletePastMeetingHandler configures the mux to serve the "Meeting
// Service" service "delete-past-meeting" endpoint.
func MountDeletePastMeetingHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/past_meetings/{uid}", f)
}

// NewDeletePastMeetingHandler creates a HTTP handler which loads the HTTP
// request and calls the "Meeting Service" service "delete-past-meeting"
// endpoint.
func NewDeletePastMeetingHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeletePastMeetingRequest(mux, decoder)
		encodeResponse = EncodeDeletePastMeetingResponse(encoder)
		encodeError    = EncodeDeletePastMeetingError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "delete-past-meeting")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Meeting Service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetPastMeetingParticipantsHandler configures the mux to serve the
// "Meeting Service" service "get-past-meeting-participants" endpoint.
func MountGetPastMeetingParticipantsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/past_meetings/{uid}/participants", f)
}

// NewGetPastMeetingParticipantsHandler creates a HTTP handler which loads the
// HTTP request and calls the "Meeting Service" service
// "get-past-meeting-participants" endpoint.
func NewGetPastMeetingParticipantsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetPastMeetingParticipantsRequest(mux, decoder)
		encodeResponse = EncodeGetPastMeetingParticipantsResponse(encoder)
		encodeError    = EncodeGetPastMeetingParticipantsError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "get-past-meeting-participants")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Meeting Service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCreatePastMeetingParticipantHandler configures the mux to serve the
// "Meeting Service" service "create-past-meeting-participant" endpoint.
func MountCreatePastMeetingParticipantHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/past_meetings/{uid}/participants", f)
}

// NewCreatePastMeetingParticipantHandler creates a HTTP handler which loads
// the HTTP request and calls the "Meeting Service" service
// "create-past-meeting-participant" endpoint.
func NewCreatePastMeetingParticipantHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreatePastMeetingParticipantRequest(mux, decoder)
		encodeResponse = EncodeCreatePastMeetingParticipantResponse(encoder)
		encodeError    = EncodeCreatePastMeetingParticipantError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "create-past-meeting-participant")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Meeting Service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetPastMeetingParticipantHandler configures the mux to serve the
// "Meeting Service" service "get-past-meeting-participant" endpoint.
func MountGetPastMeetingParticipantHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/past_meetings/{past_meeting_uid}/participants/{uid}", f)
}

// NewGetPastMeetingParticipantHandler creates a HTTP handler which loads the
// HTTP request and calls the "Meeting Service" service
// "get-past-meeting-participant" endpoint.
func NewGetPastMeetingParticipantHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetPastMeetingParticipantRequest(mux, decoder)
		encodeResponse = EncodeGetPastMeetingParticipantResponse(encoder)
		encodeError    = EncodeGetPastMeetingParticipantError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "get-past-meeting-participant")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Meeting Service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpdatePastMeetingParticipantHandler configures the mux to serve the
// "Meeting Service" service "update-past-meeting-participant" endpoint.
func MountUpdatePastMeetingParticipantHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/past_meetings/{past_meeting_uid}/participants/{uid}", f)
}

// NewUpdatePastMeetingParticipantHandler creates a HTTP handler which loads
// the HTTP request and calls the "Meeting Service" service
// "update-past-meeting-participant" endpoint.
func NewUpdatePastMeetingParticipantHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdatePastMeetingParticipantRequest(mux, decoder)
		encodeResponse = EncodeUpdatePastMeetingParticipantResponse(encoder)
		encodeError    = EncodeUpdatePastMeetingParticipantError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "update-past-meeting-participant")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Meeting Service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeletePastMeetingParticipantHandler configures the mux to serve the
// "Meeting Service" service "delete-past-meeting-participant" endpoint.
func MountDeletePastMeetingParticipantHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/past_meetings/{past_meeting_uid}/participants/{uid}", f)
}

// NewDeletePastMeetingParticipantHandler creates a HTTP handler which loads
// the HTTP request and calls the "Meeting Service" service
// "delete-past-meeting-participant" endpoint.
func NewDeletePastMeetingParticipantHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeletePastMeetingParticipantRequest(mux, decoder)
		encodeResponse = EncodeDeletePastMeetingParticipantResponse(encoder)
		encodeError    = EncodeDeletePastMeetingParticipantError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "delete-past-meeting-participant")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Meeting Service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetPastMeetingSummariesHandler configures the mux to serve the "Meeting
// Service" service "get-past-meeting-summaries" endpoint.
func MountGetPastMeetingSummariesHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/past_meetings/{uid}/summaries", f)
}

// NewGetPastMeetingSummariesHandler creates a HTTP handler which loads the
// HTTP request and calls the "Meeting Service" service
// "get-past-meeting-summaries" endpoint.
func NewGetPastMeetingSummariesHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetPastMeetingSummariesRequest(mux, decoder)
		encodeResponse = EncodeGetPastMeetingSummariesResponse(encoder)
		encodeError    = EncodeGetPastMeetingSummariesError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "get-past-meeting-summaries")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Meeting Service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetPastMeetingSummaryHandler configures the mux to serve the "Meeting
// Service" service "get-past-meeting-summary" endpoint.
func MountGetPastMeetingSummaryHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/past_meetings/{past_meeting_uid}/summaries/{summary_uid}", f)
}

// NewGetPastMeetingSummaryHandler creates a HTTP handler which loads the HTTP
// request and calls the "Meeting Service" service "get-past-meeting-summary"
// endpoint.
func NewGetPastMeetingSummaryHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetPastMeetingSummaryRequest(mux, decoder)
		encodeResponse = EncodeGetPastMeetingSummaryResponse(encoder)
		encodeError    = EncodeGetPastMeetingSummaryError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "get-past-meeting-summary")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Meeting Service")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountReadyzHandler configures the mux to serve the "Meeting Service" service
// "readyz" endpoint.
func MountReadyzHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/readyz", f)
}

// NewReadyzHandler creates a HTTP handler which loads the HTTP request and
// calls the "Meeting Service" service "readyz" endpoint.
func NewReadyzHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeReadyzResponse(encoder)
		encodeError    = EncodeReadyzError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "readyz")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Meeting Service")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountLivezHandler configures the mux to serve the "Meeting Service" service
// "livez" endpoint.
func MountLivezHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/livez", f)
}

// NewLivezHandler creates a HTTP handler which loads the HTTP request and
// calls the "Meeting Service" service "livez" endpoint.
func NewLivezHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeLivezResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "livez")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Meeting Service")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// appendFS is a custom implementation of fs.FS that appends a specified prefix
// to the file paths before delegating the Open call to the underlying fs.FS.
type appendFS struct {
	prefix string
	fs     http.FileSystem
}

// Open opens the named file, appending the prefix to the file path before
// passing it to the underlying fs.FS.
func (s appendFS) Open(name string) (http.File, error) {
	switch name {
	}
	return s.fs.Open(path.Join(s.prefix, name))
}

// appendPrefix returns a new fs.FS that appends the specified prefix to file paths
// before delegating to the provided embed.FS.
func appendPrefix(fsys http.FileSystem, prefix string) http.FileSystem {
	return appendFS{prefix: prefix, fs: fsys}
}

// MountGenHTTPOpenapiJSON configures the mux to serve GET request made to
// "/_meetings/openapi.json".
func MountGenHTTPOpenapiJSON(mux goahttp.Muxer, h http.Handler) {
	mux.Handle("GET", "/_meetings/openapi.json", h.ServeHTTP)
}

// MountGenHTTPOpenapiYaml configures the mux to serve GET request made to
// "/_meetings/openapi.yaml".
func MountGenHTTPOpenapiYaml(mux goahttp.Muxer, h http.Handler) {
	mux.Handle("GET", "/_meetings/openapi.yaml", h.ServeHTTP)
}

// MountGenHTTPOpenapi3JSON configures the mux to serve GET request made to
// "/_meetings/openapi3.json".
func MountGenHTTPOpenapi3JSON(mux goahttp.Muxer, h http.Handler) {
	mux.Handle("GET", "/_meetings/openapi3.json", h.ServeHTTP)
}

// MountGenHTTPOpenapi3Yaml configures the mux to serve GET request made to
// "/_meetings/openapi3.yaml".
func MountGenHTTPOpenapi3Yaml(mux goahttp.Muxer, h http.Handler) {
	mux.Handle("GET", "/_meetings/openapi3.yaml", h.ServeHTTP)
}
