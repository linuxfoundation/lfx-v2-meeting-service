// Code generated by goa v3.21.1, DO NOT EDIT.
//
// Meeting Service client HTTP transport
//
// Command:
// $ goa gen github.com/linuxfoundation/lfx-v2-meeting-service/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the Meeting Service service endpoint HTTP clients.
type Client struct {
	// GetMeetings Doer is the HTTP client used to make requests to the
	// get-meetings endpoint.
	GetMeetingsDoer goahttp.Doer

	// CreateMeeting Doer is the HTTP client used to make requests to the
	// create-meeting endpoint.
	CreateMeetingDoer goahttp.Doer

	// GetMeetingBase Doer is the HTTP client used to make requests to the
	// get-meeting-base endpoint.
	GetMeetingBaseDoer goahttp.Doer

	// GetMeetingSettings Doer is the HTTP client used to make requests to the
	// get-meeting-settings endpoint.
	GetMeetingSettingsDoer goahttp.Doer

	// GetMeetingJoinURL Doer is the HTTP client used to make requests to the
	// get-meeting-join-url endpoint.
	GetMeetingJoinURLDoer goahttp.Doer

	// UpdateMeetingBase Doer is the HTTP client used to make requests to the
	// update-meeting-base endpoint.
	UpdateMeetingBaseDoer goahttp.Doer

	// UpdateMeetingSettings Doer is the HTTP client used to make requests to the
	// update-meeting-settings endpoint.
	UpdateMeetingSettingsDoer goahttp.Doer

	// DeleteMeeting Doer is the HTTP client used to make requests to the
	// delete-meeting endpoint.
	DeleteMeetingDoer goahttp.Doer

	// GetMeetingRegistrants Doer is the HTTP client used to make requests to the
	// get-meeting-registrants endpoint.
	GetMeetingRegistrantsDoer goahttp.Doer

	// CreateMeetingRegistrant Doer is the HTTP client used to make requests to the
	// create-meeting-registrant endpoint.
	CreateMeetingRegistrantDoer goahttp.Doer

	// GetMeetingRegistrant Doer is the HTTP client used to make requests to the
	// get-meeting-registrant endpoint.
	GetMeetingRegistrantDoer goahttp.Doer

	// UpdateMeetingRegistrant Doer is the HTTP client used to make requests to the
	// update-meeting-registrant endpoint.
	UpdateMeetingRegistrantDoer goahttp.Doer

	// DeleteMeetingRegistrant Doer is the HTTP client used to make requests to the
	// delete-meeting-registrant endpoint.
	DeleteMeetingRegistrantDoer goahttp.Doer

	// ZoomWebhook Doer is the HTTP client used to make requests to the
	// zoom-webhook endpoint.
	ZoomWebhookDoer goahttp.Doer

	// GetPastMeetings Doer is the HTTP client used to make requests to the
	// get-past-meetings endpoint.
	GetPastMeetingsDoer goahttp.Doer

	// CreatePastMeeting Doer is the HTTP client used to make requests to the
	// create-past-meeting endpoint.
	CreatePastMeetingDoer goahttp.Doer

	// GetPastMeeting Doer is the HTTP client used to make requests to the
	// get-past-meeting endpoint.
	GetPastMeetingDoer goahttp.Doer

	// DeletePastMeeting Doer is the HTTP client used to make requests to the
	// delete-past-meeting endpoint.
	DeletePastMeetingDoer goahttp.Doer

	// GetPastMeetingParticipants Doer is the HTTP client used to make requests to
	// the get-past-meeting-participants endpoint.
	GetPastMeetingParticipantsDoer goahttp.Doer

	// CreatePastMeetingParticipant Doer is the HTTP client used to make requests
	// to the create-past-meeting-participant endpoint.
	CreatePastMeetingParticipantDoer goahttp.Doer

	// GetPastMeetingParticipant Doer is the HTTP client used to make requests to
	// the get-past-meeting-participant endpoint.
	GetPastMeetingParticipantDoer goahttp.Doer

	// UpdatePastMeetingParticipant Doer is the HTTP client used to make requests
	// to the update-past-meeting-participant endpoint.
	UpdatePastMeetingParticipantDoer goahttp.Doer

	// DeletePastMeetingParticipant Doer is the HTTP client used to make requests
	// to the delete-past-meeting-participant endpoint.
	DeletePastMeetingParticipantDoer goahttp.Doer

	// GetPastMeetingSummaries Doer is the HTTP client used to make requests to the
	// get-past-meeting-summaries endpoint.
	GetPastMeetingSummariesDoer goahttp.Doer

	// GetPastMeetingSummary Doer is the HTTP client used to make requests to the
	// get-past-meeting-summary endpoint.
	GetPastMeetingSummaryDoer goahttp.Doer

	// UpdatePastMeetingSummary Doer is the HTTP client used to make requests to
	// the update-past-meeting-summary endpoint.
	UpdatePastMeetingSummaryDoer goahttp.Doer

	// Readyz Doer is the HTTP client used to make requests to the readyz endpoint.
	ReadyzDoer goahttp.Doer

	// Livez Doer is the HTTP client used to make requests to the livez endpoint.
	LivezDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the Meeting Service service
// servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		GetMeetingsDoer:                  doer,
		CreateMeetingDoer:                doer,
		GetMeetingBaseDoer:               doer,
		GetMeetingSettingsDoer:           doer,
		GetMeetingJoinURLDoer:            doer,
		UpdateMeetingBaseDoer:            doer,
		UpdateMeetingSettingsDoer:        doer,
		DeleteMeetingDoer:                doer,
		GetMeetingRegistrantsDoer:        doer,
		CreateMeetingRegistrantDoer:      doer,
		GetMeetingRegistrantDoer:         doer,
		UpdateMeetingRegistrantDoer:      doer,
		DeleteMeetingRegistrantDoer:      doer,
		ZoomWebhookDoer:                  doer,
		GetPastMeetingsDoer:              doer,
		CreatePastMeetingDoer:            doer,
		GetPastMeetingDoer:               doer,
		DeletePastMeetingDoer:            doer,
		GetPastMeetingParticipantsDoer:   doer,
		CreatePastMeetingParticipantDoer: doer,
		GetPastMeetingParticipantDoer:    doer,
		UpdatePastMeetingParticipantDoer: doer,
		DeletePastMeetingParticipantDoer: doer,
		GetPastMeetingSummariesDoer:      doer,
		GetPastMeetingSummaryDoer:        doer,
		UpdatePastMeetingSummaryDoer:     doer,
		ReadyzDoer:                       doer,
		LivezDoer:                        doer,
		RestoreResponseBody:              restoreBody,
		scheme:                           scheme,
		host:                             host,
		decoder:                          dec,
		encoder:                          enc,
	}
}

// GetMeetings returns an endpoint that makes HTTP requests to the Meeting
// Service service get-meetings server.
func (c *Client) GetMeetings() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetMeetingsRequest(c.encoder)
		decodeResponse = DecodeGetMeetingsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetMeetingsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetMeetingsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Meeting Service", "get-meetings", err)
		}
		return decodeResponse(resp)
	}
}

// CreateMeeting returns an endpoint that makes HTTP requests to the Meeting
// Service service create-meeting server.
func (c *Client) CreateMeeting() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateMeetingRequest(c.encoder)
		decodeResponse = DecodeCreateMeetingResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCreateMeetingRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateMeetingDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Meeting Service", "create-meeting", err)
		}
		return decodeResponse(resp)
	}
}

// GetMeetingBase returns an endpoint that makes HTTP requests to the Meeting
// Service service get-meeting-base server.
func (c *Client) GetMeetingBase() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetMeetingBaseRequest(c.encoder)
		decodeResponse = DecodeGetMeetingBaseResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetMeetingBaseRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetMeetingBaseDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Meeting Service", "get-meeting-base", err)
		}
		return decodeResponse(resp)
	}
}

// GetMeetingSettings returns an endpoint that makes HTTP requests to the
// Meeting Service service get-meeting-settings server.
func (c *Client) GetMeetingSettings() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetMeetingSettingsRequest(c.encoder)
		decodeResponse = DecodeGetMeetingSettingsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetMeetingSettingsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetMeetingSettingsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Meeting Service", "get-meeting-settings", err)
		}
		return decodeResponse(resp)
	}
}

// GetMeetingJoinURL returns an endpoint that makes HTTP requests to the
// Meeting Service service get-meeting-join-url server.
func (c *Client) GetMeetingJoinURL() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetMeetingJoinURLRequest(c.encoder)
		decodeResponse = DecodeGetMeetingJoinURLResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetMeetingJoinURLRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetMeetingJoinURLDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Meeting Service", "get-meeting-join-url", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateMeetingBase returns an endpoint that makes HTTP requests to the
// Meeting Service service update-meeting-base server.
func (c *Client) UpdateMeetingBase() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateMeetingBaseRequest(c.encoder)
		decodeResponse = DecodeUpdateMeetingBaseResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpdateMeetingBaseRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateMeetingBaseDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Meeting Service", "update-meeting-base", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateMeetingSettings returns an endpoint that makes HTTP requests to the
// Meeting Service service update-meeting-settings server.
func (c *Client) UpdateMeetingSettings() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateMeetingSettingsRequest(c.encoder)
		decodeResponse = DecodeUpdateMeetingSettingsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpdateMeetingSettingsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateMeetingSettingsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Meeting Service", "update-meeting-settings", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteMeeting returns an endpoint that makes HTTP requests to the Meeting
// Service service delete-meeting server.
func (c *Client) DeleteMeeting() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteMeetingRequest(c.encoder)
		decodeResponse = DecodeDeleteMeetingResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeleteMeetingRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteMeetingDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Meeting Service", "delete-meeting", err)
		}
		return decodeResponse(resp)
	}
}

// GetMeetingRegistrants returns an endpoint that makes HTTP requests to the
// Meeting Service service get-meeting-registrants server.
func (c *Client) GetMeetingRegistrants() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetMeetingRegistrantsRequest(c.encoder)
		decodeResponse = DecodeGetMeetingRegistrantsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetMeetingRegistrantsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetMeetingRegistrantsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Meeting Service", "get-meeting-registrants", err)
		}
		return decodeResponse(resp)
	}
}

// CreateMeetingRegistrant returns an endpoint that makes HTTP requests to the
// Meeting Service service create-meeting-registrant server.
func (c *Client) CreateMeetingRegistrant() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateMeetingRegistrantRequest(c.encoder)
		decodeResponse = DecodeCreateMeetingRegistrantResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCreateMeetingRegistrantRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateMeetingRegistrantDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Meeting Service", "create-meeting-registrant", err)
		}
		return decodeResponse(resp)
	}
}

// GetMeetingRegistrant returns an endpoint that makes HTTP requests to the
// Meeting Service service get-meeting-registrant server.
func (c *Client) GetMeetingRegistrant() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetMeetingRegistrantRequest(c.encoder)
		decodeResponse = DecodeGetMeetingRegistrantResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetMeetingRegistrantRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetMeetingRegistrantDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Meeting Service", "get-meeting-registrant", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateMeetingRegistrant returns an endpoint that makes HTTP requests to the
// Meeting Service service update-meeting-registrant server.
func (c *Client) UpdateMeetingRegistrant() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateMeetingRegistrantRequest(c.encoder)
		decodeResponse = DecodeUpdateMeetingRegistrantResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpdateMeetingRegistrantRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateMeetingRegistrantDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Meeting Service", "update-meeting-registrant", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteMeetingRegistrant returns an endpoint that makes HTTP requests to the
// Meeting Service service delete-meeting-registrant server.
func (c *Client) DeleteMeetingRegistrant() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteMeetingRegistrantRequest(c.encoder)
		decodeResponse = DecodeDeleteMeetingRegistrantResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeleteMeetingRegistrantRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteMeetingRegistrantDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Meeting Service", "delete-meeting-registrant", err)
		}
		return decodeResponse(resp)
	}
}

// ZoomWebhook returns an endpoint that makes HTTP requests to the Meeting
// Service service zoom-webhook server.
func (c *Client) ZoomWebhook() goa.Endpoint {
	var (
		encodeRequest  = EncodeZoomWebhookRequest(c.encoder)
		decodeResponse = DecodeZoomWebhookResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildZoomWebhookRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ZoomWebhookDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Meeting Service", "zoom-webhook", err)
		}
		return decodeResponse(resp)
	}
}

// GetPastMeetings returns an endpoint that makes HTTP requests to the Meeting
// Service service get-past-meetings server.
func (c *Client) GetPastMeetings() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetPastMeetingsRequest(c.encoder)
		decodeResponse = DecodeGetPastMeetingsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetPastMeetingsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetPastMeetingsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Meeting Service", "get-past-meetings", err)
		}
		return decodeResponse(resp)
	}
}

// CreatePastMeeting returns an endpoint that makes HTTP requests to the
// Meeting Service service create-past-meeting server.
func (c *Client) CreatePastMeeting() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreatePastMeetingRequest(c.encoder)
		decodeResponse = DecodeCreatePastMeetingResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCreatePastMeetingRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreatePastMeetingDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Meeting Service", "create-past-meeting", err)
		}
		return decodeResponse(resp)
	}
}

// GetPastMeeting returns an endpoint that makes HTTP requests to the Meeting
// Service service get-past-meeting server.
func (c *Client) GetPastMeeting() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetPastMeetingRequest(c.encoder)
		decodeResponse = DecodeGetPastMeetingResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetPastMeetingRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetPastMeetingDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Meeting Service", "get-past-meeting", err)
		}
		return decodeResponse(resp)
	}
}

// DeletePastMeeting returns an endpoint that makes HTTP requests to the
// Meeting Service service delete-past-meeting server.
func (c *Client) DeletePastMeeting() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeletePastMeetingRequest(c.encoder)
		decodeResponse = DecodeDeletePastMeetingResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeletePastMeetingRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeletePastMeetingDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Meeting Service", "delete-past-meeting", err)
		}
		return decodeResponse(resp)
	}
}

// GetPastMeetingParticipants returns an endpoint that makes HTTP requests to
// the Meeting Service service get-past-meeting-participants server.
func (c *Client) GetPastMeetingParticipants() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetPastMeetingParticipantsRequest(c.encoder)
		decodeResponse = DecodeGetPastMeetingParticipantsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetPastMeetingParticipantsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetPastMeetingParticipantsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Meeting Service", "get-past-meeting-participants", err)
		}
		return decodeResponse(resp)
	}
}

// CreatePastMeetingParticipant returns an endpoint that makes HTTP requests to
// the Meeting Service service create-past-meeting-participant server.
func (c *Client) CreatePastMeetingParticipant() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreatePastMeetingParticipantRequest(c.encoder)
		decodeResponse = DecodeCreatePastMeetingParticipantResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCreatePastMeetingParticipantRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreatePastMeetingParticipantDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Meeting Service", "create-past-meeting-participant", err)
		}
		return decodeResponse(resp)
	}
}

// GetPastMeetingParticipant returns an endpoint that makes HTTP requests to
// the Meeting Service service get-past-meeting-participant server.
func (c *Client) GetPastMeetingParticipant() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetPastMeetingParticipantRequest(c.encoder)
		decodeResponse = DecodeGetPastMeetingParticipantResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetPastMeetingParticipantRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetPastMeetingParticipantDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Meeting Service", "get-past-meeting-participant", err)
		}
		return decodeResponse(resp)
	}
}

// UpdatePastMeetingParticipant returns an endpoint that makes HTTP requests to
// the Meeting Service service update-past-meeting-participant server.
func (c *Client) UpdatePastMeetingParticipant() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdatePastMeetingParticipantRequest(c.encoder)
		decodeResponse = DecodeUpdatePastMeetingParticipantResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpdatePastMeetingParticipantRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdatePastMeetingParticipantDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Meeting Service", "update-past-meeting-participant", err)
		}
		return decodeResponse(resp)
	}
}

// DeletePastMeetingParticipant returns an endpoint that makes HTTP requests to
// the Meeting Service service delete-past-meeting-participant server.
func (c *Client) DeletePastMeetingParticipant() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeletePastMeetingParticipantRequest(c.encoder)
		decodeResponse = DecodeDeletePastMeetingParticipantResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeletePastMeetingParticipantRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeletePastMeetingParticipantDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Meeting Service", "delete-past-meeting-participant", err)
		}
		return decodeResponse(resp)
	}
}

// GetPastMeetingSummaries returns an endpoint that makes HTTP requests to the
// Meeting Service service get-past-meeting-summaries server.
func (c *Client) GetPastMeetingSummaries() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetPastMeetingSummariesRequest(c.encoder)
		decodeResponse = DecodeGetPastMeetingSummariesResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetPastMeetingSummariesRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetPastMeetingSummariesDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Meeting Service", "get-past-meeting-summaries", err)
		}
		return decodeResponse(resp)
	}
}

// GetPastMeetingSummary returns an endpoint that makes HTTP requests to the
// Meeting Service service get-past-meeting-summary server.
func (c *Client) GetPastMeetingSummary() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetPastMeetingSummaryRequest(c.encoder)
		decodeResponse = DecodeGetPastMeetingSummaryResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetPastMeetingSummaryRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetPastMeetingSummaryDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Meeting Service", "get-past-meeting-summary", err)
		}
		return decodeResponse(resp)
	}
}

// UpdatePastMeetingSummary returns an endpoint that makes HTTP requests to the
// Meeting Service service update-past-meeting-summary server.
func (c *Client) UpdatePastMeetingSummary() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdatePastMeetingSummaryRequest(c.encoder)
		decodeResponse = DecodeUpdatePastMeetingSummaryResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpdatePastMeetingSummaryRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdatePastMeetingSummaryDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Meeting Service", "update-past-meeting-summary", err)
		}
		return decodeResponse(resp)
	}
}

// Readyz returns an endpoint that makes HTTP requests to the Meeting Service
// service readyz server.
func (c *Client) Readyz() goa.Endpoint {
	var (
		decodeResponse = DecodeReadyzResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildReadyzRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ReadyzDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Meeting Service", "readyz", err)
		}
		return decodeResponse(resp)
	}
}

// Livez returns an endpoint that makes HTTP requests to the Meeting Service
// service livez server.
func (c *Client) Livez() goa.Endpoint {
	var (
		decodeResponse = DecodeLivezResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildLivezRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.LivezDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Meeting Service", "livez", err)
		}
		return decodeResponse(resp)
	}
}
