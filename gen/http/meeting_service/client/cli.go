// Code generated by goa v3.21.1, DO NOT EDIT.
//
// Meeting Service HTTP client CLI support package
//
// Command:
// $ goa gen github.com/linuxfoundation/lfx-v2-meeting-service/design

package client

import (
	"encoding/json"
	"fmt"
	"unicode/utf8"

	meetingservice "github.com/linuxfoundation/lfx-v2-meeting-service/gen/meeting_service"
	goa "goa.design/goa/v3/pkg"
)

// BuildGetMeetingsPayload builds the payload for the Meeting Service
// get-meetings endpoint from CLI flags.
func BuildGetMeetingsPayload(meetingServiceGetMeetingsVersion string, meetingServiceGetMeetingsBearerToken string) (*meetingservice.GetMeetingsPayload, error) {
	var err error
	var version *string
	{
		if meetingServiceGetMeetingsVersion != "" {
			version = &meetingServiceGetMeetingsVersion
			if !(*version == "1") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", *version, []any{"1"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var bearerToken *string
	{
		if meetingServiceGetMeetingsBearerToken != "" {
			bearerToken = &meetingServiceGetMeetingsBearerToken
		}
	}
	v := &meetingservice.GetMeetingsPayload{}
	v.Version = version
	v.BearerToken = bearerToken

	return v, nil
}

// BuildCreateMeetingPayload builds the payload for the Meeting Service
// create-meeting endpoint from CLI flags.
func BuildCreateMeetingPayload(meetingServiceCreateMeetingBody string, meetingServiceCreateMeetingVersion string, meetingServiceCreateMeetingBearerToken string) (*meetingservice.CreateMeetingPayload, error) {
	var err error
	var body CreateMeetingRequestBody
	{
		err = json.Unmarshal([]byte(meetingServiceCreateMeetingBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"artifact_visibility\": \"meeting_hosts\",\n      \"committees\": [\n         {\n            \"allowed_voting_statuses\": [\n               \"Fuga a veniam similique fugit.\",\n               \"Occaecati dolorem ut iure dolorem.\"\n            ],\n            \"uid\": \"Assumenda maxime aut occaecati.\"\n         },\n         {\n            \"allowed_voting_statuses\": [\n               \"Fuga a veniam similique fugit.\",\n               \"Occaecati dolorem ut iure dolorem.\"\n            ],\n            \"uid\": \"Assumenda maxime aut occaecati.\"\n         },\n         {\n            \"allowed_voting_statuses\": [\n               \"Fuga a veniam similique fugit.\",\n               \"Occaecati dolorem ut iure dolorem.\"\n            ],\n            \"uid\": \"Assumenda maxime aut occaecati.\"\n         }\n      ],\n      \"description\": \"Explicabo eos voluptatum.\",\n      \"duration\": 427,\n      \"early_join_time_minutes\": 12,\n      \"meeting_type\": \"Board\",\n      \"platform\": \"Zoom\",\n      \"project_uid\": \"7cad5a8d-19d0-41a4-81a6-043453daf9ee\",\n      \"public_link\": \"Qui architecto sint mollitia.\",\n      \"recording_enabled\": false,\n      \"recurrence\": {\n         \"end_date_time\": \"2012-04-06T18:34:31Z\",\n         \"end_times\": 4918391209221064697,\n         \"monthly_day\": 7,\n         \"monthly_week\": -1,\n         \"monthly_week_day\": 2,\n         \"repeat_interval\": 1192397136127484557,\n         \"type\": 3,\n         \"weekly_days\": \"1,3,5\"\n      },\n      \"restricted\": false,\n      \"start_time\": \"2021-01-01T00:00:00Z\",\n      \"timezone\": \"Ab repudiandae.\",\n      \"title\": \"Sit quo in consectetur mollitia.\",\n      \"transcript_enabled\": true,\n      \"visibility\": \"public\",\n      \"youtube_upload_enabled\": true,\n      \"zoom_config\": {\n         \"ai_companion_enabled\": true,\n         \"ai_summary_require_approval\": false\n      }\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.project_uid", body.ProjectUID, goa.FormatUUID))
		err = goa.MergeErrors(err, goa.ValidateFormat("body.start_time", body.StartTime, goa.FormatDateTime))
		if body.Duration < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.duration", body.Duration, 0, true))
		}
		if body.Duration > 600 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.duration", body.Duration, 600, false))
		}
		if body.Recurrence != nil {
			if err2 := ValidateRecurrenceRequestBody(body.Recurrence); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		for _, e := range body.Committees {
			if e != nil {
				if err2 := ValidateCommitteeRequestBody(e); err2 != nil {
					err = goa.MergeErrors(err, err2)
				}
			}
		}
		if body.Platform != nil {
			if !(*body.Platform == "Zoom") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.platform", *body.Platform, []any{"Zoom"}))
			}
		}
		if body.EarlyJoinTimeMinutes != nil {
			if *body.EarlyJoinTimeMinutes < 10 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("body.early_join_time_minutes", *body.EarlyJoinTimeMinutes, 10, true))
			}
		}
		if body.EarlyJoinTimeMinutes != nil {
			if *body.EarlyJoinTimeMinutes > 60 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("body.early_join_time_minutes", *body.EarlyJoinTimeMinutes, 60, false))
			}
		}
		if body.MeetingType != nil {
			if !(*body.MeetingType == "Board" || *body.MeetingType == "Maintainers" || *body.MeetingType == "Marketing" || *body.MeetingType == "Technical" || *body.MeetingType == "Legal" || *body.MeetingType == "Other" || *body.MeetingType == "None") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.meeting_type", *body.MeetingType, []any{"Board", "Maintainers", "Marketing", "Technical", "Legal", "Other", "None"}))
			}
		}
		if body.Visibility != nil {
			if !(*body.Visibility == "public" || *body.Visibility == "private") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.visibility", *body.Visibility, []any{"public", "private"}))
			}
		}
		if body.ArtifactVisibility != nil {
			if !(*body.ArtifactVisibility == "meeting_hosts" || *body.ArtifactVisibility == "meeting_participants" || *body.ArtifactVisibility == "public") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.artifact_visibility", *body.ArtifactVisibility, []any{"meeting_hosts", "meeting_participants", "public"}))
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var version *string
	{
		if meetingServiceCreateMeetingVersion != "" {
			version = &meetingServiceCreateMeetingVersion
			if !(*version == "1") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", *version, []any{"1"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var bearerToken *string
	{
		if meetingServiceCreateMeetingBearerToken != "" {
			bearerToken = &meetingServiceCreateMeetingBearerToken
		}
	}
	v := &meetingservice.CreateMeetingPayload{
		ProjectUID:           body.ProjectUID,
		StartTime:            body.StartTime,
		Duration:             body.Duration,
		Timezone:             body.Timezone,
		Title:                body.Title,
		Description:          body.Description,
		Platform:             body.Platform,
		EarlyJoinTimeMinutes: body.EarlyJoinTimeMinutes,
		MeetingType:          body.MeetingType,
		Visibility:           body.Visibility,
		Restricted:           body.Restricted,
		ArtifactVisibility:   body.ArtifactVisibility,
		PublicLink:           body.PublicLink,
		RecordingEnabled:     body.RecordingEnabled,
		TranscriptEnabled:    body.TranscriptEnabled,
		YoutubeUploadEnabled: body.YoutubeUploadEnabled,
	}
	if body.Recurrence != nil {
		v.Recurrence = marshalRecurrenceRequestBodyToMeetingserviceRecurrence(body.Recurrence)
	}
	if body.Committees != nil {
		v.Committees = make([]*meetingservice.Committee, len(body.Committees))
		for i, val := range body.Committees {
			v.Committees[i] = marshalCommitteeRequestBodyToMeetingserviceCommittee(val)
		}
	}
	if body.ZoomConfig != nil {
		v.ZoomConfig = marshalZoomConfigPostRequestBodyToMeetingserviceZoomConfigPost(body.ZoomConfig)
	}
	v.Version = version
	v.BearerToken = bearerToken

	return v, nil
}

// BuildGetMeetingPayload builds the payload for the Meeting Service
// get-meeting endpoint from CLI flags.
func BuildGetMeetingPayload(meetingServiceGetMeetingUID string, meetingServiceGetMeetingVersion string, meetingServiceGetMeetingBearerToken string) (*meetingservice.GetMeetingPayload, error) {
	var err error
	var uid string
	{
		uid = meetingServiceGetMeetingUID
		err = goa.MergeErrors(err, goa.ValidateFormat("uid", uid, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var version *string
	{
		if meetingServiceGetMeetingVersion != "" {
			version = &meetingServiceGetMeetingVersion
			if !(*version == "1") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", *version, []any{"1"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var bearerToken *string
	{
		if meetingServiceGetMeetingBearerToken != "" {
			bearerToken = &meetingServiceGetMeetingBearerToken
		}
	}
	v := &meetingservice.GetMeetingPayload{}
	v.UID = &uid
	v.Version = version
	v.BearerToken = bearerToken

	return v, nil
}

// BuildUpdateMeetingPayload builds the payload for the Meeting Service
// update-meeting endpoint from CLI flags.
func BuildUpdateMeetingPayload(meetingServiceUpdateMeetingBody string, meetingServiceUpdateMeetingUID string, meetingServiceUpdateMeetingVersion string, meetingServiceUpdateMeetingBearerToken string, meetingServiceUpdateMeetingEtag string) (*meetingservice.UpdateMeetingPayload, error) {
	var err error
	var body UpdateMeetingRequestBody
	{
		err = json.Unmarshal([]byte(meetingServiceUpdateMeetingBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"artifact_visibility\": \"meeting_participants\",\n      \"committees\": [\n         {\n            \"allowed_voting_statuses\": [\n               \"Fuga a veniam similique fugit.\",\n               \"Occaecati dolorem ut iure dolorem.\"\n            ],\n            \"uid\": \"Assumenda maxime aut occaecati.\"\n         },\n         {\n            \"allowed_voting_statuses\": [\n               \"Fuga a veniam similique fugit.\",\n               \"Occaecati dolorem ut iure dolorem.\"\n            ],\n            \"uid\": \"Assumenda maxime aut occaecati.\"\n         },\n         {\n            \"allowed_voting_statuses\": [\n               \"Fuga a veniam similique fugit.\",\n               \"Occaecati dolorem ut iure dolorem.\"\n            ],\n            \"uid\": \"Assumenda maxime aut occaecati.\"\n         },\n         {\n            \"allowed_voting_statuses\": [\n               \"Fuga a veniam similique fugit.\",\n               \"Occaecati dolorem ut iure dolorem.\"\n            ],\n            \"uid\": \"Assumenda maxime aut occaecati.\"\n         }\n      ],\n      \"description\": \"Eaque rerum.\",\n      \"duration\": 565,\n      \"early_join_time_minutes\": 30,\n      \"meeting_type\": \"Legal\",\n      \"platform\": \"Zoom\",\n      \"project_uid\": \"7cad5a8d-19d0-41a4-81a6-043453daf9ee\",\n      \"public_link\": \"Temporibus minima atque sit totam.\",\n      \"recording_enabled\": true,\n      \"recurrence\": {\n         \"end_date_time\": \"2012-04-06T18:34:31Z\",\n         \"end_times\": 4918391209221064697,\n         \"monthly_day\": 7,\n         \"monthly_week\": -1,\n         \"monthly_week_day\": 2,\n         \"repeat_interval\": 1192397136127484557,\n         \"type\": 3,\n         \"weekly_days\": \"1,3,5\"\n      },\n      \"restricted\": true,\n      \"start_time\": \"2021-01-01T00:00:00Z\",\n      \"timezone\": \"Dolores quaerat cumque qui rem.\",\n      \"title\": \"Pariatur sed.\",\n      \"transcript_enabled\": false,\n      \"visibility\": \"private\",\n      \"youtube_upload_enabled\": false,\n      \"zoom_config\": {\n         \"ai_companion_enabled\": true,\n         \"ai_summary_require_approval\": false\n      }\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.project_uid", body.ProjectUID, goa.FormatUUID))
		err = goa.MergeErrors(err, goa.ValidateFormat("body.start_time", body.StartTime, goa.FormatDateTime))
		if body.Duration < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.duration", body.Duration, 0, true))
		}
		if body.Duration > 600 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.duration", body.Duration, 600, false))
		}
		if body.Recurrence != nil {
			if err2 := ValidateRecurrenceRequestBody(body.Recurrence); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		for _, e := range body.Committees {
			if e != nil {
				if err2 := ValidateCommitteeRequestBody(e); err2 != nil {
					err = goa.MergeErrors(err, err2)
				}
			}
		}
		if body.Platform != nil {
			if !(*body.Platform == "Zoom") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.platform", *body.Platform, []any{"Zoom"}))
			}
		}
		if body.EarlyJoinTimeMinutes != nil {
			if *body.EarlyJoinTimeMinutes < 10 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("body.early_join_time_minutes", *body.EarlyJoinTimeMinutes, 10, true))
			}
		}
		if body.EarlyJoinTimeMinutes != nil {
			if *body.EarlyJoinTimeMinutes > 60 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("body.early_join_time_minutes", *body.EarlyJoinTimeMinutes, 60, false))
			}
		}
		if body.MeetingType != nil {
			if !(*body.MeetingType == "Board" || *body.MeetingType == "Maintainers" || *body.MeetingType == "Marketing" || *body.MeetingType == "Technical" || *body.MeetingType == "Legal" || *body.MeetingType == "Other" || *body.MeetingType == "None") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.meeting_type", *body.MeetingType, []any{"Board", "Maintainers", "Marketing", "Technical", "Legal", "Other", "None"}))
			}
		}
		if body.Visibility != nil {
			if !(*body.Visibility == "public" || *body.Visibility == "private") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.visibility", *body.Visibility, []any{"public", "private"}))
			}
		}
		if body.ArtifactVisibility != nil {
			if !(*body.ArtifactVisibility == "meeting_hosts" || *body.ArtifactVisibility == "meeting_participants" || *body.ArtifactVisibility == "public") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.artifact_visibility", *body.ArtifactVisibility, []any{"meeting_hosts", "meeting_participants", "public"}))
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var uid string
	{
		uid = meetingServiceUpdateMeetingUID
		err = goa.MergeErrors(err, goa.ValidateFormat("uid", uid, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var version *string
	{
		if meetingServiceUpdateMeetingVersion != "" {
			version = &meetingServiceUpdateMeetingVersion
			if !(*version == "1") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", *version, []any{"1"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var bearerToken *string
	{
		if meetingServiceUpdateMeetingBearerToken != "" {
			bearerToken = &meetingServiceUpdateMeetingBearerToken
		}
	}
	var etag *string
	{
		if meetingServiceUpdateMeetingEtag != "" {
			etag = &meetingServiceUpdateMeetingEtag
		}
	}
	v := &meetingservice.UpdateMeetingPayload{
		ProjectUID:           body.ProjectUID,
		StartTime:            body.StartTime,
		Duration:             body.Duration,
		Timezone:             body.Timezone,
		Title:                body.Title,
		Description:          body.Description,
		Platform:             body.Platform,
		EarlyJoinTimeMinutes: body.EarlyJoinTimeMinutes,
		MeetingType:          body.MeetingType,
		Visibility:           body.Visibility,
		Restricted:           body.Restricted,
		ArtifactVisibility:   body.ArtifactVisibility,
		PublicLink:           body.PublicLink,
		RecordingEnabled:     body.RecordingEnabled,
		TranscriptEnabled:    body.TranscriptEnabled,
		YoutubeUploadEnabled: body.YoutubeUploadEnabled,
	}
	if body.Recurrence != nil {
		v.Recurrence = marshalRecurrenceRequestBodyToMeetingserviceRecurrence(body.Recurrence)
	}
	if body.Committees != nil {
		v.Committees = make([]*meetingservice.Committee, len(body.Committees))
		for i, val := range body.Committees {
			v.Committees[i] = marshalCommitteeRequestBodyToMeetingserviceCommittee(val)
		}
	}
	if body.ZoomConfig != nil {
		v.ZoomConfig = marshalZoomConfigPostRequestBodyToMeetingserviceZoomConfigPost(body.ZoomConfig)
	}
	v.UID = uid
	v.Version = version
	v.BearerToken = bearerToken
	v.Etag = etag

	return v, nil
}

// BuildDeleteMeetingPayload builds the payload for the Meeting Service
// delete-meeting endpoint from CLI flags.
func BuildDeleteMeetingPayload(meetingServiceDeleteMeetingUID string, meetingServiceDeleteMeetingVersion string, meetingServiceDeleteMeetingBearerToken string, meetingServiceDeleteMeetingEtag string) (*meetingservice.DeleteMeetingPayload, error) {
	var err error
	var uid string
	{
		uid = meetingServiceDeleteMeetingUID
		err = goa.MergeErrors(err, goa.ValidateFormat("uid", uid, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var version *string
	{
		if meetingServiceDeleteMeetingVersion != "" {
			version = &meetingServiceDeleteMeetingVersion
			if !(*version == "1") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", *version, []any{"1"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var bearerToken *string
	{
		if meetingServiceDeleteMeetingBearerToken != "" {
			bearerToken = &meetingServiceDeleteMeetingBearerToken
		}
	}
	var etag *string
	{
		if meetingServiceDeleteMeetingEtag != "" {
			etag = &meetingServiceDeleteMeetingEtag
		}
	}
	v := &meetingservice.DeleteMeetingPayload{}
	v.UID = &uid
	v.Version = version
	v.BearerToken = bearerToken
	v.Etag = etag

	return v, nil
}

// BuildGetMeetingRegistrantsPayload builds the payload for the Meeting Service
// get-meeting-registrants endpoint from CLI flags.
func BuildGetMeetingRegistrantsPayload(meetingServiceGetMeetingRegistrantsUID string, meetingServiceGetMeetingRegistrantsVersion string, meetingServiceGetMeetingRegistrantsBearerToken string) (*meetingservice.GetMeetingRegistrantsPayload, error) {
	var err error
	var uid string
	{
		uid = meetingServiceGetMeetingRegistrantsUID
		err = goa.MergeErrors(err, goa.ValidateFormat("uid", uid, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var version *string
	{
		if meetingServiceGetMeetingRegistrantsVersion != "" {
			version = &meetingServiceGetMeetingRegistrantsVersion
			if !(*version == "1") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", *version, []any{"1"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var bearerToken *string
	{
		if meetingServiceGetMeetingRegistrantsBearerToken != "" {
			bearerToken = &meetingServiceGetMeetingRegistrantsBearerToken
		}
	}
	v := &meetingservice.GetMeetingRegistrantsPayload{}
	v.UID = &uid
	v.Version = version
	v.BearerToken = bearerToken

	return v, nil
}

// BuildCreateMeetingRegistrantPayload builds the payload for the Meeting
// Service create-meeting-registrant endpoint from CLI flags.
func BuildCreateMeetingRegistrantPayload(meetingServiceCreateMeetingRegistrantBody string, meetingServiceCreateMeetingRegistrantUID string, meetingServiceCreateMeetingRegistrantVersion string, meetingServiceCreateMeetingRegistrantBearerToken string) (*meetingservice.CreateMeetingRegistrantPayload, error) {
	var err error
	var body CreateMeetingRegistrantRequestBody
	{
		err = json.Unmarshal([]byte(meetingServiceCreateMeetingRegistrantBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"avatar_url\": \"https://example.com/avatar.jpg\",\n      \"email\": \"user@example.com\",\n      \"first_name\": \"John\",\n      \"host\": false,\n      \"job_title\": \"Software Engineer\",\n      \"last_name\": \"Doe\",\n      \"meeting_uid\": \"7cad5a8d-19d0-41a4-81a6-043453daf9ee\",\n      \"occurrence_id\": \"1640995200\",\n      \"org_is_project_member\": true,\n      \"user_id\": \"Assumenda molestias veritatis eos et quod ea.\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.meeting_uid", body.MeetingUID, goa.FormatUUID))
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", body.Email, goa.FormatEmail))
		if utf8.RuneCountInString(body.FirstName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.first_name", body.FirstName, utf8.RuneCountInString(body.FirstName), 1, true))
		}
		if utf8.RuneCountInString(body.FirstName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.first_name", body.FirstName, utf8.RuneCountInString(body.FirstName), 100, false))
		}
		if utf8.RuneCountInString(body.LastName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.last_name", body.LastName, utf8.RuneCountInString(body.LastName), 1, true))
		}
		if utf8.RuneCountInString(body.LastName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.last_name", body.LastName, utf8.RuneCountInString(body.LastName), 100, false))
		}
		if body.OccurrenceID != nil {
			err = goa.MergeErrors(err, goa.ValidatePattern("body.occurrence_id", *body.OccurrenceID, "^[0-9]*$"))
		}
		if body.AvatarURL != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.avatar_url", *body.AvatarURL, goa.FormatURI))
		}
		if err != nil {
			return nil, err
		}
	}
	var uid string
	{
		uid = meetingServiceCreateMeetingRegistrantUID
		err = goa.MergeErrors(err, goa.ValidateFormat("uid", uid, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var version *string
	{
		if meetingServiceCreateMeetingRegistrantVersion != "" {
			version = &meetingServiceCreateMeetingRegistrantVersion
			if !(*version == "1") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", *version, []any{"1"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var bearerToken *string
	{
		if meetingServiceCreateMeetingRegistrantBearerToken != "" {
			bearerToken = &meetingServiceCreateMeetingRegistrantBearerToken
		}
	}
	v := &meetingservice.CreateMeetingRegistrantPayload{
		MeetingUID:         body.MeetingUID,
		Email:              body.Email,
		FirstName:          body.FirstName,
		LastName:           body.LastName,
		Host:               body.Host,
		JobTitle:           body.JobTitle,
		OccurrenceID:       body.OccurrenceID,
		OrgIsProjectMember: body.OrgIsProjectMember,
		AvatarURL:          body.AvatarURL,
		UserID:             body.UserID,
	}
	v.UID = &uid
	v.Version = version
	v.BearerToken = bearerToken

	return v, nil
}

// BuildGetMeetingRegistrantPayload builds the payload for the Meeting Service
// get-meeting-registrant endpoint from CLI flags.
func BuildGetMeetingRegistrantPayload(meetingServiceGetMeetingRegistrantMeetingUID string, meetingServiceGetMeetingRegistrantUID string, meetingServiceGetMeetingRegistrantVersion string, meetingServiceGetMeetingRegistrantBearerToken string) (*meetingservice.GetMeetingRegistrantPayload, error) {
	var err error
	var meetingUID string
	{
		meetingUID = meetingServiceGetMeetingRegistrantMeetingUID
		err = goa.MergeErrors(err, goa.ValidateFormat("meeting_uid", meetingUID, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var uid string
	{
		uid = meetingServiceGetMeetingRegistrantUID
		err = goa.MergeErrors(err, goa.ValidateFormat("uid", uid, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var version *string
	{
		if meetingServiceGetMeetingRegistrantVersion != "" {
			version = &meetingServiceGetMeetingRegistrantVersion
			if !(*version == "1") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", *version, []any{"1"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var bearerToken *string
	{
		if meetingServiceGetMeetingRegistrantBearerToken != "" {
			bearerToken = &meetingServiceGetMeetingRegistrantBearerToken
		}
	}
	v := &meetingservice.GetMeetingRegistrantPayload{}
	v.MeetingUID = &meetingUID
	v.UID = &uid
	v.Version = version
	v.BearerToken = bearerToken

	return v, nil
}

// BuildUpdateMeetingRegistrantPayload builds the payload for the Meeting
// Service update-meeting-registrant endpoint from CLI flags.
func BuildUpdateMeetingRegistrantPayload(meetingServiceUpdateMeetingRegistrantBody string, meetingServiceUpdateMeetingRegistrantMeetingUID string, meetingServiceUpdateMeetingRegistrantUID string, meetingServiceUpdateMeetingRegistrantVersion string, meetingServiceUpdateMeetingRegistrantBearerToken string, meetingServiceUpdateMeetingRegistrantEtag string) (*meetingservice.UpdateMeetingRegistrantPayload, error) {
	var err error
	var body UpdateMeetingRegistrantRequestBody
	{
		err = json.Unmarshal([]byte(meetingServiceUpdateMeetingRegistrantBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"avatar_url\": \"https://example.com/avatar.jpg\",\n      \"email\": \"user@example.com\",\n      \"first_name\": \"John\",\n      \"host\": true,\n      \"job_title\": \"Software Engineer\",\n      \"last_name\": \"Doe\",\n      \"occurrence_id\": \"1640995200\",\n      \"org_is_project_member\": false,\n      \"user_id\": \"Nihil et magni.\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", body.Email, goa.FormatEmail))
		if utf8.RuneCountInString(body.FirstName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.first_name", body.FirstName, utf8.RuneCountInString(body.FirstName), 1, true))
		}
		if utf8.RuneCountInString(body.FirstName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.first_name", body.FirstName, utf8.RuneCountInString(body.FirstName), 100, false))
		}
		if utf8.RuneCountInString(body.LastName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.last_name", body.LastName, utf8.RuneCountInString(body.LastName), 1, true))
		}
		if utf8.RuneCountInString(body.LastName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.last_name", body.LastName, utf8.RuneCountInString(body.LastName), 100, false))
		}
		if body.OccurrenceID != nil {
			err = goa.MergeErrors(err, goa.ValidatePattern("body.occurrence_id", *body.OccurrenceID, "^[0-9]*$"))
		}
		if body.AvatarURL != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.avatar_url", *body.AvatarURL, goa.FormatURI))
		}
		if err != nil {
			return nil, err
		}
	}
	var meetingUID string
	{
		meetingUID = meetingServiceUpdateMeetingRegistrantMeetingUID
		err = goa.MergeErrors(err, goa.ValidateFormat("meeting_uid", meetingUID, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var uid string
	{
		uid = meetingServiceUpdateMeetingRegistrantUID
		err = goa.MergeErrors(err, goa.ValidateFormat("uid", uid, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var version *string
	{
		if meetingServiceUpdateMeetingRegistrantVersion != "" {
			version = &meetingServiceUpdateMeetingRegistrantVersion
			if !(*version == "1") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", *version, []any{"1"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var bearerToken *string
	{
		if meetingServiceUpdateMeetingRegistrantBearerToken != "" {
			bearerToken = &meetingServiceUpdateMeetingRegistrantBearerToken
		}
	}
	var etag *string
	{
		if meetingServiceUpdateMeetingRegistrantEtag != "" {
			etag = &meetingServiceUpdateMeetingRegistrantEtag
		}
	}
	v := &meetingservice.UpdateMeetingRegistrantPayload{
		Email:              body.Email,
		FirstName:          body.FirstName,
		LastName:           body.LastName,
		Host:               body.Host,
		JobTitle:           body.JobTitle,
		OccurrenceID:       body.OccurrenceID,
		OrgIsProjectMember: body.OrgIsProjectMember,
		AvatarURL:          body.AvatarURL,
		UserID:             body.UserID,
	}
	v.MeetingUID = meetingUID
	v.UID = &uid
	v.Version = version
	v.BearerToken = bearerToken
	v.Etag = etag

	return v, nil
}

// BuildDeleteMeetingRegistrantPayload builds the payload for the Meeting
// Service delete-meeting-registrant endpoint from CLI flags.
func BuildDeleteMeetingRegistrantPayload(meetingServiceDeleteMeetingRegistrantMeetingUID string, meetingServiceDeleteMeetingRegistrantUID string, meetingServiceDeleteMeetingRegistrantVersion string, meetingServiceDeleteMeetingRegistrantBearerToken string, meetingServiceDeleteMeetingRegistrantEtag string) (*meetingservice.DeleteMeetingRegistrantPayload, error) {
	var err error
	var meetingUID string
	{
		meetingUID = meetingServiceDeleteMeetingRegistrantMeetingUID
		err = goa.MergeErrors(err, goa.ValidateFormat("meeting_uid", meetingUID, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var uid string
	{
		uid = meetingServiceDeleteMeetingRegistrantUID
		err = goa.MergeErrors(err, goa.ValidateFormat("uid", uid, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var version *string
	{
		if meetingServiceDeleteMeetingRegistrantVersion != "" {
			version = &meetingServiceDeleteMeetingRegistrantVersion
			if !(*version == "1") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", *version, []any{"1"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var bearerToken *string
	{
		if meetingServiceDeleteMeetingRegistrantBearerToken != "" {
			bearerToken = &meetingServiceDeleteMeetingRegistrantBearerToken
		}
	}
	var etag *string
	{
		if meetingServiceDeleteMeetingRegistrantEtag != "" {
			etag = &meetingServiceDeleteMeetingRegistrantEtag
		}
	}
	v := &meetingservice.DeleteMeetingRegistrantPayload{}
	v.MeetingUID = &meetingUID
	v.UID = &uid
	v.Version = version
	v.BearerToken = bearerToken
	v.Etag = etag

	return v, nil
}
