// Code generated by goa v3.21.1, DO NOT EDIT.
//
// Meeting Service HTTP client CLI support package
//
// Command:
// $ goa gen github.com/linuxfoundation/lfx-v2-meeting-service/design

package client

import (
	meetingservice "github.com/linuxfoundation/lfx-v2-meeting-service/gen/meeting_service"
	goa "goa.design/goa/v3/pkg"
)

// BuildGetMeetingsPayload builds the payload for the Meeting Service
// get-meetings endpoint from CLI flags.
func BuildGetMeetingsPayload(meetingServiceGetMeetingsVersion string, meetingServiceGetMeetingsBearerToken string) (*meetingservice.GetMeetingsPayload, error) {
	var err error
	var version *string
	{
		if meetingServiceGetMeetingsVersion != "" {
			version = &meetingServiceGetMeetingsVersion
			if !(*version == "1") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", *version, []any{"1"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var bearerToken *string
	{
		if meetingServiceGetMeetingsBearerToken != "" {
			bearerToken = &meetingServiceGetMeetingsBearerToken
		}
	}
	v := &meetingservice.GetMeetingsPayload{}
	v.Version = version
	v.BearerToken = bearerToken

	return v, nil
}

// BuildCreateMeetingPayload builds the payload for the Meeting Service
// create-meeting endpoint from CLI flags.
func BuildCreateMeetingPayload(meetingServiceCreateMeetingVersion string, meetingServiceCreateMeetingBearerToken string) (*meetingservice.CreateMeetingPayload, error) {
	var err error
	var version *string
	{
		if meetingServiceCreateMeetingVersion != "" {
			version = &meetingServiceCreateMeetingVersion
			if !(*version == "1") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", *version, []any{"1"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var bearerToken *string
	{
		if meetingServiceCreateMeetingBearerToken != "" {
			bearerToken = &meetingServiceCreateMeetingBearerToken
		}
	}
	v := &meetingservice.CreateMeetingPayload{}
	v.Version = version
	v.BearerToken = bearerToken

	return v, nil
}

// BuildGetMeetingPayload builds the payload for the Meeting Service
// get-meeting endpoint from CLI flags.
func BuildGetMeetingPayload(meetingServiceGetMeetingUID string, meetingServiceGetMeetingVersion string, meetingServiceGetMeetingBearerToken string) (*meetingservice.GetMeetingPayload, error) {
	var err error
	var uid string
	{
		uid = meetingServiceGetMeetingUID
		err = goa.MergeErrors(err, goa.ValidateFormat("uid", uid, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var version *string
	{
		if meetingServiceGetMeetingVersion != "" {
			version = &meetingServiceGetMeetingVersion
			if !(*version == "1") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", *version, []any{"1"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var bearerToken *string
	{
		if meetingServiceGetMeetingBearerToken != "" {
			bearerToken = &meetingServiceGetMeetingBearerToken
		}
	}
	v := &meetingservice.GetMeetingPayload{}
	v.UID = &uid
	v.Version = version
	v.BearerToken = bearerToken

	return v, nil
}

// BuildUpdateMeetingPayload builds the payload for the Meeting Service
// update-meeting endpoint from CLI flags.
func BuildUpdateMeetingPayload(meetingServiceUpdateMeetingUID string, meetingServiceUpdateMeetingVersion string, meetingServiceUpdateMeetingBearerToken string, meetingServiceUpdateMeetingEtag string) (*meetingservice.UpdateMeetingPayload, error) {
	var err error
	var uid string
	{
		uid = meetingServiceUpdateMeetingUID
	}
	var version *string
	{
		if meetingServiceUpdateMeetingVersion != "" {
			version = &meetingServiceUpdateMeetingVersion
			if !(*version == "1") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", *version, []any{"1"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var bearerToken *string
	{
		if meetingServiceUpdateMeetingBearerToken != "" {
			bearerToken = &meetingServiceUpdateMeetingBearerToken
		}
	}
	var etag *string
	{
		if meetingServiceUpdateMeetingEtag != "" {
			etag = &meetingServiceUpdateMeetingEtag
		}
	}
	v := &meetingservice.UpdateMeetingPayload{}
	v.UID = uid
	v.Version = version
	v.BearerToken = bearerToken
	v.Etag = etag

	return v, nil
}

// BuildDeleteMeetingPayload builds the payload for the Meeting Service
// delete-meeting endpoint from CLI flags.
func BuildDeleteMeetingPayload(meetingServiceDeleteMeetingUID string, meetingServiceDeleteMeetingVersion string, meetingServiceDeleteMeetingBearerToken string, meetingServiceDeleteMeetingEtag string) (*meetingservice.DeleteMeetingPayload, error) {
	var err error
	var uid string
	{
		uid = meetingServiceDeleteMeetingUID
		err = goa.MergeErrors(err, goa.ValidateFormat("uid", uid, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var version *string
	{
		if meetingServiceDeleteMeetingVersion != "" {
			version = &meetingServiceDeleteMeetingVersion
			if !(*version == "1") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", *version, []any{"1"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var bearerToken *string
	{
		if meetingServiceDeleteMeetingBearerToken != "" {
			bearerToken = &meetingServiceDeleteMeetingBearerToken
		}
	}
	var etag *string
	{
		if meetingServiceDeleteMeetingEtag != "" {
			etag = &meetingServiceDeleteMeetingEtag
		}
	}
	v := &meetingservice.DeleteMeetingPayload{}
	v.UID = &uid
	v.Version = version
	v.BearerToken = bearerToken
	v.Etag = etag

	return v, nil
}

// BuildGetMeetingRegistrantsPayload builds the payload for the Meeting Service
// get-meeting-registrants endpoint from CLI flags.
func BuildGetMeetingRegistrantsPayload(meetingServiceGetMeetingRegistrantsUID string, meetingServiceGetMeetingRegistrantsVersion string, meetingServiceGetMeetingRegistrantsBearerToken string) (*meetingservice.GetMeetingRegistrantsPayload, error) {
	var err error
	var uid string
	{
		uid = meetingServiceGetMeetingRegistrantsUID
		err = goa.MergeErrors(err, goa.ValidateFormat("uid", uid, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var version *string
	{
		if meetingServiceGetMeetingRegistrantsVersion != "" {
			version = &meetingServiceGetMeetingRegistrantsVersion
			if !(*version == "1") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", *version, []any{"1"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var bearerToken *string
	{
		if meetingServiceGetMeetingRegistrantsBearerToken != "" {
			bearerToken = &meetingServiceGetMeetingRegistrantsBearerToken
		}
	}
	v := &meetingservice.GetMeetingRegistrantsPayload{}
	v.UID = &uid
	v.Version = version
	v.BearerToken = bearerToken

	return v, nil
}

// BuildCreateMeetingRegistrantPayload builds the payload for the Meeting
// Service create-meeting-registrant endpoint from CLI flags.
func BuildCreateMeetingRegistrantPayload(meetingServiceCreateMeetingRegistrantUID string, meetingServiceCreateMeetingRegistrantVersion string, meetingServiceCreateMeetingRegistrantBearerToken string) (*meetingservice.CreateMeetingRegistrantPayload, error) {
	var err error
	var uid string
	{
		uid = meetingServiceCreateMeetingRegistrantUID
		err = goa.MergeErrors(err, goa.ValidateFormat("uid", uid, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var version *string
	{
		if meetingServiceCreateMeetingRegistrantVersion != "" {
			version = &meetingServiceCreateMeetingRegistrantVersion
			if !(*version == "1") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", *version, []any{"1"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var bearerToken *string
	{
		if meetingServiceCreateMeetingRegistrantBearerToken != "" {
			bearerToken = &meetingServiceCreateMeetingRegistrantBearerToken
		}
	}
	v := &meetingservice.CreateMeetingRegistrantPayload{}
	v.UID = &uid
	v.Version = version
	v.BearerToken = bearerToken

	return v, nil
}

// BuildGetMeetingRegistrantPayload builds the payload for the Meeting Service
// get-meeting-registrant endpoint from CLI flags.
func BuildGetMeetingRegistrantPayload(meetingServiceGetMeetingRegistrantMeetingUID string, meetingServiceGetMeetingRegistrantUID string, meetingServiceGetMeetingRegistrantVersion string, meetingServiceGetMeetingRegistrantBearerToken string) (*meetingservice.GetMeetingRegistrantPayload, error) {
	var err error
	var meetingUID string
	{
		meetingUID = meetingServiceGetMeetingRegistrantMeetingUID
		err = goa.MergeErrors(err, goa.ValidateFormat("meeting_uid", meetingUID, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var uid string
	{
		uid = meetingServiceGetMeetingRegistrantUID
		err = goa.MergeErrors(err, goa.ValidateFormat("uid", uid, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var version *string
	{
		if meetingServiceGetMeetingRegistrantVersion != "" {
			version = &meetingServiceGetMeetingRegistrantVersion
			if !(*version == "1") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", *version, []any{"1"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var bearerToken *string
	{
		if meetingServiceGetMeetingRegistrantBearerToken != "" {
			bearerToken = &meetingServiceGetMeetingRegistrantBearerToken
		}
	}
	v := &meetingservice.GetMeetingRegistrantPayload{}
	v.MeetingUID = &meetingUID
	v.UID = &uid
	v.Version = version
	v.BearerToken = bearerToken

	return v, nil
}

// BuildUpdateMeetingRegistrantPayload builds the payload for the Meeting
// Service update-meeting-registrant endpoint from CLI flags.
func BuildUpdateMeetingRegistrantPayload(meetingServiceUpdateMeetingRegistrantMeetingUID string, meetingServiceUpdateMeetingRegistrantUID string, meetingServiceUpdateMeetingRegistrantVersion string, meetingServiceUpdateMeetingRegistrantBearerToken string, meetingServiceUpdateMeetingRegistrantEtag string) (*meetingservice.UpdateMeetingRegistrantPayload, error) {
	var err error
	var meetingUID string
	{
		meetingUID = meetingServiceUpdateMeetingRegistrantMeetingUID
		err = goa.MergeErrors(err, goa.ValidateFormat("meeting_uid", meetingUID, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var uid string
	{
		uid = meetingServiceUpdateMeetingRegistrantUID
		err = goa.MergeErrors(err, goa.ValidateFormat("uid", uid, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var version *string
	{
		if meetingServiceUpdateMeetingRegistrantVersion != "" {
			version = &meetingServiceUpdateMeetingRegistrantVersion
			if !(*version == "1") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", *version, []any{"1"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var bearerToken *string
	{
		if meetingServiceUpdateMeetingRegistrantBearerToken != "" {
			bearerToken = &meetingServiceUpdateMeetingRegistrantBearerToken
		}
	}
	var etag *string
	{
		if meetingServiceUpdateMeetingRegistrantEtag != "" {
			etag = &meetingServiceUpdateMeetingRegistrantEtag
		}
	}
	v := &meetingservice.UpdateMeetingRegistrantPayload{}
	v.MeetingUID = meetingUID
	v.UID = &uid
	v.Version = version
	v.BearerToken = bearerToken
	v.Etag = etag

	return v, nil
}

// BuildDeleteMeetingRegistrantPayload builds the payload for the Meeting
// Service delete-meeting-registrant endpoint from CLI flags.
func BuildDeleteMeetingRegistrantPayload(meetingServiceDeleteMeetingRegistrantMeetingUID string, meetingServiceDeleteMeetingRegistrantUID string, meetingServiceDeleteMeetingRegistrantVersion string, meetingServiceDeleteMeetingRegistrantBearerToken string, meetingServiceDeleteMeetingRegistrantEtag string) (*meetingservice.DeleteMeetingRegistrantPayload, error) {
	var err error
	var meetingUID string
	{
		meetingUID = meetingServiceDeleteMeetingRegistrantMeetingUID
		err = goa.MergeErrors(err, goa.ValidateFormat("meeting_uid", meetingUID, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var uid string
	{
		uid = meetingServiceDeleteMeetingRegistrantUID
		err = goa.MergeErrors(err, goa.ValidateFormat("uid", uid, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	var version *string
	{
		if meetingServiceDeleteMeetingRegistrantVersion != "" {
			version = &meetingServiceDeleteMeetingRegistrantVersion
			if !(*version == "1") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("version", *version, []any{"1"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var bearerToken *string
	{
		if meetingServiceDeleteMeetingRegistrantBearerToken != "" {
			bearerToken = &meetingServiceDeleteMeetingRegistrantBearerToken
		}
	}
	var etag *string
	{
		if meetingServiceDeleteMeetingRegistrantEtag != "" {
			etag = &meetingServiceDeleteMeetingRegistrantEtag
		}
	}
	v := &meetingservice.DeleteMeetingRegistrantPayload{}
	v.MeetingUID = &meetingUID
	v.UID = &uid
	v.Version = version
	v.BearerToken = bearerToken
	v.Etag = etag

	return v, nil
}
