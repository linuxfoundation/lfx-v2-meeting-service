// Code generated by goa v3.21.1, DO NOT EDIT.
//
// Meeting Service HTTP client types
//
// Command:
// $ goa gen github.com/linuxfoundation/lfx-v2-meeting-service/design

package client

import (
	"unicode/utf8"

	meetingservice "github.com/linuxfoundation/lfx-v2-meeting-service/gen/meeting_service"
	goa "goa.design/goa/v3/pkg"
)

// CreateMeetingRequestBody is the type of the "Meeting Service" service
// "create-meeting" endpoint HTTP request body.
type CreateMeetingRequestBody struct {
	// The UID of the LF project
	ProjectUID string `form:"project_uid" json:"project_uid" xml:"project_uid"`
	// The start time of the meeting in RFC3339 format
	StartTime string `form:"start_time" json:"start_time" xml:"start_time"`
	// The duration of the meeting in minutes
	Duration int `form:"duration" json:"duration" xml:"duration"`
	// The timezone of the meeting (e.g. 'America/New_York')
	Timezone string `form:"timezone" json:"timezone" xml:"timezone"`
	// The recurrence of the meeting
	Recurrence *RecurrenceRequestBody `form:"recurrence,omitempty" json:"recurrence,omitempty" xml:"recurrence,omitempty"`
	// The title of the meeting
	Title string `form:"title" json:"title" xml:"title"`
	// The description of the meeting
	Description string `form:"description" json:"description" xml:"description"`
	// The committees associated with the meeting
	Committees []*CommitteeRequestBody `form:"committees,omitempty" json:"committees,omitempty" xml:"committees,omitempty"`
	// The platform name of where the meeting is hosted
	Platform *string `form:"platform,omitempty" json:"platform,omitempty" xml:"platform,omitempty"`
	// The number of minutes that users are allowed to join the meeting early
	// without being kicked out
	EarlyJoinTimeMinutes *int `form:"early_join_time_minutes,omitempty" json:"early_join_time_minutes,omitempty" xml:"early_join_time_minutes,omitempty"`
	// The type of meeting. This is usually dependent on the committee(s)
	// associated with the meeting
	MeetingType *string `form:"meeting_type,omitempty" json:"meeting_type,omitempty" xml:"meeting_type,omitempty"`
	// The visibility of the meeting's existence to other users
	Visibility *string `form:"visibility,omitempty" json:"visibility,omitempty" xml:"visibility,omitempty"`
	// The restrictedness of joining the meeting (i.e. is the meeting restricted to
	// only invited users or anyone?)
	Restricted *bool `form:"restricted,omitempty" json:"restricted,omitempty" xml:"restricted,omitempty"`
	// The visibility of artifacts to users (e.g. public, only for registrants,
	// only for hosts)
	ArtifactVisibility *string `form:"artifact_visibility,omitempty" json:"artifact_visibility,omitempty" xml:"artifact_visibility,omitempty"`
	// Whether recording is enabled for the meeting
	RecordingEnabled *bool `form:"recording_enabled,omitempty" json:"recording_enabled,omitempty" xml:"recording_enabled,omitempty"`
	// Whether transcription is enabled for the meeting
	TranscriptEnabled *bool `form:"transcript_enabled,omitempty" json:"transcript_enabled,omitempty" xml:"transcript_enabled,omitempty"`
	// Whether automatic youtube uploading is enabled for the meeting
	YoutubeUploadEnabled *bool `form:"youtube_upload_enabled,omitempty" json:"youtube_upload_enabled,omitempty" xml:"youtube_upload_enabled,omitempty"`
	// The organizers of the meeting. This is a list of LFIDs of the meeting
	// organizers.
	Organizers []string `form:"organizers,omitempty" json:"organizers,omitempty" xml:"organizers,omitempty"`
	// For zoom platform meetings: the configuration for the meeting
	ZoomConfig *ZoomConfigPostRequestBody `form:"zoom_config,omitempty" json:"zoom_config,omitempty" xml:"zoom_config,omitempty"`
}

// UpdateMeetingBaseRequestBody is the type of the "Meeting Service" service
// "update-meeting-base" endpoint HTTP request body.
type UpdateMeetingBaseRequestBody struct {
	// The UID of the LF project
	ProjectUID string `form:"project_uid" json:"project_uid" xml:"project_uid"`
	// The start time of the meeting in RFC3339 format
	StartTime string `form:"start_time" json:"start_time" xml:"start_time"`
	// The duration of the meeting in minutes
	Duration int `form:"duration" json:"duration" xml:"duration"`
	// The timezone of the meeting (e.g. 'America/New_York')
	Timezone string `form:"timezone" json:"timezone" xml:"timezone"`
	// The recurrence of the meeting
	Recurrence *RecurrenceRequestBody `form:"recurrence,omitempty" json:"recurrence,omitempty" xml:"recurrence,omitempty"`
	// The title of the meeting
	Title string `form:"title" json:"title" xml:"title"`
	// The description of the meeting
	Description string `form:"description" json:"description" xml:"description"`
	// The committees associated with the meeting
	Committees []*CommitteeRequestBody `form:"committees,omitempty" json:"committees,omitempty" xml:"committees,omitempty"`
	// The platform name of where the meeting is hosted
	Platform *string `form:"platform,omitempty" json:"platform,omitempty" xml:"platform,omitempty"`
	// The number of minutes that users are allowed to join the meeting early
	// without being kicked out
	EarlyJoinTimeMinutes *int `form:"early_join_time_minutes,omitempty" json:"early_join_time_minutes,omitempty" xml:"early_join_time_minutes,omitempty"`
	// The type of meeting. This is usually dependent on the committee(s)
	// associated with the meeting
	MeetingType *string `form:"meeting_type,omitempty" json:"meeting_type,omitempty" xml:"meeting_type,omitempty"`
	// The visibility of the meeting's existence to other users
	Visibility *string `form:"visibility,omitempty" json:"visibility,omitempty" xml:"visibility,omitempty"`
	// The restrictedness of joining the meeting (i.e. is the meeting restricted to
	// only invited users or anyone?)
	Restricted *bool `form:"restricted,omitempty" json:"restricted,omitempty" xml:"restricted,omitempty"`
	// The visibility of artifacts to users (e.g. public, only for registrants,
	// only for hosts)
	ArtifactVisibility *string `form:"artifact_visibility,omitempty" json:"artifact_visibility,omitempty" xml:"artifact_visibility,omitempty"`
	// Whether recording is enabled for the meeting
	RecordingEnabled *bool `form:"recording_enabled,omitempty" json:"recording_enabled,omitempty" xml:"recording_enabled,omitempty"`
	// Whether transcription is enabled for the meeting
	TranscriptEnabled *bool `form:"transcript_enabled,omitempty" json:"transcript_enabled,omitempty" xml:"transcript_enabled,omitempty"`
	// Whether automatic youtube uploading is enabled for the meeting
	YoutubeUploadEnabled *bool `form:"youtube_upload_enabled,omitempty" json:"youtube_upload_enabled,omitempty" xml:"youtube_upload_enabled,omitempty"`
	// For zoom platform meetings: the configuration for the meeting
	ZoomConfig *ZoomConfigPostRequestBody `form:"zoom_config,omitempty" json:"zoom_config,omitempty" xml:"zoom_config,omitempty"`
}

// UpdateMeetingSettingsRequestBody is the type of the "Meeting Service"
// service "update-meeting-settings" endpoint HTTP request body.
type UpdateMeetingSettingsRequestBody struct {
	// The organizers of the meeting. This is a list of LFIDs of the meeting
	// organizers.
	Organizers []string `form:"organizers,omitempty" json:"organizers,omitempty" xml:"organizers,omitempty"`
}

// CreateMeetingRegistrantRequestBody is the type of the "Meeting Service"
// service "create-meeting-registrant" endpoint HTTP request body.
type CreateMeetingRegistrantRequestBody struct {
	// User's email address
	Email string `form:"email" json:"email" xml:"email"`
	// User's first name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// User's last name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// If user should have access as a meeting host
	Host *bool `form:"host,omitempty" json:"host,omitempty" xml:"host,omitempty"`
	// User's job title
	JobTitle *string `form:"job_title,omitempty" json:"job_title,omitempty" xml:"job_title,omitempty"`
	// User's organization
	OrgName *string `form:"org_name,omitempty" json:"org_name,omitempty" xml:"org_name,omitempty"`
	// The ID of the specific occurrence the user should be invited to. If blank,
	// user is invited to all occurrences
	OccurrenceID *string `form:"occurrence_id,omitempty" json:"occurrence_id,omitempty" xml:"occurrence_id,omitempty"`
	// User's avatar URL
	AvatarURL *string `form:"avatar_url,omitempty" json:"avatar_url,omitempty" xml:"avatar_url,omitempty"`
	// User's LF ID
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
}

// UpdateMeetingRegistrantRequestBody is the type of the "Meeting Service"
// service "update-meeting-registrant" endpoint HTTP request body.
type UpdateMeetingRegistrantRequestBody struct {
	// User's email address
	Email string `form:"email" json:"email" xml:"email"`
	// User's first name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// User's last name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// If user should have access as a meeting host
	Host *bool `form:"host,omitempty" json:"host,omitempty" xml:"host,omitempty"`
	// User's job title
	JobTitle *string `form:"job_title,omitempty" json:"job_title,omitempty" xml:"job_title,omitempty"`
	// User's organization
	OrgName *string `form:"org_name,omitempty" json:"org_name,omitempty" xml:"org_name,omitempty"`
	// The ID of the specific occurrence the user should be invited to. If blank,
	// user is invited to all occurrences
	OccurrenceID *string `form:"occurrence_id,omitempty" json:"occurrence_id,omitempty" xml:"occurrence_id,omitempty"`
	// User's avatar URL
	AvatarURL *string `form:"avatar_url,omitempty" json:"avatar_url,omitempty" xml:"avatar_url,omitempty"`
	// User's LF ID
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
}

// ZoomWebhookRequestBody is the type of the "Meeting Service" service
// "zoom-webhook" endpoint HTTP request body.
type ZoomWebhookRequestBody struct {
	// The type of event
	Event string `form:"event" json:"event" xml:"event"`
	// Event timestamp in milliseconds
	EventTs int64 `form:"event_ts" json:"event_ts" xml:"event_ts"`
	// Contains meeting, participant, or recording data depending on event type
	Payload any `form:"payload" json:"payload" xml:"payload"`
}

// CreatePastMeetingRequestBody is the type of the "Meeting Service" service
// "create-past-meeting" endpoint HTTP request body.
type CreatePastMeetingRequestBody struct {
	// The UID of the original meeting
	MeetingUID string `form:"meeting_uid" json:"meeting_uid" xml:"meeting_uid"`
	// The occurrence ID for recurring meetings
	OccurrenceID *string `form:"occurrence_id,omitempty" json:"occurrence_id,omitempty" xml:"occurrence_id,omitempty"`
	// The UID of the LF project
	ProjectUID string `form:"project_uid" json:"project_uid" xml:"project_uid"`
	// The scheduled start time of the past meeting
	ScheduledStartTime string `form:"scheduled_start_time" json:"scheduled_start_time" xml:"scheduled_start_time"`
	// The scheduled end time of the past meeting
	ScheduledEndTime string `form:"scheduled_end_time" json:"scheduled_end_time" xml:"scheduled_end_time"`
	// The duration of the meeting in minutes
	Duration int `form:"duration" json:"duration" xml:"duration"`
	// The timezone of the meeting (e.g. 'America/New_York')
	Timezone string `form:"timezone" json:"timezone" xml:"timezone"`
	// The recurrence of the meeting
	Recurrence *RecurrenceRequestBody `form:"recurrence,omitempty" json:"recurrence,omitempty" xml:"recurrence,omitempty"`
	// The title of the meeting
	Title string `form:"title" json:"title" xml:"title"`
	// The description of the meeting
	Description string `form:"description" json:"description" xml:"description"`
	// The committees associated with the meeting
	Committees []*CommitteeRequestBody `form:"committees,omitempty" json:"committees,omitempty" xml:"committees,omitempty"`
	// The platform name of where the meeting is hosted
	Platform string `form:"platform" json:"platform" xml:"platform"`
	// The ID of the meeting in the platform (e.g. Zoom meeting ID)
	PlatformMeetingID *string `form:"platform_meeting_id,omitempty" json:"platform_meeting_id,omitempty" xml:"platform_meeting_id,omitempty"`
	// The number of minutes that users are allowed to join the meeting early
	// without being kicked out
	EarlyJoinTimeMinutes *int `form:"early_join_time_minutes,omitempty" json:"early_join_time_minutes,omitempty" xml:"early_join_time_minutes,omitempty"`
	// The type of meeting. This is usually dependent on the committee(s)
	// associated with the meeting
	MeetingType *string `form:"meeting_type,omitempty" json:"meeting_type,omitempty" xml:"meeting_type,omitempty"`
	// The visibility of the meeting's existence to other users
	Visibility *string `form:"visibility,omitempty" json:"visibility,omitempty" xml:"visibility,omitempty"`
	// The restrictedness of joining the meeting (i.e. is the meeting restricted to
	// only invited users or anyone?)
	Restricted *bool `form:"restricted,omitempty" json:"restricted,omitempty" xml:"restricted,omitempty"`
	// The visibility of artifacts to users (e.g. public, only for registrants,
	// only for hosts)
	ArtifactVisibility *string `form:"artifact_visibility,omitempty" json:"artifact_visibility,omitempty" xml:"artifact_visibility,omitempty"`
	// The public join URL for participants to join the meeting via the LFX
	// platform (e.g.
	// 'https://zoom-lfx.platform.linuxfoundation.org/meeting/12343245463')
	PublicLink *string `form:"public_link,omitempty" json:"public_link,omitempty" xml:"public_link,omitempty"`
	// Whether recording is enabled for the meeting
	RecordingEnabled *bool `form:"recording_enabled,omitempty" json:"recording_enabled,omitempty" xml:"recording_enabled,omitempty"`
	// Whether transcription is enabled for the meeting
	TranscriptEnabled *bool `form:"transcript_enabled,omitempty" json:"transcript_enabled,omitempty" xml:"transcript_enabled,omitempty"`
	// Whether automatic youtube uploading is enabled for the meeting
	YoutubeUploadEnabled *bool `form:"youtube_upload_enabled,omitempty" json:"youtube_upload_enabled,omitempty" xml:"youtube_upload_enabled,omitempty"`
	// For zoom platform meetings: the configuration for the meeting
	ZoomConfig *ZoomConfigFullRequestBody `form:"zoom_config,omitempty" json:"zoom_config,omitempty" xml:"zoom_config,omitempty"`
	// Sessions represent individual start/end periods if a meeting was stopped and
	// restarted
	Sessions []*SessionRequestBody `form:"sessions,omitempty" json:"sessions,omitempty" xml:"sessions,omitempty"`
}

// CreatePastMeetingParticipantRequestBody is the type of the "Meeting Service"
// service "create-past-meeting-participant" endpoint HTTP request body.
type CreatePastMeetingParticipantRequestBody struct {
	// The unique identifier of the past meeting
	PastMeetingUID string `form:"past_meeting_uid" json:"past_meeting_uid" xml:"past_meeting_uid"`
	// User's email address
	Email string `form:"email" json:"email" xml:"email"`
	// User's first name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// User's last name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// If user should have access as a meeting host
	Host *bool `form:"host,omitempty" json:"host,omitempty" xml:"host,omitempty"`
	// User's job title
	JobTitle *string `form:"job_title,omitempty" json:"job_title,omitempty" xml:"job_title,omitempty"`
	// User's organization
	OrgName *string `form:"org_name,omitempty" json:"org_name,omitempty" xml:"org_name,omitempty"`
	// User's avatar URL
	AvatarURL *string `form:"avatar_url,omitempty" json:"avatar_url,omitempty" xml:"avatar_url,omitempty"`
	// User's LF ID
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Whether the participant was invited to this past meeting
	IsInvited *bool `form:"is_invited,omitempty" json:"is_invited,omitempty" xml:"is_invited,omitempty"`
	// Whether the participant attended this past meeting
	IsAttended *bool `form:"is_attended,omitempty" json:"is_attended,omitempty" xml:"is_attended,omitempty"`
}

// UpdatePastMeetingParticipantRequestBody is the type of the "Meeting Service"
// service "update-past-meeting-participant" endpoint HTTP request body.
type UpdatePastMeetingParticipantRequestBody struct {
	// User's email address
	Email string `form:"email" json:"email" xml:"email"`
	// User's first name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// User's last name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// If user should have access as a meeting host
	Host *bool `form:"host,omitempty" json:"host,omitempty" xml:"host,omitempty"`
	// User's job title
	JobTitle *string `form:"job_title,omitempty" json:"job_title,omitempty" xml:"job_title,omitempty"`
	// User's organization
	OrgName *string `form:"org_name,omitempty" json:"org_name,omitempty" xml:"org_name,omitempty"`
	// User's avatar URL
	AvatarURL *string `form:"avatar_url,omitempty" json:"avatar_url,omitempty" xml:"avatar_url,omitempty"`
	// User's LF ID
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Whether the participant was invited to this past meeting
	IsInvited *bool `form:"is_invited,omitempty" json:"is_invited,omitempty" xml:"is_invited,omitempty"`
	// Whether the participant attended this past meeting
	IsAttended *bool `form:"is_attended,omitempty" json:"is_attended,omitempty" xml:"is_attended,omitempty"`
}

// UpdatePastMeetingSummaryRequestBody is the type of the "Meeting Service"
// service "update-past-meeting-summary" endpoint HTTP request body.
type UpdatePastMeetingSummaryRequestBody struct {
	// Edited summary overview
	EditedOverview *string `form:"edited_overview,omitempty" json:"edited_overview,omitempty" xml:"edited_overview,omitempty"`
	// Edited structured summary details
	EditedDetails []*SummaryDetailRequestBody `form:"edited_details,omitempty" json:"edited_details,omitempty" xml:"edited_details,omitempty"`
	// Edited next steps
	EditedNextSteps []string `form:"edited_next_steps,omitempty" json:"edited_next_steps,omitempty" xml:"edited_next_steps,omitempty"`
	// Whether the summary has been approved
	Approved *bool `form:"approved,omitempty" json:"approved,omitempty" xml:"approved,omitempty"`
}

// GetMeetingsResponseBody is the type of the "Meeting Service" service
// "get-meetings" endpoint HTTP response body.
type GetMeetingsResponseBody struct {
	// Resources found
	Meetings []*MeetingFullResponseBody `form:"meetings,omitempty" json:"meetings,omitempty" xml:"meetings,omitempty"`
}

// CreateMeetingResponseBody is the type of the "Meeting Service" service
// "create-meeting" endpoint HTTP response body.
type CreateMeetingResponseBody struct {
	// The UID of the meeting
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// The UID of the LF project
	ProjectUID *string `form:"project_uid,omitempty" json:"project_uid,omitempty" xml:"project_uid,omitempty"`
	// The start time of the meeting in RFC3339 format
	StartTime *string `form:"start_time,omitempty" json:"start_time,omitempty" xml:"start_time,omitempty"`
	// The duration of the meeting in minutes
	Duration *int `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	// The timezone of the meeting (e.g. 'America/New_York')
	Timezone *string `form:"timezone,omitempty" json:"timezone,omitempty" xml:"timezone,omitempty"`
	// The recurrence of the meeting
	Recurrence *RecurrenceResponseBody `form:"recurrence,omitempty" json:"recurrence,omitempty" xml:"recurrence,omitempty"`
	// The title of the meeting
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// The description of the meeting
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The committees associated with the meeting
	Committees []*CommitteeResponseBody `form:"committees,omitempty" json:"committees,omitempty" xml:"committees,omitempty"`
	// The platform name of where the meeting is hosted
	Platform *string `form:"platform,omitempty" json:"platform,omitempty" xml:"platform,omitempty"`
	// The number of minutes that users are allowed to join the meeting early
	// without being kicked out
	EarlyJoinTimeMinutes *int `form:"early_join_time_minutes,omitempty" json:"early_join_time_minutes,omitempty" xml:"early_join_time_minutes,omitempty"`
	// The type of meeting. This is usually dependent on the committee(s)
	// associated with the meeting
	MeetingType *string `form:"meeting_type,omitempty" json:"meeting_type,omitempty" xml:"meeting_type,omitempty"`
	// The visibility of the meeting's existence to other users
	Visibility *string `form:"visibility,omitempty" json:"visibility,omitempty" xml:"visibility,omitempty"`
	// The restrictedness of joining the meeting (i.e. is the meeting restricted to
	// only invited users or anyone?)
	Restricted *bool `form:"restricted,omitempty" json:"restricted,omitempty" xml:"restricted,omitempty"`
	// The visibility of artifacts to users (e.g. public, only for registrants,
	// only for hosts)
	ArtifactVisibility *string `form:"artifact_visibility,omitempty" json:"artifact_visibility,omitempty" xml:"artifact_visibility,omitempty"`
	// The public join URL for participants to join the meeting via the LFX
	// platform (e.g.
	// 'https://zoom-lfx.platform.linuxfoundation.org/meeting/12343245463')
	PublicLink *string `form:"public_link,omitempty" json:"public_link,omitempty" xml:"public_link,omitempty"`
	// Unique, non-guessable, password for the meeting - is needed to join a
	// meeting and is included in invites
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	// The number of registrants that have an email delivery error with their
	// invite. The delivery errors are counted as the last invite that was sent to
	// the registrant, so if a registrant previously had a delivery error but not
	// in their most recent invite received, then it does not count towards this
	// field value.
	EmailDeliveryErrorCount *int `form:"email_delivery_error_count,omitempty" json:"email_delivery_error_count,omitempty" xml:"email_delivery_error_count,omitempty"`
	// Whether recording is enabled for the meeting
	RecordingEnabled *bool `form:"recording_enabled,omitempty" json:"recording_enabled,omitempty" xml:"recording_enabled,omitempty"`
	// Whether transcription is enabled for the meeting
	TranscriptEnabled *bool `form:"transcript_enabled,omitempty" json:"transcript_enabled,omitempty" xml:"transcript_enabled,omitempty"`
	// Whether automatic youtube uploading is enabled for the meeting
	YoutubeUploadEnabled *bool `form:"youtube_upload_enabled,omitempty" json:"youtube_upload_enabled,omitempty" xml:"youtube_upload_enabled,omitempty"`
	// For zoom platform meetings: the configuration for the meeting
	ZoomConfig *ZoomConfigFullResponseBody `form:"zoom_config,omitempty" json:"zoom_config,omitempty" xml:"zoom_config,omitempty"`
	// The number of registrants for the meeting
	RegistrantCount *int `form:"registrant_count,omitempty" json:"registrant_count,omitempty" xml:"registrant_count,omitempty"`
	// The number of registrants that have declined the meeting invitation
	RegistrantResponseDeclinedCount *int `form:"registrant_response_declined_count,omitempty" json:"registrant_response_declined_count,omitempty" xml:"registrant_response_declined_count,omitempty"`
	// The number of registrants that have accepted the meeting invitation
	RegistrantResponseAcceptedCount *int `form:"registrant_response_accepted_count,omitempty" json:"registrant_response_accepted_count,omitempty" xml:"registrant_response_accepted_count,omitempty"`
	// Array of meeting occurrences (read-only from platform API)
	Occurrences []*OccurrenceResponseBody `form:"occurrences,omitempty" json:"occurrences,omitempty" xml:"occurrences,omitempty"`
	// The date and time the resource was created
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The date and time the resource was last updated
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// The organizers of the meeting. This is a list of LFIDs of the meeting
	// organizers.
	Organizers []string `form:"organizers,omitempty" json:"organizers,omitempty" xml:"organizers,omitempty"`
}

// GetMeetingBaseResponseBody is the type of the "Meeting Service" service
// "get-meeting-base" endpoint HTTP response body.
type GetMeetingBaseResponseBody MeetingBaseResponseBody

// GetMeetingSettingsResponseBody is the type of the "Meeting Service" service
// "get-meeting-settings" endpoint HTTP response body.
type GetMeetingSettingsResponseBody MeetingSettingsResponseBody

// GetMeetingJoinURLResponseBody is the type of the "Meeting Service" service
// "get-meeting-join-url" endpoint HTTP response body.
type GetMeetingJoinURLResponseBody struct {
	// The public join URL for participants to join the meeting via the LFX
	// platform (e.g.
	// 'https://zoom-lfx.platform.linuxfoundation.org/meeting/12343245463')
	JoinURL *string `form:"join_url,omitempty" json:"join_url,omitempty" xml:"join_url,omitempty"`
}

// UpdateMeetingBaseResponseBody is the type of the "Meeting Service" service
// "update-meeting-base" endpoint HTTP response body.
type UpdateMeetingBaseResponseBody struct {
	// The UID of the meeting
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// The UID of the LF project
	ProjectUID *string `form:"project_uid,omitempty" json:"project_uid,omitempty" xml:"project_uid,omitempty"`
	// The start time of the meeting in RFC3339 format
	StartTime *string `form:"start_time,omitempty" json:"start_time,omitempty" xml:"start_time,omitempty"`
	// The duration of the meeting in minutes
	Duration *int `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	// The timezone of the meeting (e.g. 'America/New_York')
	Timezone *string `form:"timezone,omitempty" json:"timezone,omitempty" xml:"timezone,omitempty"`
	// The recurrence of the meeting
	Recurrence *RecurrenceResponseBody `form:"recurrence,omitempty" json:"recurrence,omitempty" xml:"recurrence,omitempty"`
	// The title of the meeting
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// The description of the meeting
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The committees associated with the meeting
	Committees []*CommitteeResponseBody `form:"committees,omitempty" json:"committees,omitempty" xml:"committees,omitempty"`
	// The platform name of where the meeting is hosted
	Platform *string `form:"platform,omitempty" json:"platform,omitempty" xml:"platform,omitempty"`
	// The number of minutes that users are allowed to join the meeting early
	// without being kicked out
	EarlyJoinTimeMinutes *int `form:"early_join_time_minutes,omitempty" json:"early_join_time_minutes,omitempty" xml:"early_join_time_minutes,omitempty"`
	// The type of meeting. This is usually dependent on the committee(s)
	// associated with the meeting
	MeetingType *string `form:"meeting_type,omitempty" json:"meeting_type,omitempty" xml:"meeting_type,omitempty"`
	// The visibility of the meeting's existence to other users
	Visibility *string `form:"visibility,omitempty" json:"visibility,omitempty" xml:"visibility,omitempty"`
	// The restrictedness of joining the meeting (i.e. is the meeting restricted to
	// only invited users or anyone?)
	Restricted *bool `form:"restricted,omitempty" json:"restricted,omitempty" xml:"restricted,omitempty"`
	// The visibility of artifacts to users (e.g. public, only for registrants,
	// only for hosts)
	ArtifactVisibility *string `form:"artifact_visibility,omitempty" json:"artifact_visibility,omitempty" xml:"artifact_visibility,omitempty"`
	// The public join URL for participants to join the meeting via the LFX
	// platform (e.g.
	// 'https://zoom-lfx.platform.linuxfoundation.org/meeting/12343245463')
	PublicLink *string `form:"public_link,omitempty" json:"public_link,omitempty" xml:"public_link,omitempty"`
	// Unique, non-guessable, password for the meeting - is needed to join a
	// meeting and is included in invites
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	// The number of registrants that have an email delivery error with their
	// invite. The delivery errors are counted as the last invite that was sent to
	// the registrant, so if a registrant previously had a delivery error but not
	// in their most recent invite received, then it does not count towards this
	// field value.
	EmailDeliveryErrorCount *int `form:"email_delivery_error_count,omitempty" json:"email_delivery_error_count,omitempty" xml:"email_delivery_error_count,omitempty"`
	// Whether recording is enabled for the meeting
	RecordingEnabled *bool `form:"recording_enabled,omitempty" json:"recording_enabled,omitempty" xml:"recording_enabled,omitempty"`
	// Whether transcription is enabled for the meeting
	TranscriptEnabled *bool `form:"transcript_enabled,omitempty" json:"transcript_enabled,omitempty" xml:"transcript_enabled,omitempty"`
	// Whether automatic youtube uploading is enabled for the meeting
	YoutubeUploadEnabled *bool `form:"youtube_upload_enabled,omitempty" json:"youtube_upload_enabled,omitempty" xml:"youtube_upload_enabled,omitempty"`
	// For zoom platform meetings: the configuration for the meeting
	ZoomConfig *ZoomConfigFullResponseBody `form:"zoom_config,omitempty" json:"zoom_config,omitempty" xml:"zoom_config,omitempty"`
	// The number of registrants for the meeting
	RegistrantCount *int `form:"registrant_count,omitempty" json:"registrant_count,omitempty" xml:"registrant_count,omitempty"`
	// The number of registrants that have declined the meeting invitation
	RegistrantResponseDeclinedCount *int `form:"registrant_response_declined_count,omitempty" json:"registrant_response_declined_count,omitempty" xml:"registrant_response_declined_count,omitempty"`
	// The number of registrants that have accepted the meeting invitation
	RegistrantResponseAcceptedCount *int `form:"registrant_response_accepted_count,omitempty" json:"registrant_response_accepted_count,omitempty" xml:"registrant_response_accepted_count,omitempty"`
	// Array of meeting occurrences (read-only from platform API)
	Occurrences []*OccurrenceResponseBody `form:"occurrences,omitempty" json:"occurrences,omitempty" xml:"occurrences,omitempty"`
	// The date and time the resource was created
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The date and time the resource was last updated
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// UpdateMeetingSettingsResponseBody is the type of the "Meeting Service"
// service "update-meeting-settings" endpoint HTTP response body.
type UpdateMeetingSettingsResponseBody struct {
	// The UID of the meeting
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// The organizers of the meeting. This is a list of LFIDs of the meeting
	// organizers.
	Organizers []string `form:"organizers,omitempty" json:"organizers,omitempty" xml:"organizers,omitempty"`
	// The date and time the resource was created
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The date and time the resource was last updated
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// GetMeetingRegistrantsResponseBody is the type of the "Meeting Service"
// service "get-meeting-registrants" endpoint HTTP response body.
type GetMeetingRegistrantsResponseBody struct {
	// Meeting registrants
	Registrants []*RegistrantResponseBody `form:"registrants,omitempty" json:"registrants,omitempty" xml:"registrants,omitempty"`
}

// CreateMeetingRegistrantResponseBody is the type of the "Meeting Service"
// service "create-meeting-registrant" endpoint HTTP response body.
type CreateMeetingRegistrantResponseBody struct {
	// The UID of the registrant
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// The UID of the meeting
	MeetingUID *string `form:"meeting_uid,omitempty" json:"meeting_uid,omitempty" xml:"meeting_uid,omitempty"`
	// User's email address
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// User's first name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// User's last name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// If user should have access as a meeting host
	Host *bool `form:"host,omitempty" json:"host,omitempty" xml:"host,omitempty"`
	// Type of registrant
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// The UID of the committee if registrant is a committee member
	CommitteeUID *string `form:"committee_uid,omitempty" json:"committee_uid,omitempty" xml:"committee_uid,omitempty"`
	// User's job title
	JobTitle *string `form:"job_title,omitempty" json:"job_title,omitempty" xml:"job_title,omitempty"`
	// The ID of the specific occurrence the user should be invited to. If blank,
	// user is invited to all occurrences
	OccurrenceID *string `form:"occurrence_id,omitempty" json:"occurrence_id,omitempty" xml:"occurrence_id,omitempty"`
	// User's organization
	OrgName *string `form:"org_name,omitempty" json:"org_name,omitempty" xml:"org_name,omitempty"`
	// Whether the registrant is in an organization that has a membership with the
	// LF. If unknown, don't pass this field; the API will find the value by default
	OrgIsMember *bool `form:"org_is_member,omitempty" json:"org_is_member,omitempty" xml:"org_is_member,omitempty"`
	// Whether the registrant is in an organization that has a membership with the
	// project (of the meeting). If unknown, don't pass this field; the API will
	// find the value by default
	OrgIsProjectMember *bool `form:"org_is_project_member,omitempty" json:"org_is_project_member,omitempty" xml:"org_is_project_member,omitempty"`
	// User's avatar URL
	AvatarURL *string `form:"avatar_url,omitempty" json:"avatar_url,omitempty" xml:"avatar_url,omitempty"`
	// User's LF ID
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// The date and time the resource was created
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The date and time the resource was last updated
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// GetMeetingRegistrantResponseBody is the type of the "Meeting Service"
// service "get-meeting-registrant" endpoint HTTP response body.
type GetMeetingRegistrantResponseBody RegistrantResponseBody

// UpdateMeetingRegistrantResponseBody is the type of the "Meeting Service"
// service "update-meeting-registrant" endpoint HTTP response body.
type UpdateMeetingRegistrantResponseBody struct {
	// The UID of the registrant
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// The UID of the meeting
	MeetingUID *string `form:"meeting_uid,omitempty" json:"meeting_uid,omitempty" xml:"meeting_uid,omitempty"`
	// User's email address
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// User's first name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// User's last name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// If user should have access as a meeting host
	Host *bool `form:"host,omitempty" json:"host,omitempty" xml:"host,omitempty"`
	// Type of registrant
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// The UID of the committee if registrant is a committee member
	CommitteeUID *string `form:"committee_uid,omitempty" json:"committee_uid,omitempty" xml:"committee_uid,omitempty"`
	// User's job title
	JobTitle *string `form:"job_title,omitempty" json:"job_title,omitempty" xml:"job_title,omitempty"`
	// The ID of the specific occurrence the user should be invited to. If blank,
	// user is invited to all occurrences
	OccurrenceID *string `form:"occurrence_id,omitempty" json:"occurrence_id,omitempty" xml:"occurrence_id,omitempty"`
	// User's organization
	OrgName *string `form:"org_name,omitempty" json:"org_name,omitempty" xml:"org_name,omitempty"`
	// Whether the registrant is in an organization that has a membership with the
	// LF. If unknown, don't pass this field; the API will find the value by default
	OrgIsMember *bool `form:"org_is_member,omitempty" json:"org_is_member,omitempty" xml:"org_is_member,omitempty"`
	// Whether the registrant is in an organization that has a membership with the
	// project (of the meeting). If unknown, don't pass this field; the API will
	// find the value by default
	OrgIsProjectMember *bool `form:"org_is_project_member,omitempty" json:"org_is_project_member,omitempty" xml:"org_is_project_member,omitempty"`
	// User's avatar URL
	AvatarURL *string `form:"avatar_url,omitempty" json:"avatar_url,omitempty" xml:"avatar_url,omitempty"`
	// User's LF ID
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// The date and time the resource was created
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The date and time the resource was last updated
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// ZoomWebhookResponseBody is the type of the "Meeting Service" service
// "zoom-webhook" endpoint HTTP response body.
type ZoomWebhookResponseBody struct {
	// Processing status
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Optional message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetPastMeetingsResponseBody is the type of the "Meeting Service" service
// "get-past-meetings" endpoint HTTP response body.
type GetPastMeetingsResponseBody struct {
	// Past meetings found
	PastMeetings []*PastMeetingResponseBody `form:"past_meetings,omitempty" json:"past_meetings,omitempty" xml:"past_meetings,omitempty"`
}

// CreatePastMeetingResponseBody is the type of the "Meeting Service" service
// "create-past-meeting" endpoint HTTP response body.
type CreatePastMeetingResponseBody struct {
	// The unique identifier of the past meeting
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// The UID of the original meeting
	MeetingUID *string `form:"meeting_uid,omitempty" json:"meeting_uid,omitempty" xml:"meeting_uid,omitempty"`
	// The occurrence ID for recurring meetings
	OccurrenceID *string `form:"occurrence_id,omitempty" json:"occurrence_id,omitempty" xml:"occurrence_id,omitempty"`
	// The UID of the LF project
	ProjectUID *string `form:"project_uid,omitempty" json:"project_uid,omitempty" xml:"project_uid,omitempty"`
	// The scheduled start time of the past meeting
	ScheduledStartTime *string `form:"scheduled_start_time,omitempty" json:"scheduled_start_time,omitempty" xml:"scheduled_start_time,omitempty"`
	// The scheduled end time of the past meeting
	ScheduledEndTime *string `form:"scheduled_end_time,omitempty" json:"scheduled_end_time,omitempty" xml:"scheduled_end_time,omitempty"`
	// The duration of the meeting in minutes
	Duration *int `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	// The timezone of the meeting (e.g. 'America/New_York')
	Timezone *string `form:"timezone,omitempty" json:"timezone,omitempty" xml:"timezone,omitempty"`
	// The recurrence of the meeting
	Recurrence *RecurrenceResponseBody `form:"recurrence,omitempty" json:"recurrence,omitempty" xml:"recurrence,omitempty"`
	// The title of the meeting
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// The description of the meeting
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The committees associated with the meeting
	Committees []*CommitteeResponseBody `form:"committees,omitempty" json:"committees,omitempty" xml:"committees,omitempty"`
	// The platform name of where the meeting is hosted
	Platform *string `form:"platform,omitempty" json:"platform,omitempty" xml:"platform,omitempty"`
	// The ID of the meeting in the platform (e.g. Zoom meeting ID)
	PlatformMeetingID *string `form:"platform_meeting_id,omitempty" json:"platform_meeting_id,omitempty" xml:"platform_meeting_id,omitempty"`
	// The number of minutes that users are allowed to join the meeting early
	// without being kicked out
	EarlyJoinTimeMinutes *int `form:"early_join_time_minutes,omitempty" json:"early_join_time_minutes,omitempty" xml:"early_join_time_minutes,omitempty"`
	// The type of meeting. This is usually dependent on the committee(s)
	// associated with the meeting
	MeetingType *string `form:"meeting_type,omitempty" json:"meeting_type,omitempty" xml:"meeting_type,omitempty"`
	// The visibility of the meeting's existence to other users
	Visibility *string `form:"visibility,omitempty" json:"visibility,omitempty" xml:"visibility,omitempty"`
	// The restrictedness of joining the meeting (i.e. is the meeting restricted to
	// only invited users or anyone?)
	Restricted *bool `form:"restricted,omitempty" json:"restricted,omitempty" xml:"restricted,omitempty"`
	// The visibility of artifacts to users (e.g. public, only for registrants,
	// only for hosts)
	ArtifactVisibility *string `form:"artifact_visibility,omitempty" json:"artifact_visibility,omitempty" xml:"artifact_visibility,omitempty"`
	// The public join URL for participants to join the meeting via the LFX
	// platform (e.g.
	// 'https://zoom-lfx.platform.linuxfoundation.org/meeting/12343245463')
	PublicLink *string `form:"public_link,omitempty" json:"public_link,omitempty" xml:"public_link,omitempty"`
	// Whether recording is enabled for the meeting
	RecordingEnabled *bool `form:"recording_enabled,omitempty" json:"recording_enabled,omitempty" xml:"recording_enabled,omitempty"`
	// Whether transcription is enabled for the meeting
	TranscriptEnabled *bool `form:"transcript_enabled,omitempty" json:"transcript_enabled,omitempty" xml:"transcript_enabled,omitempty"`
	// Whether automatic youtube uploading is enabled for the meeting
	YoutubeUploadEnabled *bool `form:"youtube_upload_enabled,omitempty" json:"youtube_upload_enabled,omitempty" xml:"youtube_upload_enabled,omitempty"`
	// For zoom platform meetings: the configuration for the meeting
	ZoomConfig *ZoomConfigFullResponseBody `form:"zoom_config,omitempty" json:"zoom_config,omitempty" xml:"zoom_config,omitempty"`
	// Sessions represent individual start/end periods if a meeting was stopped and
	// restarted
	Sessions []*SessionResponseBody `form:"sessions,omitempty" json:"sessions,omitempty" xml:"sessions,omitempty"`
	// The date and time the resource was created
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The date and time the resource was last updated
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// GetPastMeetingResponseBody is the type of the "Meeting Service" service
// "get-past-meeting" endpoint HTTP response body.
type GetPastMeetingResponseBody PastMeetingResponseBody

// GetPastMeetingParticipantsResponseBody is the type of the "Meeting Service"
// service "get-past-meeting-participants" endpoint HTTP response body.
type GetPastMeetingParticipantsResponseBody struct {
	// Past meeting participants
	Participants []*PastMeetingParticipantResponseBody `form:"participants,omitempty" json:"participants,omitempty" xml:"participants,omitempty"`
}

// CreatePastMeetingParticipantResponseBody is the type of the "Meeting
// Service" service "create-past-meeting-participant" endpoint HTTP response
// body.
type CreatePastMeetingParticipantResponseBody struct {
	// The UID of the past meeting participant
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// The unique identifier of the past meeting
	PastMeetingUID *string `form:"past_meeting_uid,omitempty" json:"past_meeting_uid,omitempty" xml:"past_meeting_uid,omitempty"`
	// The UID of the meeting
	MeetingUID *string `form:"meeting_uid,omitempty" json:"meeting_uid,omitempty" xml:"meeting_uid,omitempty"`
	// User's email address
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// User's first name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// User's last name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// If user should have access as a meeting host
	Host *bool `form:"host,omitempty" json:"host,omitempty" xml:"host,omitempty"`
	// User's job title
	JobTitle *string `form:"job_title,omitempty" json:"job_title,omitempty" xml:"job_title,omitempty"`
	// User's organization
	OrgName *string `form:"org_name,omitempty" json:"org_name,omitempty" xml:"org_name,omitempty"`
	// Whether the registrant is in an organization that has a membership with the
	// LF. If unknown, don't pass this field; the API will find the value by default
	OrgIsMember *bool `form:"org_is_member,omitempty" json:"org_is_member,omitempty" xml:"org_is_member,omitempty"`
	// Whether the registrant is in an organization that has a membership with the
	// project (of the meeting). If unknown, don't pass this field; the API will
	// find the value by default
	OrgIsProjectMember *bool `form:"org_is_project_member,omitempty" json:"org_is_project_member,omitempty" xml:"org_is_project_member,omitempty"`
	// User's avatar URL
	AvatarURL *string `form:"avatar_url,omitempty" json:"avatar_url,omitempty" xml:"avatar_url,omitempty"`
	// User's LF ID
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Whether the participant was invited to this past meeting
	IsInvited *bool `form:"is_invited,omitempty" json:"is_invited,omitempty" xml:"is_invited,omitempty"`
	// Whether the participant attended this past meeting
	IsAttended *bool `form:"is_attended,omitempty" json:"is_attended,omitempty" xml:"is_attended,omitempty"`
	// List of join/leave sessions for this participant
	Sessions []*ParticipantSessionResponseBody `form:"sessions,omitempty" json:"sessions,omitempty" xml:"sessions,omitempty"`
	// The date and time the resource was created
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The date and time the resource was last updated
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// GetPastMeetingParticipantResponseBody is the type of the "Meeting Service"
// service "get-past-meeting-participant" endpoint HTTP response body.
type GetPastMeetingParticipantResponseBody PastMeetingParticipantResponseBody

// UpdatePastMeetingParticipantResponseBody is the type of the "Meeting
// Service" service "update-past-meeting-participant" endpoint HTTP response
// body.
type UpdatePastMeetingParticipantResponseBody struct {
	// The UID of the past meeting participant
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// The unique identifier of the past meeting
	PastMeetingUID *string `form:"past_meeting_uid,omitempty" json:"past_meeting_uid,omitempty" xml:"past_meeting_uid,omitempty"`
	// The UID of the meeting
	MeetingUID *string `form:"meeting_uid,omitempty" json:"meeting_uid,omitempty" xml:"meeting_uid,omitempty"`
	// User's email address
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// User's first name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// User's last name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// If user should have access as a meeting host
	Host *bool `form:"host,omitempty" json:"host,omitempty" xml:"host,omitempty"`
	// User's job title
	JobTitle *string `form:"job_title,omitempty" json:"job_title,omitempty" xml:"job_title,omitempty"`
	// User's organization
	OrgName *string `form:"org_name,omitempty" json:"org_name,omitempty" xml:"org_name,omitempty"`
	// Whether the registrant is in an organization that has a membership with the
	// LF. If unknown, don't pass this field; the API will find the value by default
	OrgIsMember *bool `form:"org_is_member,omitempty" json:"org_is_member,omitempty" xml:"org_is_member,omitempty"`
	// Whether the registrant is in an organization that has a membership with the
	// project (of the meeting). If unknown, don't pass this field; the API will
	// find the value by default
	OrgIsProjectMember *bool `form:"org_is_project_member,omitempty" json:"org_is_project_member,omitempty" xml:"org_is_project_member,omitempty"`
	// User's avatar URL
	AvatarURL *string `form:"avatar_url,omitempty" json:"avatar_url,omitempty" xml:"avatar_url,omitempty"`
	// User's LF ID
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Whether the participant was invited to this past meeting
	IsInvited *bool `form:"is_invited,omitempty" json:"is_invited,omitempty" xml:"is_invited,omitempty"`
	// Whether the participant attended this past meeting
	IsAttended *bool `form:"is_attended,omitempty" json:"is_attended,omitempty" xml:"is_attended,omitempty"`
	// List of join/leave sessions for this participant
	Sessions []*ParticipantSessionResponseBody `form:"sessions,omitempty" json:"sessions,omitempty" xml:"sessions,omitempty"`
	// The date and time the resource was created
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The date and time the resource was last updated
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// GetPastMeetingSummariesResponseBody is the type of the "Meeting Service"
// service "get-past-meeting-summaries" endpoint HTTP response body.
type GetPastMeetingSummariesResponseBody struct {
	// Past meeting summaries
	Summaries []*PastMeetingSummaryResponseBody `form:"summaries,omitempty" json:"summaries,omitempty" xml:"summaries,omitempty"`
}

// GetPastMeetingSummaryResponseBody is the type of the "Meeting Service"
// service "get-past-meeting-summary" endpoint HTTP response body.
type GetPastMeetingSummaryResponseBody PastMeetingSummaryResponseBody

// UpdatePastMeetingSummaryResponseBody is the type of the "Meeting Service"
// service "update-past-meeting-summary" endpoint HTTP response body.
type UpdatePastMeetingSummaryResponseBody struct {
	// The unique identifier of the past meeting
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// The unique identifier of the past meeting
	PastMeetingUID *string `form:"past_meeting_uid,omitempty" json:"past_meeting_uid,omitempty" xml:"past_meeting_uid,omitempty"`
	// The UID of the original meeting
	MeetingUID *string `form:"meeting_uid,omitempty" json:"meeting_uid,omitempty" xml:"meeting_uid,omitempty"`
	// The platform name of where the meeting is hosted
	Platform *string `form:"platform,omitempty" json:"platform,omitempty" xml:"platform,omitempty"`
	// Password for accessing the summary (if required)
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	// Zoom-specific configuration
	ZoomConfig *PastMeetingSummaryZoomConfigResponseBody `form:"zoom_config,omitempty" json:"zoom_config,omitempty" xml:"zoom_config,omitempty"`
	// The actual summary content
	SummaryData *SummaryDataResponseBody `form:"summary_data,omitempty" json:"summary_data,omitempty" xml:"summary_data,omitempty"`
	// Whether the summary requires approval
	RequiresApproval *bool `form:"requires_approval,omitempty" json:"requires_approval,omitempty" xml:"requires_approval,omitempty"`
	// Whether the summary has been approved
	Approved *bool `form:"approved,omitempty" json:"approved,omitempty" xml:"approved,omitempty"`
	// Whether summary email has been sent
	EmailSent *bool `form:"email_sent,omitempty" json:"email_sent,omitempty" xml:"email_sent,omitempty"`
	// The date and time the resource was created
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The date and time the resource was last updated
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// GetMeetingsBadRequestResponseBody is the type of the "Meeting Service"
// service "get-meetings" endpoint HTTP response body for the "BadRequest"
// error.
type GetMeetingsBadRequestResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetMeetingsInternalServerErrorResponseBody is the type of the "Meeting
// Service" service "get-meetings" endpoint HTTP response body for the
// "InternalServerError" error.
type GetMeetingsInternalServerErrorResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetMeetingsServiceUnavailableResponseBody is the type of the "Meeting
// Service" service "get-meetings" endpoint HTTP response body for the
// "ServiceUnavailable" error.
type GetMeetingsServiceUnavailableResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateMeetingBadRequestResponseBody is the type of the "Meeting Service"
// service "create-meeting" endpoint HTTP response body for the "BadRequest"
// error.
type CreateMeetingBadRequestResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateMeetingConflictResponseBody is the type of the "Meeting Service"
// service "create-meeting" endpoint HTTP response body for the "Conflict"
// error.
type CreateMeetingConflictResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateMeetingInternalServerErrorResponseBody is the type of the "Meeting
// Service" service "create-meeting" endpoint HTTP response body for the
// "InternalServerError" error.
type CreateMeetingInternalServerErrorResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateMeetingServiceUnavailableResponseBody is the type of the "Meeting
// Service" service "create-meeting" endpoint HTTP response body for the
// "ServiceUnavailable" error.
type CreateMeetingServiceUnavailableResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetMeetingBaseInternalServerErrorResponseBody is the type of the "Meeting
// Service" service "get-meeting-base" endpoint HTTP response body for the
// "InternalServerError" error.
type GetMeetingBaseInternalServerErrorResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetMeetingBaseNotFoundResponseBody is the type of the "Meeting Service"
// service "get-meeting-base" endpoint HTTP response body for the "NotFound"
// error.
type GetMeetingBaseNotFoundResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetMeetingBaseServiceUnavailableResponseBody is the type of the "Meeting
// Service" service "get-meeting-base" endpoint HTTP response body for the
// "ServiceUnavailable" error.
type GetMeetingBaseServiceUnavailableResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetMeetingSettingsInternalServerErrorResponseBody is the type of the
// "Meeting Service" service "get-meeting-settings" endpoint HTTP response body
// for the "InternalServerError" error.
type GetMeetingSettingsInternalServerErrorResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetMeetingSettingsNotFoundResponseBody is the type of the "Meeting Service"
// service "get-meeting-settings" endpoint HTTP response body for the
// "NotFound" error.
type GetMeetingSettingsNotFoundResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetMeetingSettingsServiceUnavailableResponseBody is the type of the "Meeting
// Service" service "get-meeting-settings" endpoint HTTP response body for the
// "ServiceUnavailable" error.
type GetMeetingSettingsServiceUnavailableResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetMeetingJoinURLInternalServerErrorResponseBody is the type of the "Meeting
// Service" service "get-meeting-join-url" endpoint HTTP response body for the
// "InternalServerError" error.
type GetMeetingJoinURLInternalServerErrorResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetMeetingJoinURLNotFoundResponseBody is the type of the "Meeting Service"
// service "get-meeting-join-url" endpoint HTTP response body for the
// "NotFound" error.
type GetMeetingJoinURLNotFoundResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetMeetingJoinURLServiceUnavailableResponseBody is the type of the "Meeting
// Service" service "get-meeting-join-url" endpoint HTTP response body for the
// "ServiceUnavailable" error.
type GetMeetingJoinURLServiceUnavailableResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetMeetingJoinURLUnauthorizedResponseBody is the type of the "Meeting
// Service" service "get-meeting-join-url" endpoint HTTP response body for the
// "Unauthorized" error.
type GetMeetingJoinURLUnauthorizedResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateMeetingBaseBadRequestResponseBody is the type of the "Meeting Service"
// service "update-meeting-base" endpoint HTTP response body for the
// "BadRequest" error.
type UpdateMeetingBaseBadRequestResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateMeetingBaseConflictResponseBody is the type of the "Meeting Service"
// service "update-meeting-base" endpoint HTTP response body for the "Conflict"
// error.
type UpdateMeetingBaseConflictResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateMeetingBaseInternalServerErrorResponseBody is the type of the "Meeting
// Service" service "update-meeting-base" endpoint HTTP response body for the
// "InternalServerError" error.
type UpdateMeetingBaseInternalServerErrorResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateMeetingBaseNotFoundResponseBody is the type of the "Meeting Service"
// service "update-meeting-base" endpoint HTTP response body for the "NotFound"
// error.
type UpdateMeetingBaseNotFoundResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateMeetingBaseServiceUnavailableResponseBody is the type of the "Meeting
// Service" service "update-meeting-base" endpoint HTTP response body for the
// "ServiceUnavailable" error.
type UpdateMeetingBaseServiceUnavailableResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateMeetingSettingsBadRequestResponseBody is the type of the "Meeting
// Service" service "update-meeting-settings" endpoint HTTP response body for
// the "BadRequest" error.
type UpdateMeetingSettingsBadRequestResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateMeetingSettingsInternalServerErrorResponseBody is the type of the
// "Meeting Service" service "update-meeting-settings" endpoint HTTP response
// body for the "InternalServerError" error.
type UpdateMeetingSettingsInternalServerErrorResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateMeetingSettingsNotFoundResponseBody is the type of the "Meeting
// Service" service "update-meeting-settings" endpoint HTTP response body for
// the "NotFound" error.
type UpdateMeetingSettingsNotFoundResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateMeetingSettingsServiceUnavailableResponseBody is the type of the
// "Meeting Service" service "update-meeting-settings" endpoint HTTP response
// body for the "ServiceUnavailable" error.
type UpdateMeetingSettingsServiceUnavailableResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteMeetingBadRequestResponseBody is the type of the "Meeting Service"
// service "delete-meeting" endpoint HTTP response body for the "BadRequest"
// error.
type DeleteMeetingBadRequestResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteMeetingInternalServerErrorResponseBody is the type of the "Meeting
// Service" service "delete-meeting" endpoint HTTP response body for the
// "InternalServerError" error.
type DeleteMeetingInternalServerErrorResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteMeetingNotFoundResponseBody is the type of the "Meeting Service"
// service "delete-meeting" endpoint HTTP response body for the "NotFound"
// error.
type DeleteMeetingNotFoundResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteMeetingServiceUnavailableResponseBody is the type of the "Meeting
// Service" service "delete-meeting" endpoint HTTP response body for the
// "ServiceUnavailable" error.
type DeleteMeetingServiceUnavailableResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetMeetingRegistrantsInternalServerErrorResponseBody is the type of the
// "Meeting Service" service "get-meeting-registrants" endpoint HTTP response
// body for the "InternalServerError" error.
type GetMeetingRegistrantsInternalServerErrorResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetMeetingRegistrantsNotFoundResponseBody is the type of the "Meeting
// Service" service "get-meeting-registrants" endpoint HTTP response body for
// the "NotFound" error.
type GetMeetingRegistrantsNotFoundResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetMeetingRegistrantsServiceUnavailableResponseBody is the type of the
// "Meeting Service" service "get-meeting-registrants" endpoint HTTP response
// body for the "ServiceUnavailable" error.
type GetMeetingRegistrantsServiceUnavailableResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateMeetingRegistrantBadRequestResponseBody is the type of the "Meeting
// Service" service "create-meeting-registrant" endpoint HTTP response body for
// the "BadRequest" error.
type CreateMeetingRegistrantBadRequestResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateMeetingRegistrantConflictResponseBody is the type of the "Meeting
// Service" service "create-meeting-registrant" endpoint HTTP response body for
// the "Conflict" error.
type CreateMeetingRegistrantConflictResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateMeetingRegistrantInternalServerErrorResponseBody is the type of the
// "Meeting Service" service "create-meeting-registrant" endpoint HTTP response
// body for the "InternalServerError" error.
type CreateMeetingRegistrantInternalServerErrorResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateMeetingRegistrantNotFoundResponseBody is the type of the "Meeting
// Service" service "create-meeting-registrant" endpoint HTTP response body for
// the "NotFound" error.
type CreateMeetingRegistrantNotFoundResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateMeetingRegistrantServiceUnavailableResponseBody is the type of the
// "Meeting Service" service "create-meeting-registrant" endpoint HTTP response
// body for the "ServiceUnavailable" error.
type CreateMeetingRegistrantServiceUnavailableResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetMeetingRegistrantInternalServerErrorResponseBody is the type of the
// "Meeting Service" service "get-meeting-registrant" endpoint HTTP response
// body for the "InternalServerError" error.
type GetMeetingRegistrantInternalServerErrorResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetMeetingRegistrantNotFoundResponseBody is the type of the "Meeting
// Service" service "get-meeting-registrant" endpoint HTTP response body for
// the "NotFound" error.
type GetMeetingRegistrantNotFoundResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetMeetingRegistrantServiceUnavailableResponseBody is the type of the
// "Meeting Service" service "get-meeting-registrant" endpoint HTTP response
// body for the "ServiceUnavailable" error.
type GetMeetingRegistrantServiceUnavailableResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateMeetingRegistrantBadRequestResponseBody is the type of the "Meeting
// Service" service "update-meeting-registrant" endpoint HTTP response body for
// the "BadRequest" error.
type UpdateMeetingRegistrantBadRequestResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateMeetingRegistrantConflictResponseBody is the type of the "Meeting
// Service" service "update-meeting-registrant" endpoint HTTP response body for
// the "Conflict" error.
type UpdateMeetingRegistrantConflictResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateMeetingRegistrantInternalServerErrorResponseBody is the type of the
// "Meeting Service" service "update-meeting-registrant" endpoint HTTP response
// body for the "InternalServerError" error.
type UpdateMeetingRegistrantInternalServerErrorResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateMeetingRegistrantNotFoundResponseBody is the type of the "Meeting
// Service" service "update-meeting-registrant" endpoint HTTP response body for
// the "NotFound" error.
type UpdateMeetingRegistrantNotFoundResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateMeetingRegistrantServiceUnavailableResponseBody is the type of the
// "Meeting Service" service "update-meeting-registrant" endpoint HTTP response
// body for the "ServiceUnavailable" error.
type UpdateMeetingRegistrantServiceUnavailableResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteMeetingRegistrantBadRequestResponseBody is the type of the "Meeting
// Service" service "delete-meeting-registrant" endpoint HTTP response body for
// the "BadRequest" error.
type DeleteMeetingRegistrantBadRequestResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteMeetingRegistrantInternalServerErrorResponseBody is the type of the
// "Meeting Service" service "delete-meeting-registrant" endpoint HTTP response
// body for the "InternalServerError" error.
type DeleteMeetingRegistrantInternalServerErrorResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteMeetingRegistrantNotFoundResponseBody is the type of the "Meeting
// Service" service "delete-meeting-registrant" endpoint HTTP response body for
// the "NotFound" error.
type DeleteMeetingRegistrantNotFoundResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteMeetingRegistrantServiceUnavailableResponseBody is the type of the
// "Meeting Service" service "delete-meeting-registrant" endpoint HTTP response
// body for the "ServiceUnavailable" error.
type DeleteMeetingRegistrantServiceUnavailableResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// ZoomWebhookBadRequestResponseBody is the type of the "Meeting Service"
// service "zoom-webhook" endpoint HTTP response body for the "BadRequest"
// error.
type ZoomWebhookBadRequestResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// ZoomWebhookInternalServerErrorResponseBody is the type of the "Meeting
// Service" service "zoom-webhook" endpoint HTTP response body for the
// "InternalServerError" error.
type ZoomWebhookInternalServerErrorResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// ZoomWebhookUnauthorizedResponseBody is the type of the "Meeting Service"
// service "zoom-webhook" endpoint HTTP response body for the "Unauthorized"
// error.
type ZoomWebhookUnauthorizedResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetPastMeetingsBadRequestResponseBody is the type of the "Meeting Service"
// service "get-past-meetings" endpoint HTTP response body for the "BadRequest"
// error.
type GetPastMeetingsBadRequestResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetPastMeetingsInternalServerErrorResponseBody is the type of the "Meeting
// Service" service "get-past-meetings" endpoint HTTP response body for the
// "InternalServerError" error.
type GetPastMeetingsInternalServerErrorResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetPastMeetingsServiceUnavailableResponseBody is the type of the "Meeting
// Service" service "get-past-meetings" endpoint HTTP response body for the
// "ServiceUnavailable" error.
type GetPastMeetingsServiceUnavailableResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreatePastMeetingBadRequestResponseBody is the type of the "Meeting Service"
// service "create-past-meeting" endpoint HTTP response body for the
// "BadRequest" error.
type CreatePastMeetingBadRequestResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreatePastMeetingConflictResponseBody is the type of the "Meeting Service"
// service "create-past-meeting" endpoint HTTP response body for the "Conflict"
// error.
type CreatePastMeetingConflictResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreatePastMeetingInternalServerErrorResponseBody is the type of the "Meeting
// Service" service "create-past-meeting" endpoint HTTP response body for the
// "InternalServerError" error.
type CreatePastMeetingInternalServerErrorResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreatePastMeetingServiceUnavailableResponseBody is the type of the "Meeting
// Service" service "create-past-meeting" endpoint HTTP response body for the
// "ServiceUnavailable" error.
type CreatePastMeetingServiceUnavailableResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetPastMeetingInternalServerErrorResponseBody is the type of the "Meeting
// Service" service "get-past-meeting" endpoint HTTP response body for the
// "InternalServerError" error.
type GetPastMeetingInternalServerErrorResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetPastMeetingNotFoundResponseBody is the type of the "Meeting Service"
// service "get-past-meeting" endpoint HTTP response body for the "NotFound"
// error.
type GetPastMeetingNotFoundResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetPastMeetingServiceUnavailableResponseBody is the type of the "Meeting
// Service" service "get-past-meeting" endpoint HTTP response body for the
// "ServiceUnavailable" error.
type GetPastMeetingServiceUnavailableResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeletePastMeetingBadRequestResponseBody is the type of the "Meeting Service"
// service "delete-past-meeting" endpoint HTTP response body for the
// "BadRequest" error.
type DeletePastMeetingBadRequestResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeletePastMeetingInternalServerErrorResponseBody is the type of the "Meeting
// Service" service "delete-past-meeting" endpoint HTTP response body for the
// "InternalServerError" error.
type DeletePastMeetingInternalServerErrorResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeletePastMeetingNotFoundResponseBody is the type of the "Meeting Service"
// service "delete-past-meeting" endpoint HTTP response body for the "NotFound"
// error.
type DeletePastMeetingNotFoundResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeletePastMeetingServiceUnavailableResponseBody is the type of the "Meeting
// Service" service "delete-past-meeting" endpoint HTTP response body for the
// "ServiceUnavailable" error.
type DeletePastMeetingServiceUnavailableResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetPastMeetingParticipantsInternalServerErrorResponseBody is the type of the
// "Meeting Service" service "get-past-meeting-participants" endpoint HTTP
// response body for the "InternalServerError" error.
type GetPastMeetingParticipantsInternalServerErrorResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetPastMeetingParticipantsNotFoundResponseBody is the type of the "Meeting
// Service" service "get-past-meeting-participants" endpoint HTTP response body
// for the "NotFound" error.
type GetPastMeetingParticipantsNotFoundResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetPastMeetingParticipantsServiceUnavailableResponseBody is the type of the
// "Meeting Service" service "get-past-meeting-participants" endpoint HTTP
// response body for the "ServiceUnavailable" error.
type GetPastMeetingParticipantsServiceUnavailableResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreatePastMeetingParticipantBadRequestResponseBody is the type of the
// "Meeting Service" service "create-past-meeting-participant" endpoint HTTP
// response body for the "BadRequest" error.
type CreatePastMeetingParticipantBadRequestResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreatePastMeetingParticipantConflictResponseBody is the type of the "Meeting
// Service" service "create-past-meeting-participant" endpoint HTTP response
// body for the "Conflict" error.
type CreatePastMeetingParticipantConflictResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreatePastMeetingParticipantInternalServerErrorResponseBody is the type of
// the "Meeting Service" service "create-past-meeting-participant" endpoint
// HTTP response body for the "InternalServerError" error.
type CreatePastMeetingParticipantInternalServerErrorResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreatePastMeetingParticipantNotFoundResponseBody is the type of the "Meeting
// Service" service "create-past-meeting-participant" endpoint HTTP response
// body for the "NotFound" error.
type CreatePastMeetingParticipantNotFoundResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreatePastMeetingParticipantServiceUnavailableResponseBody is the type of
// the "Meeting Service" service "create-past-meeting-participant" endpoint
// HTTP response body for the "ServiceUnavailable" error.
type CreatePastMeetingParticipantServiceUnavailableResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetPastMeetingParticipantInternalServerErrorResponseBody is the type of the
// "Meeting Service" service "get-past-meeting-participant" endpoint HTTP
// response body for the "InternalServerError" error.
type GetPastMeetingParticipantInternalServerErrorResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetPastMeetingParticipantNotFoundResponseBody is the type of the "Meeting
// Service" service "get-past-meeting-participant" endpoint HTTP response body
// for the "NotFound" error.
type GetPastMeetingParticipantNotFoundResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetPastMeetingParticipantServiceUnavailableResponseBody is the type of the
// "Meeting Service" service "get-past-meeting-participant" endpoint HTTP
// response body for the "ServiceUnavailable" error.
type GetPastMeetingParticipantServiceUnavailableResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdatePastMeetingParticipantBadRequestResponseBody is the type of the
// "Meeting Service" service "update-past-meeting-participant" endpoint HTTP
// response body for the "BadRequest" error.
type UpdatePastMeetingParticipantBadRequestResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdatePastMeetingParticipantConflictResponseBody is the type of the "Meeting
// Service" service "update-past-meeting-participant" endpoint HTTP response
// body for the "Conflict" error.
type UpdatePastMeetingParticipantConflictResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdatePastMeetingParticipantInternalServerErrorResponseBody is the type of
// the "Meeting Service" service "update-past-meeting-participant" endpoint
// HTTP response body for the "InternalServerError" error.
type UpdatePastMeetingParticipantInternalServerErrorResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdatePastMeetingParticipantNotFoundResponseBody is the type of the "Meeting
// Service" service "update-past-meeting-participant" endpoint HTTP response
// body for the "NotFound" error.
type UpdatePastMeetingParticipantNotFoundResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdatePastMeetingParticipantServiceUnavailableResponseBody is the type of
// the "Meeting Service" service "update-past-meeting-participant" endpoint
// HTTP response body for the "ServiceUnavailable" error.
type UpdatePastMeetingParticipantServiceUnavailableResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeletePastMeetingParticipantBadRequestResponseBody is the type of the
// "Meeting Service" service "delete-past-meeting-participant" endpoint HTTP
// response body for the "BadRequest" error.
type DeletePastMeetingParticipantBadRequestResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeletePastMeetingParticipantInternalServerErrorResponseBody is the type of
// the "Meeting Service" service "delete-past-meeting-participant" endpoint
// HTTP response body for the "InternalServerError" error.
type DeletePastMeetingParticipantInternalServerErrorResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeletePastMeetingParticipantNotFoundResponseBody is the type of the "Meeting
// Service" service "delete-past-meeting-participant" endpoint HTTP response
// body for the "NotFound" error.
type DeletePastMeetingParticipantNotFoundResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeletePastMeetingParticipantServiceUnavailableResponseBody is the type of
// the "Meeting Service" service "delete-past-meeting-participant" endpoint
// HTTP response body for the "ServiceUnavailable" error.
type DeletePastMeetingParticipantServiceUnavailableResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetPastMeetingSummariesInternalServerErrorResponseBody is the type of the
// "Meeting Service" service "get-past-meeting-summaries" endpoint HTTP
// response body for the "InternalServerError" error.
type GetPastMeetingSummariesInternalServerErrorResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetPastMeetingSummariesNotFoundResponseBody is the type of the "Meeting
// Service" service "get-past-meeting-summaries" endpoint HTTP response body
// for the "NotFound" error.
type GetPastMeetingSummariesNotFoundResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetPastMeetingSummariesServiceUnavailableResponseBody is the type of the
// "Meeting Service" service "get-past-meeting-summaries" endpoint HTTP
// response body for the "ServiceUnavailable" error.
type GetPastMeetingSummariesServiceUnavailableResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetPastMeetingSummaryInternalServerErrorResponseBody is the type of the
// "Meeting Service" service "get-past-meeting-summary" endpoint HTTP response
// body for the "InternalServerError" error.
type GetPastMeetingSummaryInternalServerErrorResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetPastMeetingSummaryNotFoundResponseBody is the type of the "Meeting
// Service" service "get-past-meeting-summary" endpoint HTTP response body for
// the "NotFound" error.
type GetPastMeetingSummaryNotFoundResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetPastMeetingSummaryServiceUnavailableResponseBody is the type of the
// "Meeting Service" service "get-past-meeting-summary" endpoint HTTP response
// body for the "ServiceUnavailable" error.
type GetPastMeetingSummaryServiceUnavailableResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdatePastMeetingSummaryBadRequestResponseBody is the type of the "Meeting
// Service" service "update-past-meeting-summary" endpoint HTTP response body
// for the "BadRequest" error.
type UpdatePastMeetingSummaryBadRequestResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdatePastMeetingSummaryInternalServerErrorResponseBody is the type of the
// "Meeting Service" service "update-past-meeting-summary" endpoint HTTP
// response body for the "InternalServerError" error.
type UpdatePastMeetingSummaryInternalServerErrorResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdatePastMeetingSummaryNotFoundResponseBody is the type of the "Meeting
// Service" service "update-past-meeting-summary" endpoint HTTP response body
// for the "NotFound" error.
type UpdatePastMeetingSummaryNotFoundResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdatePastMeetingSummaryServiceUnavailableResponseBody is the type of the
// "Meeting Service" service "update-past-meeting-summary" endpoint HTTP
// response body for the "ServiceUnavailable" error.
type UpdatePastMeetingSummaryServiceUnavailableResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// ReadyzServiceUnavailableResponseBody is the type of the "Meeting Service"
// service "readyz" endpoint HTTP response body for the "ServiceUnavailable"
// error.
type ReadyzServiceUnavailableResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// MeetingFullResponseBody is used to define fields on response body types.
type MeetingFullResponseBody struct {
	// The UID of the meeting
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// The UID of the LF project
	ProjectUID *string `form:"project_uid,omitempty" json:"project_uid,omitempty" xml:"project_uid,omitempty"`
	// The start time of the meeting in RFC3339 format
	StartTime *string `form:"start_time,omitempty" json:"start_time,omitempty" xml:"start_time,omitempty"`
	// The duration of the meeting in minutes
	Duration *int `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	// The timezone of the meeting (e.g. 'America/New_York')
	Timezone *string `form:"timezone,omitempty" json:"timezone,omitempty" xml:"timezone,omitempty"`
	// The recurrence of the meeting
	Recurrence *RecurrenceResponseBody `form:"recurrence,omitempty" json:"recurrence,omitempty" xml:"recurrence,omitempty"`
	// The title of the meeting
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// The description of the meeting
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The committees associated with the meeting
	Committees []*CommitteeResponseBody `form:"committees,omitempty" json:"committees,omitempty" xml:"committees,omitempty"`
	// The platform name of where the meeting is hosted
	Platform *string `form:"platform,omitempty" json:"platform,omitempty" xml:"platform,omitempty"`
	// The number of minutes that users are allowed to join the meeting early
	// without being kicked out
	EarlyJoinTimeMinutes *int `form:"early_join_time_minutes,omitempty" json:"early_join_time_minutes,omitempty" xml:"early_join_time_minutes,omitempty"`
	// The type of meeting. This is usually dependent on the committee(s)
	// associated with the meeting
	MeetingType *string `form:"meeting_type,omitempty" json:"meeting_type,omitempty" xml:"meeting_type,omitempty"`
	// The visibility of the meeting's existence to other users
	Visibility *string `form:"visibility,omitempty" json:"visibility,omitempty" xml:"visibility,omitempty"`
	// The restrictedness of joining the meeting (i.e. is the meeting restricted to
	// only invited users or anyone?)
	Restricted *bool `form:"restricted,omitempty" json:"restricted,omitempty" xml:"restricted,omitempty"`
	// The visibility of artifacts to users (e.g. public, only for registrants,
	// only for hosts)
	ArtifactVisibility *string `form:"artifact_visibility,omitempty" json:"artifact_visibility,omitempty" xml:"artifact_visibility,omitempty"`
	// The public join URL for participants to join the meeting via the LFX
	// platform (e.g.
	// 'https://zoom-lfx.platform.linuxfoundation.org/meeting/12343245463')
	PublicLink *string `form:"public_link,omitempty" json:"public_link,omitempty" xml:"public_link,omitempty"`
	// Unique, non-guessable, password for the meeting - is needed to join a
	// meeting and is included in invites
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	// The number of registrants that have an email delivery error with their
	// invite. The delivery errors are counted as the last invite that was sent to
	// the registrant, so if a registrant previously had a delivery error but not
	// in their most recent invite received, then it does not count towards this
	// field value.
	EmailDeliveryErrorCount *int `form:"email_delivery_error_count,omitempty" json:"email_delivery_error_count,omitempty" xml:"email_delivery_error_count,omitempty"`
	// Whether recording is enabled for the meeting
	RecordingEnabled *bool `form:"recording_enabled,omitempty" json:"recording_enabled,omitempty" xml:"recording_enabled,omitempty"`
	// Whether transcription is enabled for the meeting
	TranscriptEnabled *bool `form:"transcript_enabled,omitempty" json:"transcript_enabled,omitempty" xml:"transcript_enabled,omitempty"`
	// Whether automatic youtube uploading is enabled for the meeting
	YoutubeUploadEnabled *bool `form:"youtube_upload_enabled,omitempty" json:"youtube_upload_enabled,omitempty" xml:"youtube_upload_enabled,omitempty"`
	// For zoom platform meetings: the configuration for the meeting
	ZoomConfig *ZoomConfigFullResponseBody `form:"zoom_config,omitempty" json:"zoom_config,omitempty" xml:"zoom_config,omitempty"`
	// The number of registrants for the meeting
	RegistrantCount *int `form:"registrant_count,omitempty" json:"registrant_count,omitempty" xml:"registrant_count,omitempty"`
	// The number of registrants that have declined the meeting invitation
	RegistrantResponseDeclinedCount *int `form:"registrant_response_declined_count,omitempty" json:"registrant_response_declined_count,omitempty" xml:"registrant_response_declined_count,omitempty"`
	// The number of registrants that have accepted the meeting invitation
	RegistrantResponseAcceptedCount *int `form:"registrant_response_accepted_count,omitempty" json:"registrant_response_accepted_count,omitempty" xml:"registrant_response_accepted_count,omitempty"`
	// Array of meeting occurrences (read-only from platform API)
	Occurrences []*OccurrenceResponseBody `form:"occurrences,omitempty" json:"occurrences,omitempty" xml:"occurrences,omitempty"`
	// The date and time the resource was created
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The date and time the resource was last updated
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// The organizers of the meeting. This is a list of LFIDs of the meeting
	// organizers.
	Organizers []string `form:"organizers,omitempty" json:"organizers,omitempty" xml:"organizers,omitempty"`
}

// RecurrenceResponseBody is used to define fields on response body types.
type RecurrenceResponseBody struct {
	// The recurrence type
	Type *int `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Define the interval at which the meeting should recur.
	// For instance, if you would like to schedule a meeting that recurs every two
	// months,
	// you must set the value of this field as '2' and the value of the 'type'
	// parameter as '3'.
	// For a daily meeting, the maximum interval you can set is '90' days.
	// For a weekly meeting the maximum interval that you can set is of '12' weeks.
	// For a monthly meeting, there is a maximum of '3' months.
	RepeatInterval *int `form:"repeat_interval,omitempty" json:"repeat_interval,omitempty" xml:"repeat_interval,omitempty"`
	// This field is required if you're scheduling a recurring meeting of type '2'
	// to state which day(s)
	// of the week the meeting should repeat. The value for this field could be a
	// number between '1' to '7' in string format.
	// For instance, if the meeting should recur on Sunday, provide '1' as the
	// value of this field.
	// If you would like the meeting to occur on multiple days of a week, you
	// should provide comma separated values for this field.
	// For instance, if the meeting should recur on Sundays and Tuesdays provide
	// '1,3' as the value of this field.
	// 1 - Sunday
	// 2 - Monday
	// 3 - Tuesday
	// 4 - Wednesday
	// 5 - Thursday
	// 6 - Friday
	// 7 - Saturday
	WeeklyDays *string `form:"weekly_days,omitempty" json:"weekly_days,omitempty" xml:"weekly_days,omitempty"`
	// Use this field only if you're scheduling a recurring meeting of type '3' to
	// state which day in a month, the meeting should recur. The value range is
	// from 1 to 31. For instance, if you would like the meeting to recur on 23rd
	// of each month, provide '23' as the value of this field and '1' as the value
	// of the 'repeat_interval' field. Instead, if you would like the meeting to
	// recur every three months, on 23rd of the month, change the value of the
	// 'repeat_interval' field to '3'.
	MonthlyDay *int `form:"monthly_day,omitempty" json:"monthly_day,omitempty" xml:"monthly_day,omitempty"`
	// Use this field only if you're scheduling a recurring meeting of type '3' to
	// state the week of the month when the meeting should recur. If you use this
	// field, you must also use the 'monthly_week_day' field to state the day of
	// the week when the meeting should recur. '-1' - Last week of the month. 1 -
	// First week of the month. 2 - Second week of the month. 3 - Third week of the
	// month. 4 - Fourth week of the month.
	MonthlyWeek *int `form:"monthly_week,omitempty" json:"monthly_week,omitempty" xml:"monthly_week,omitempty"`
	// Use this field only if you're scheduling a recurring meeting of type '3' to
	// state a specific day in a week when the monthly meeting should recur. To use
	// this field, you must also use the 'monthly_week' field. 1 - Sunday 2 -
	// Monday 3 - Tuesday 4 - Wednesday 5 - Thursday 6 - Friday 7 - Saturday
	MonthlyWeekDay *int `form:"monthly_week_day,omitempty" json:"monthly_week_day,omitempty" xml:"monthly_week_day,omitempty"`
	// Select how many times the meeting should recur before it is canceled. Cannot
	// be used with 'end_date_time'.
	EndTimes *int `form:"end_times,omitempty" json:"end_times,omitempty" xml:"end_times,omitempty"`
	// Select the final date on which the meeting will recur before it is canceled.
	// Cannot be used with 'end_times'. should be in GMT. should be in
	// 'yyyy-MM-ddTHH:mm:ssZ' format.
	EndDateTime *string `form:"end_date_time,omitempty" json:"end_date_time,omitempty" xml:"end_date_time,omitempty"`
}

// CommitteeResponseBody is used to define fields on response body types.
type CommitteeResponseBody struct {
	// The UID of the committee
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// The committee voting statuses required for committee members to be added to
	// the meeting
	AllowedVotingStatuses []string `form:"allowed_voting_statuses,omitempty" json:"allowed_voting_statuses,omitempty" xml:"allowed_voting_statuses,omitempty"`
}

// ZoomConfigFullResponseBody is used to define fields on response body types.
type ZoomConfigFullResponseBody struct {
	// The ID of the created meeting in Zoom
	MeetingID *string `form:"meeting_id,omitempty" json:"meeting_id,omitempty" xml:"meeting_id,omitempty"`
	// The zoom-defined passcode for the meeting. Required if joining via dial-in,
	// or by clicking 'join meeting' in the zoom client & putting in the meeting id
	// and passcode.
	Passcode *string `form:"passcode,omitempty" json:"passcode,omitempty" xml:"passcode,omitempty"`
	// For zoom platform meetings: whether Zoom AI companion is enabled
	AiCompanionEnabled *bool `form:"ai_companion_enabled,omitempty" json:"ai_companion_enabled,omitempty" xml:"ai_companion_enabled,omitempty"`
	// For zoom platform meetings: whether AI summary approval is required
	AiSummaryRequireApproval *bool `form:"ai_summary_require_approval,omitempty" json:"ai_summary_require_approval,omitempty" xml:"ai_summary_require_approval,omitempty"`
}

// OccurrenceResponseBody is used to define fields on response body types.
type OccurrenceResponseBody struct {
	// ID of the occurrence, also the start time in unix time
	OccurrenceID *string `form:"occurrence_id,omitempty" json:"occurrence_id,omitempty" xml:"occurrence_id,omitempty"`
	// GMT start time of occurrence
	StartTime *string `form:"start_time,omitempty" json:"start_time,omitempty" xml:"start_time,omitempty"`
	// Meeting title for this occurrence
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Meeting description for this occurrence
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Occurrence duration in minutes
	Duration *int `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	// The recurrence pattern for this occurrence onwards if there is one
	Recurrence *RecurrenceResponseBody `form:"recurrence,omitempty" json:"recurrence,omitempty" xml:"recurrence,omitempty"`
	// Number of registrants for this meeting occurrence
	RegistrantCount *int `form:"registrant_count,omitempty" json:"registrant_count,omitempty" xml:"registrant_count,omitempty"`
	// Number of registrants who declined the invite for this occurrence
	ResponseCountNo *int `form:"response_count_no,omitempty" json:"response_count_no,omitempty" xml:"response_count_no,omitempty"`
	// Number of registrants who accepted the invite for this occurrence
	ResponseCountYes *int `form:"response_count_yes,omitempty" json:"response_count_yes,omitempty" xml:"response_count_yes,omitempty"`
	// Whether the occurrence is cancelled
	IsCancelled *bool `form:"is_cancelled,omitempty" json:"is_cancelled,omitempty" xml:"is_cancelled,omitempty"`
}

// RecurrenceRequestBody is used to define fields on request body types.
type RecurrenceRequestBody struct {
	// The recurrence type
	Type int `form:"type" json:"type" xml:"type"`
	// Define the interval at which the meeting should recur.
	// For instance, if you would like to schedule a meeting that recurs every two
	// months,
	// you must set the value of this field as '2' and the value of the 'type'
	// parameter as '3'.
	// For a daily meeting, the maximum interval you can set is '90' days.
	// For a weekly meeting the maximum interval that you can set is of '12' weeks.
	// For a monthly meeting, there is a maximum of '3' months.
	RepeatInterval int `form:"repeat_interval" json:"repeat_interval" xml:"repeat_interval"`
	// This field is required if you're scheduling a recurring meeting of type '2'
	// to state which day(s)
	// of the week the meeting should repeat. The value for this field could be a
	// number between '1' to '7' in string format.
	// For instance, if the meeting should recur on Sunday, provide '1' as the
	// value of this field.
	// If you would like the meeting to occur on multiple days of a week, you
	// should provide comma separated values for this field.
	// For instance, if the meeting should recur on Sundays and Tuesdays provide
	// '1,3' as the value of this field.
	// 1 - Sunday
	// 2 - Monday
	// 3 - Tuesday
	// 4 - Wednesday
	// 5 - Thursday
	// 6 - Friday
	// 7 - Saturday
	WeeklyDays *string `form:"weekly_days,omitempty" json:"weekly_days,omitempty" xml:"weekly_days,omitempty"`
	// Use this field only if you're scheduling a recurring meeting of type '3' to
	// state which day in a month, the meeting should recur. The value range is
	// from 1 to 31. For instance, if you would like the meeting to recur on 23rd
	// of each month, provide '23' as the value of this field and '1' as the value
	// of the 'repeat_interval' field. Instead, if you would like the meeting to
	// recur every three months, on 23rd of the month, change the value of the
	// 'repeat_interval' field to '3'.
	MonthlyDay *int `form:"monthly_day,omitempty" json:"monthly_day,omitempty" xml:"monthly_day,omitempty"`
	// Use this field only if you're scheduling a recurring meeting of type '3' to
	// state the week of the month when the meeting should recur. If you use this
	// field, you must also use the 'monthly_week_day' field to state the day of
	// the week when the meeting should recur. '-1' - Last week of the month. 1 -
	// First week of the month. 2 - Second week of the month. 3 - Third week of the
	// month. 4 - Fourth week of the month.
	MonthlyWeek *int `form:"monthly_week,omitempty" json:"monthly_week,omitempty" xml:"monthly_week,omitempty"`
	// Use this field only if you're scheduling a recurring meeting of type '3' to
	// state a specific day in a week when the monthly meeting should recur. To use
	// this field, you must also use the 'monthly_week' field. 1 - Sunday 2 -
	// Monday 3 - Tuesday 4 - Wednesday 5 - Thursday 6 - Friday 7 - Saturday
	MonthlyWeekDay *int `form:"monthly_week_day,omitempty" json:"monthly_week_day,omitempty" xml:"monthly_week_day,omitempty"`
	// Select how many times the meeting should recur before it is canceled. Cannot
	// be used with 'end_date_time'.
	EndTimes *int `form:"end_times,omitempty" json:"end_times,omitempty" xml:"end_times,omitempty"`
	// Select the final date on which the meeting will recur before it is canceled.
	// Cannot be used with 'end_times'. should be in GMT. should be in
	// 'yyyy-MM-ddTHH:mm:ssZ' format.
	EndDateTime *string `form:"end_date_time,omitempty" json:"end_date_time,omitempty" xml:"end_date_time,omitempty"`
}

// CommitteeRequestBody is used to define fields on request body types.
type CommitteeRequestBody struct {
	// The UID of the committee
	UID string `form:"uid" json:"uid" xml:"uid"`
	// The committee voting statuses required for committee members to be added to
	// the meeting
	AllowedVotingStatuses []string `form:"allowed_voting_statuses" json:"allowed_voting_statuses" xml:"allowed_voting_statuses"`
}

// ZoomConfigPostRequestBody is used to define fields on request body types.
type ZoomConfigPostRequestBody struct {
	// For zoom platform meetings: whether Zoom AI companion is enabled
	AiCompanionEnabled *bool `form:"ai_companion_enabled,omitempty" json:"ai_companion_enabled,omitempty" xml:"ai_companion_enabled,omitempty"`
	// For zoom platform meetings: whether AI summary approval is required
	AiSummaryRequireApproval *bool `form:"ai_summary_require_approval,omitempty" json:"ai_summary_require_approval,omitempty" xml:"ai_summary_require_approval,omitempty"`
}

// MeetingBaseResponseBody is used to define fields on response body types.
type MeetingBaseResponseBody struct {
	// The UID of the meeting
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// The UID of the LF project
	ProjectUID *string `form:"project_uid,omitempty" json:"project_uid,omitempty" xml:"project_uid,omitempty"`
	// The start time of the meeting in RFC3339 format
	StartTime *string `form:"start_time,omitempty" json:"start_time,omitempty" xml:"start_time,omitempty"`
	// The duration of the meeting in minutes
	Duration *int `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	// The timezone of the meeting (e.g. 'America/New_York')
	Timezone *string `form:"timezone,omitempty" json:"timezone,omitempty" xml:"timezone,omitempty"`
	// The recurrence of the meeting
	Recurrence *RecurrenceResponseBody `form:"recurrence,omitempty" json:"recurrence,omitempty" xml:"recurrence,omitempty"`
	// The title of the meeting
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// The description of the meeting
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The committees associated with the meeting
	Committees []*CommitteeResponseBody `form:"committees,omitempty" json:"committees,omitempty" xml:"committees,omitempty"`
	// The platform name of where the meeting is hosted
	Platform *string `form:"platform,omitempty" json:"platform,omitempty" xml:"platform,omitempty"`
	// The number of minutes that users are allowed to join the meeting early
	// without being kicked out
	EarlyJoinTimeMinutes *int `form:"early_join_time_minutes,omitempty" json:"early_join_time_minutes,omitempty" xml:"early_join_time_minutes,omitempty"`
	// The type of meeting. This is usually dependent on the committee(s)
	// associated with the meeting
	MeetingType *string `form:"meeting_type,omitempty" json:"meeting_type,omitempty" xml:"meeting_type,omitempty"`
	// The visibility of the meeting's existence to other users
	Visibility *string `form:"visibility,omitempty" json:"visibility,omitempty" xml:"visibility,omitempty"`
	// The restrictedness of joining the meeting (i.e. is the meeting restricted to
	// only invited users or anyone?)
	Restricted *bool `form:"restricted,omitempty" json:"restricted,omitempty" xml:"restricted,omitempty"`
	// The visibility of artifacts to users (e.g. public, only for registrants,
	// only for hosts)
	ArtifactVisibility *string `form:"artifact_visibility,omitempty" json:"artifact_visibility,omitempty" xml:"artifact_visibility,omitempty"`
	// The public join URL for participants to join the meeting via the LFX
	// platform (e.g.
	// 'https://zoom-lfx.platform.linuxfoundation.org/meeting/12343245463')
	PublicLink *string `form:"public_link,omitempty" json:"public_link,omitempty" xml:"public_link,omitempty"`
	// Unique, non-guessable, password for the meeting - is needed to join a
	// meeting and is included in invites
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	// The number of registrants that have an email delivery error with their
	// invite. The delivery errors are counted as the last invite that was sent to
	// the registrant, so if a registrant previously had a delivery error but not
	// in their most recent invite received, then it does not count towards this
	// field value.
	EmailDeliveryErrorCount *int `form:"email_delivery_error_count,omitempty" json:"email_delivery_error_count,omitempty" xml:"email_delivery_error_count,omitempty"`
	// Whether recording is enabled for the meeting
	RecordingEnabled *bool `form:"recording_enabled,omitempty" json:"recording_enabled,omitempty" xml:"recording_enabled,omitempty"`
	// Whether transcription is enabled for the meeting
	TranscriptEnabled *bool `form:"transcript_enabled,omitempty" json:"transcript_enabled,omitempty" xml:"transcript_enabled,omitempty"`
	// Whether automatic youtube uploading is enabled for the meeting
	YoutubeUploadEnabled *bool `form:"youtube_upload_enabled,omitempty" json:"youtube_upload_enabled,omitempty" xml:"youtube_upload_enabled,omitempty"`
	// For zoom platform meetings: the configuration for the meeting
	ZoomConfig *ZoomConfigFullResponseBody `form:"zoom_config,omitempty" json:"zoom_config,omitempty" xml:"zoom_config,omitempty"`
	// The number of registrants for the meeting
	RegistrantCount *int `form:"registrant_count,omitempty" json:"registrant_count,omitempty" xml:"registrant_count,omitempty"`
	// The number of registrants that have declined the meeting invitation
	RegistrantResponseDeclinedCount *int `form:"registrant_response_declined_count,omitempty" json:"registrant_response_declined_count,omitempty" xml:"registrant_response_declined_count,omitempty"`
	// The number of registrants that have accepted the meeting invitation
	RegistrantResponseAcceptedCount *int `form:"registrant_response_accepted_count,omitempty" json:"registrant_response_accepted_count,omitempty" xml:"registrant_response_accepted_count,omitempty"`
	// Array of meeting occurrences (read-only from platform API)
	Occurrences []*OccurrenceResponseBody `form:"occurrences,omitempty" json:"occurrences,omitempty" xml:"occurrences,omitempty"`
	// The date and time the resource was created
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The date and time the resource was last updated
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// MeetingSettingsResponseBody is used to define fields on response body types.
type MeetingSettingsResponseBody struct {
	// The UID of the meeting
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// The organizers of the meeting. This is a list of LFIDs of the meeting
	// organizers.
	Organizers []string `form:"organizers,omitempty" json:"organizers,omitempty" xml:"organizers,omitempty"`
	// The date and time the resource was created
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The date and time the resource was last updated
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// RegistrantResponseBody is used to define fields on response body types.
type RegistrantResponseBody struct {
	// The UID of the registrant
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// The UID of the meeting
	MeetingUID *string `form:"meeting_uid,omitempty" json:"meeting_uid,omitempty" xml:"meeting_uid,omitempty"`
	// User's email address
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// User's first name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// User's last name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// If user should have access as a meeting host
	Host *bool `form:"host,omitempty" json:"host,omitempty" xml:"host,omitempty"`
	// Type of registrant
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// The UID of the committee if registrant is a committee member
	CommitteeUID *string `form:"committee_uid,omitempty" json:"committee_uid,omitempty" xml:"committee_uid,omitempty"`
	// User's job title
	JobTitle *string `form:"job_title,omitempty" json:"job_title,omitempty" xml:"job_title,omitempty"`
	// The ID of the specific occurrence the user should be invited to. If blank,
	// user is invited to all occurrences
	OccurrenceID *string `form:"occurrence_id,omitempty" json:"occurrence_id,omitempty" xml:"occurrence_id,omitempty"`
	// User's organization
	OrgName *string `form:"org_name,omitempty" json:"org_name,omitempty" xml:"org_name,omitempty"`
	// Whether the registrant is in an organization that has a membership with the
	// LF. If unknown, don't pass this field; the API will find the value by default
	OrgIsMember *bool `form:"org_is_member,omitempty" json:"org_is_member,omitempty" xml:"org_is_member,omitempty"`
	// Whether the registrant is in an organization that has a membership with the
	// project (of the meeting). If unknown, don't pass this field; the API will
	// find the value by default
	OrgIsProjectMember *bool `form:"org_is_project_member,omitempty" json:"org_is_project_member,omitempty" xml:"org_is_project_member,omitempty"`
	// User's avatar URL
	AvatarURL *string `form:"avatar_url,omitempty" json:"avatar_url,omitempty" xml:"avatar_url,omitempty"`
	// User's LF ID
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// The date and time the resource was created
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The date and time the resource was last updated
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// PastMeetingResponseBody is used to define fields on response body types.
type PastMeetingResponseBody struct {
	// The unique identifier of the past meeting
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// The UID of the original meeting
	MeetingUID *string `form:"meeting_uid,omitempty" json:"meeting_uid,omitempty" xml:"meeting_uid,omitempty"`
	// The occurrence ID for recurring meetings
	OccurrenceID *string `form:"occurrence_id,omitempty" json:"occurrence_id,omitempty" xml:"occurrence_id,omitempty"`
	// The UID of the LF project
	ProjectUID *string `form:"project_uid,omitempty" json:"project_uid,omitempty" xml:"project_uid,omitempty"`
	// The scheduled start time of the past meeting
	ScheduledStartTime *string `form:"scheduled_start_time,omitempty" json:"scheduled_start_time,omitempty" xml:"scheduled_start_time,omitempty"`
	// The scheduled end time of the past meeting
	ScheduledEndTime *string `form:"scheduled_end_time,omitempty" json:"scheduled_end_time,omitempty" xml:"scheduled_end_time,omitempty"`
	// The duration of the meeting in minutes
	Duration *int `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	// The timezone of the meeting (e.g. 'America/New_York')
	Timezone *string `form:"timezone,omitempty" json:"timezone,omitempty" xml:"timezone,omitempty"`
	// The recurrence of the meeting
	Recurrence *RecurrenceResponseBody `form:"recurrence,omitempty" json:"recurrence,omitempty" xml:"recurrence,omitempty"`
	// The title of the meeting
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// The description of the meeting
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The committees associated with the meeting
	Committees []*CommitteeResponseBody `form:"committees,omitempty" json:"committees,omitempty" xml:"committees,omitempty"`
	// The platform name of where the meeting is hosted
	Platform *string `form:"platform,omitempty" json:"platform,omitempty" xml:"platform,omitempty"`
	// The ID of the meeting in the platform (e.g. Zoom meeting ID)
	PlatformMeetingID *string `form:"platform_meeting_id,omitempty" json:"platform_meeting_id,omitempty" xml:"platform_meeting_id,omitempty"`
	// The number of minutes that users are allowed to join the meeting early
	// without being kicked out
	EarlyJoinTimeMinutes *int `form:"early_join_time_minutes,omitempty" json:"early_join_time_minutes,omitempty" xml:"early_join_time_minutes,omitempty"`
	// The type of meeting. This is usually dependent on the committee(s)
	// associated with the meeting
	MeetingType *string `form:"meeting_type,omitempty" json:"meeting_type,omitempty" xml:"meeting_type,omitempty"`
	// The visibility of the meeting's existence to other users
	Visibility *string `form:"visibility,omitempty" json:"visibility,omitempty" xml:"visibility,omitempty"`
	// The restrictedness of joining the meeting (i.e. is the meeting restricted to
	// only invited users or anyone?)
	Restricted *bool `form:"restricted,omitempty" json:"restricted,omitempty" xml:"restricted,omitempty"`
	// The visibility of artifacts to users (e.g. public, only for registrants,
	// only for hosts)
	ArtifactVisibility *string `form:"artifact_visibility,omitempty" json:"artifact_visibility,omitempty" xml:"artifact_visibility,omitempty"`
	// The public join URL for participants to join the meeting via the LFX
	// platform (e.g.
	// 'https://zoom-lfx.platform.linuxfoundation.org/meeting/12343245463')
	PublicLink *string `form:"public_link,omitempty" json:"public_link,omitempty" xml:"public_link,omitempty"`
	// Whether recording is enabled for the meeting
	RecordingEnabled *bool `form:"recording_enabled,omitempty" json:"recording_enabled,omitempty" xml:"recording_enabled,omitempty"`
	// Whether transcription is enabled for the meeting
	TranscriptEnabled *bool `form:"transcript_enabled,omitempty" json:"transcript_enabled,omitempty" xml:"transcript_enabled,omitempty"`
	// Whether automatic youtube uploading is enabled for the meeting
	YoutubeUploadEnabled *bool `form:"youtube_upload_enabled,omitempty" json:"youtube_upload_enabled,omitempty" xml:"youtube_upload_enabled,omitempty"`
	// For zoom platform meetings: the configuration for the meeting
	ZoomConfig *ZoomConfigFullResponseBody `form:"zoom_config,omitempty" json:"zoom_config,omitempty" xml:"zoom_config,omitempty"`
	// Sessions represent individual start/end periods if a meeting was stopped and
	// restarted
	Sessions []*SessionResponseBody `form:"sessions,omitempty" json:"sessions,omitempty" xml:"sessions,omitempty"`
	// The date and time the resource was created
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The date and time the resource was last updated
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// SessionResponseBody is used to define fields on response body types.
type SessionResponseBody struct {
	// The unique identifier of the session
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// The start time of the session
	StartTime *string `form:"start_time,omitempty" json:"start_time,omitempty" xml:"start_time,omitempty"`
	// The end time of the session (may be null if session is ongoing)
	EndTime *string `form:"end_time,omitempty" json:"end_time,omitempty" xml:"end_time,omitempty"`
}

// ZoomConfigFullRequestBody is used to define fields on request body types.
type ZoomConfigFullRequestBody struct {
	// The ID of the created meeting in Zoom
	MeetingID *string `form:"meeting_id,omitempty" json:"meeting_id,omitempty" xml:"meeting_id,omitempty"`
	// The zoom-defined passcode for the meeting. Required if joining via dial-in,
	// or by clicking 'join meeting' in the zoom client & putting in the meeting id
	// and passcode.
	Passcode *string `form:"passcode,omitempty" json:"passcode,omitempty" xml:"passcode,omitempty"`
	// For zoom platform meetings: whether Zoom AI companion is enabled
	AiCompanionEnabled *bool `form:"ai_companion_enabled,omitempty" json:"ai_companion_enabled,omitempty" xml:"ai_companion_enabled,omitempty"`
	// For zoom platform meetings: whether AI summary approval is required
	AiSummaryRequireApproval *bool `form:"ai_summary_require_approval,omitempty" json:"ai_summary_require_approval,omitempty" xml:"ai_summary_require_approval,omitempty"`
}

// SessionRequestBody is used to define fields on request body types.
type SessionRequestBody struct {
	// The unique identifier of the session
	UID string `form:"uid" json:"uid" xml:"uid"`
	// The start time of the session
	StartTime string `form:"start_time" json:"start_time" xml:"start_time"`
	// The end time of the session (may be null if session is ongoing)
	EndTime *string `form:"end_time,omitempty" json:"end_time,omitempty" xml:"end_time,omitempty"`
}

// PastMeetingParticipantResponseBody is used to define fields on response body
// types.
type PastMeetingParticipantResponseBody struct {
	// The UID of the past meeting participant
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// The unique identifier of the past meeting
	PastMeetingUID *string `form:"past_meeting_uid,omitempty" json:"past_meeting_uid,omitempty" xml:"past_meeting_uid,omitempty"`
	// The UID of the meeting
	MeetingUID *string `form:"meeting_uid,omitempty" json:"meeting_uid,omitempty" xml:"meeting_uid,omitempty"`
	// User's email address
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// User's first name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// User's last name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// If user should have access as a meeting host
	Host *bool `form:"host,omitempty" json:"host,omitempty" xml:"host,omitempty"`
	// User's job title
	JobTitle *string `form:"job_title,omitempty" json:"job_title,omitempty" xml:"job_title,omitempty"`
	// User's organization
	OrgName *string `form:"org_name,omitempty" json:"org_name,omitempty" xml:"org_name,omitempty"`
	// Whether the registrant is in an organization that has a membership with the
	// LF. If unknown, don't pass this field; the API will find the value by default
	OrgIsMember *bool `form:"org_is_member,omitempty" json:"org_is_member,omitempty" xml:"org_is_member,omitempty"`
	// Whether the registrant is in an organization that has a membership with the
	// project (of the meeting). If unknown, don't pass this field; the API will
	// find the value by default
	OrgIsProjectMember *bool `form:"org_is_project_member,omitempty" json:"org_is_project_member,omitempty" xml:"org_is_project_member,omitempty"`
	// User's avatar URL
	AvatarURL *string `form:"avatar_url,omitempty" json:"avatar_url,omitempty" xml:"avatar_url,omitempty"`
	// User's LF ID
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Whether the participant was invited to this past meeting
	IsInvited *bool `form:"is_invited,omitempty" json:"is_invited,omitempty" xml:"is_invited,omitempty"`
	// Whether the participant attended this past meeting
	IsAttended *bool `form:"is_attended,omitempty" json:"is_attended,omitempty" xml:"is_attended,omitempty"`
	// List of join/leave sessions for this participant
	Sessions []*ParticipantSessionResponseBody `form:"sessions,omitempty" json:"sessions,omitempty" xml:"sessions,omitempty"`
	// The date and time the resource was created
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The date and time the resource was last updated
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// ParticipantSessionResponseBody is used to define fields on response body
// types.
type ParticipantSessionResponseBody struct {
	// Session UID from the meeting platform (e.g., Zoom)
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// ISO 8601 timestamp when participant joined the session
	JoinTime *string `form:"join_time,omitempty" json:"join_time,omitempty" xml:"join_time,omitempty"`
	// ISO 8601 timestamp when participant left the session (null if still in
	// meeting)
	LeaveTime *string `form:"leave_time,omitempty" json:"leave_time,omitempty" xml:"leave_time,omitempty"`
	// Reason provided by the meeting platform for leaving
	LeaveReason *string `form:"leave_reason,omitempty" json:"leave_reason,omitempty" xml:"leave_reason,omitempty"`
}

// PastMeetingSummaryResponseBody is used to define fields on response body
// types.
type PastMeetingSummaryResponseBody struct {
	// The unique identifier of the past meeting
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// The unique identifier of the past meeting
	PastMeetingUID *string `form:"past_meeting_uid,omitempty" json:"past_meeting_uid,omitempty" xml:"past_meeting_uid,omitempty"`
	// The UID of the original meeting
	MeetingUID *string `form:"meeting_uid,omitempty" json:"meeting_uid,omitempty" xml:"meeting_uid,omitempty"`
	// The platform name of where the meeting is hosted
	Platform *string `form:"platform,omitempty" json:"platform,omitempty" xml:"platform,omitempty"`
	// Password for accessing the summary (if required)
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	// Zoom-specific configuration
	ZoomConfig *PastMeetingSummaryZoomConfigResponseBody `form:"zoom_config,omitempty" json:"zoom_config,omitempty" xml:"zoom_config,omitempty"`
	// The actual summary content
	SummaryData *SummaryDataResponseBody `form:"summary_data,omitempty" json:"summary_data,omitempty" xml:"summary_data,omitempty"`
	// Whether the summary requires approval
	RequiresApproval *bool `form:"requires_approval,omitempty" json:"requires_approval,omitempty" xml:"requires_approval,omitempty"`
	// Whether the summary has been approved
	Approved *bool `form:"approved,omitempty" json:"approved,omitempty" xml:"approved,omitempty"`
	// Whether summary email has been sent
	EmailSent *bool `form:"email_sent,omitempty" json:"email_sent,omitempty" xml:"email_sent,omitempty"`
	// The date and time the resource was created
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The date and time the resource was last updated
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// PastMeetingSummaryZoomConfigResponseBody is used to define fields on
// response body types.
type PastMeetingSummaryZoomConfigResponseBody struct {
	// The ID of the created meeting in Zoom
	MeetingID *string `form:"meeting_id,omitempty" json:"meeting_id,omitempty" xml:"meeting_id,omitempty"`
	// Zoom meeting UUID
	MeetingUUID *string `form:"meeting_uuid,omitempty" json:"meeting_uuid,omitempty" xml:"meeting_uuid,omitempty"`
}

// SummaryDataResponseBody is used to define fields on response body types.
type SummaryDataResponseBody struct {
	// Summary start time
	StartTime *string `form:"start_time,omitempty" json:"start_time,omitempty" xml:"start_time,omitempty"`
	// Summary end time
	EndTime *string `form:"end_time,omitempty" json:"end_time,omitempty" xml:"end_time,omitempty"`
	// Summary title
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Summary overview
	Overview *string `form:"overview,omitempty" json:"overview,omitempty" xml:"overview,omitempty"`
	// Next steps from the meeting
	NextSteps []string `form:"next_steps,omitempty" json:"next_steps,omitempty" xml:"next_steps,omitempty"`
	// Structured summary details
	Details []*SummaryDetailResponseBody `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Edited summary overview
	EditedOverview *string `form:"edited_overview,omitempty" json:"edited_overview,omitempty" xml:"edited_overview,omitempty"`
	// Edited structured summary details
	EditedDetails []*SummaryDetailResponseBody `form:"edited_details,omitempty" json:"edited_details,omitempty" xml:"edited_details,omitempty"`
	// Edited next steps
	EditedNextSteps []string `form:"edited_next_steps,omitempty" json:"edited_next_steps,omitempty" xml:"edited_next_steps,omitempty"`
}

// SummaryDetailResponseBody is used to define fields on response body types.
type SummaryDetailResponseBody struct {
	// Summary label
	Label *string `form:"label,omitempty" json:"label,omitempty" xml:"label,omitempty"`
	// Summary content
	Summary *string `form:"summary,omitempty" json:"summary,omitempty" xml:"summary,omitempty"`
}

// SummaryDetailRequestBody is used to define fields on request body types.
type SummaryDetailRequestBody struct {
	// Summary label
	Label string `form:"label" json:"label" xml:"label"`
	// Summary content
	Summary string `form:"summary" json:"summary" xml:"summary"`
}

// NewCreateMeetingRequestBody builds the HTTP request body from the payload of
// the "create-meeting" endpoint of the "Meeting Service" service.
func NewCreateMeetingRequestBody(p *meetingservice.CreateMeetingPayload) *CreateMeetingRequestBody {
	body := &CreateMeetingRequestBody{
		ProjectUID:           p.ProjectUID,
		StartTime:            p.StartTime,
		Duration:             p.Duration,
		Timezone:             p.Timezone,
		Title:                p.Title,
		Description:          p.Description,
		Platform:             p.Platform,
		EarlyJoinTimeMinutes: p.EarlyJoinTimeMinutes,
		MeetingType:          p.MeetingType,
		Visibility:           p.Visibility,
		Restricted:           p.Restricted,
		ArtifactVisibility:   p.ArtifactVisibility,
		RecordingEnabled:     p.RecordingEnabled,
		TranscriptEnabled:    p.TranscriptEnabled,
		YoutubeUploadEnabled: p.YoutubeUploadEnabled,
	}
	if p.Recurrence != nil {
		body.Recurrence = marshalMeetingserviceRecurrenceToRecurrenceRequestBody(p.Recurrence)
	}
	if p.Committees != nil {
		body.Committees = make([]*CommitteeRequestBody, len(p.Committees))
		for i, val := range p.Committees {
			body.Committees[i] = marshalMeetingserviceCommitteeToCommitteeRequestBody(val)
		}
	}
	if p.Organizers != nil {
		body.Organizers = make([]string, len(p.Organizers))
		for i, val := range p.Organizers {
			body.Organizers[i] = val
		}
	}
	if p.ZoomConfig != nil {
		body.ZoomConfig = marshalMeetingserviceZoomConfigPostToZoomConfigPostRequestBody(p.ZoomConfig)
	}
	return body
}

// NewUpdateMeetingBaseRequestBody builds the HTTP request body from the
// payload of the "update-meeting-base" endpoint of the "Meeting Service"
// service.
func NewUpdateMeetingBaseRequestBody(p *meetingservice.UpdateMeetingBasePayload) *UpdateMeetingBaseRequestBody {
	body := &UpdateMeetingBaseRequestBody{
		ProjectUID:           p.ProjectUID,
		StartTime:            p.StartTime,
		Duration:             p.Duration,
		Timezone:             p.Timezone,
		Title:                p.Title,
		Description:          p.Description,
		Platform:             p.Platform,
		EarlyJoinTimeMinutes: p.EarlyJoinTimeMinutes,
		MeetingType:          p.MeetingType,
		Visibility:           p.Visibility,
		Restricted:           p.Restricted,
		ArtifactVisibility:   p.ArtifactVisibility,
		RecordingEnabled:     p.RecordingEnabled,
		TranscriptEnabled:    p.TranscriptEnabled,
		YoutubeUploadEnabled: p.YoutubeUploadEnabled,
	}
	if p.Recurrence != nil {
		body.Recurrence = marshalMeetingserviceRecurrenceToRecurrenceRequestBody(p.Recurrence)
	}
	if p.Committees != nil {
		body.Committees = make([]*CommitteeRequestBody, len(p.Committees))
		for i, val := range p.Committees {
			body.Committees[i] = marshalMeetingserviceCommitteeToCommitteeRequestBody(val)
		}
	}
	if p.ZoomConfig != nil {
		body.ZoomConfig = marshalMeetingserviceZoomConfigPostToZoomConfigPostRequestBody(p.ZoomConfig)
	}
	return body
}

// NewUpdateMeetingSettingsRequestBody builds the HTTP request body from the
// payload of the "update-meeting-settings" endpoint of the "Meeting Service"
// service.
func NewUpdateMeetingSettingsRequestBody(p *meetingservice.UpdateMeetingSettingsPayload) *UpdateMeetingSettingsRequestBody {
	body := &UpdateMeetingSettingsRequestBody{}
	if p.Organizers != nil {
		body.Organizers = make([]string, len(p.Organizers))
		for i, val := range p.Organizers {
			body.Organizers[i] = val
		}
	}
	return body
}

// NewCreateMeetingRegistrantRequestBody builds the HTTP request body from the
// payload of the "create-meeting-registrant" endpoint of the "Meeting Service"
// service.
func NewCreateMeetingRegistrantRequestBody(p *meetingservice.CreateMeetingRegistrantPayload) *CreateMeetingRegistrantRequestBody {
	body := &CreateMeetingRegistrantRequestBody{
		Email:        p.Email,
		FirstName:    p.FirstName,
		LastName:     p.LastName,
		Host:         p.Host,
		JobTitle:     p.JobTitle,
		OrgName:      p.OrgName,
		OccurrenceID: p.OccurrenceID,
		AvatarURL:    p.AvatarURL,
		Username:     p.Username,
	}
	return body
}

// NewUpdateMeetingRegistrantRequestBody builds the HTTP request body from the
// payload of the "update-meeting-registrant" endpoint of the "Meeting Service"
// service.
func NewUpdateMeetingRegistrantRequestBody(p *meetingservice.UpdateMeetingRegistrantPayload) *UpdateMeetingRegistrantRequestBody {
	body := &UpdateMeetingRegistrantRequestBody{
		Email:        p.Email,
		FirstName:    p.FirstName,
		LastName:     p.LastName,
		Host:         p.Host,
		JobTitle:     p.JobTitle,
		OrgName:      p.OrgName,
		OccurrenceID: p.OccurrenceID,
		AvatarURL:    p.AvatarURL,
		Username:     p.Username,
	}
	return body
}

// NewZoomWebhookRequestBody builds the HTTP request body from the payload of
// the "zoom-webhook" endpoint of the "Meeting Service" service.
func NewZoomWebhookRequestBody(p *meetingservice.ZoomWebhookPayload) *ZoomWebhookRequestBody {
	body := &ZoomWebhookRequestBody{
		Event:   p.Event,
		EventTs: p.EventTs,
		Payload: p.Payload,
	}
	return body
}

// NewCreatePastMeetingRequestBody builds the HTTP request body from the
// payload of the "create-past-meeting" endpoint of the "Meeting Service"
// service.
func NewCreatePastMeetingRequestBody(p *meetingservice.CreatePastMeetingPayload) *CreatePastMeetingRequestBody {
	body := &CreatePastMeetingRequestBody{
		MeetingUID:           p.MeetingUID,
		OccurrenceID:         p.OccurrenceID,
		ProjectUID:           p.ProjectUID,
		ScheduledStartTime:   p.ScheduledStartTime,
		ScheduledEndTime:     p.ScheduledEndTime,
		Duration:             p.Duration,
		Timezone:             p.Timezone,
		Title:                p.Title,
		Description:          p.Description,
		Platform:             p.Platform,
		PlatformMeetingID:    p.PlatformMeetingID,
		EarlyJoinTimeMinutes: p.EarlyJoinTimeMinutes,
		MeetingType:          p.MeetingType,
		Visibility:           p.Visibility,
		Restricted:           p.Restricted,
		ArtifactVisibility:   p.ArtifactVisibility,
		PublicLink:           p.PublicLink,
		RecordingEnabled:     p.RecordingEnabled,
		TranscriptEnabled:    p.TranscriptEnabled,
		YoutubeUploadEnabled: p.YoutubeUploadEnabled,
	}
	if p.Recurrence != nil {
		body.Recurrence = marshalMeetingserviceRecurrenceToRecurrenceRequestBody(p.Recurrence)
	}
	if p.Committees != nil {
		body.Committees = make([]*CommitteeRequestBody, len(p.Committees))
		for i, val := range p.Committees {
			body.Committees[i] = marshalMeetingserviceCommitteeToCommitteeRequestBody(val)
		}
	}
	if p.ZoomConfig != nil {
		body.ZoomConfig = marshalMeetingserviceZoomConfigFullToZoomConfigFullRequestBody(p.ZoomConfig)
	}
	if p.Sessions != nil {
		body.Sessions = make([]*SessionRequestBody, len(p.Sessions))
		for i, val := range p.Sessions {
			body.Sessions[i] = marshalMeetingserviceSessionToSessionRequestBody(val)
		}
	}
	return body
}

// NewCreatePastMeetingParticipantRequestBody builds the HTTP request body from
// the payload of the "create-past-meeting-participant" endpoint of the
// "Meeting Service" service.
func NewCreatePastMeetingParticipantRequestBody(p *meetingservice.CreatePastMeetingParticipantPayload) *CreatePastMeetingParticipantRequestBody {
	body := &CreatePastMeetingParticipantRequestBody{
		PastMeetingUID: p.PastMeetingUID,
		Email:          p.Email,
		FirstName:      p.FirstName,
		LastName:       p.LastName,
		Host:           p.Host,
		JobTitle:       p.JobTitle,
		OrgName:        p.OrgName,
		AvatarURL:      p.AvatarURL,
		Username:       p.Username,
		IsInvited:      p.IsInvited,
		IsAttended:     p.IsAttended,
	}
	return body
}

// NewUpdatePastMeetingParticipantRequestBody builds the HTTP request body from
// the payload of the "update-past-meeting-participant" endpoint of the
// "Meeting Service" service.
func NewUpdatePastMeetingParticipantRequestBody(p *meetingservice.UpdatePastMeetingParticipantPayload) *UpdatePastMeetingParticipantRequestBody {
	body := &UpdatePastMeetingParticipantRequestBody{
		Email:      p.Email,
		FirstName:  p.FirstName,
		LastName:   p.LastName,
		Host:       p.Host,
		JobTitle:   p.JobTitle,
		OrgName:    p.OrgName,
		AvatarURL:  p.AvatarURL,
		Username:   p.Username,
		IsInvited:  p.IsInvited,
		IsAttended: p.IsAttended,
	}
	return body
}

// NewUpdatePastMeetingSummaryRequestBody builds the HTTP request body from the
// payload of the "update-past-meeting-summary" endpoint of the "Meeting
// Service" service.
func NewUpdatePastMeetingSummaryRequestBody(p *meetingservice.UpdatePastMeetingSummaryPayload) *UpdatePastMeetingSummaryRequestBody {
	body := &UpdatePastMeetingSummaryRequestBody{
		EditedOverview: p.EditedOverview,
		Approved:       p.Approved,
	}
	if p.EditedDetails != nil {
		body.EditedDetails = make([]*SummaryDetailRequestBody, len(p.EditedDetails))
		for i, val := range p.EditedDetails {
			body.EditedDetails[i] = marshalMeetingserviceSummaryDetailToSummaryDetailRequestBody(val)
		}
	}
	if p.EditedNextSteps != nil {
		body.EditedNextSteps = make([]string, len(p.EditedNextSteps))
		for i, val := range p.EditedNextSteps {
			body.EditedNextSteps[i] = val
		}
	}
	return body
}

// NewGetMeetingsResultOK builds a "Meeting Service" service "get-meetings"
// endpoint result from a HTTP "OK" response.
func NewGetMeetingsResultOK(body *GetMeetingsResponseBody, cacheControl *string) *meetingservice.GetMeetingsResult {
	v := &meetingservice.GetMeetingsResult{}
	v.Meetings = make([]*meetingservice.MeetingFull, len(body.Meetings))
	for i, val := range body.Meetings {
		v.Meetings[i] = unmarshalMeetingFullResponseBodyToMeetingserviceMeetingFull(val)
	}
	v.CacheControl = cacheControl

	return v
}

// NewGetMeetingsBadRequest builds a Meeting Service service get-meetings
// endpoint BadRequest error.
func NewGetMeetingsBadRequest(body *GetMeetingsBadRequestResponseBody) *meetingservice.BadRequestError {
	v := &meetingservice.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetMeetingsInternalServerError builds a Meeting Service service
// get-meetings endpoint InternalServerError error.
func NewGetMeetingsInternalServerError(body *GetMeetingsInternalServerErrorResponseBody) *meetingservice.InternalServerError {
	v := &meetingservice.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetMeetingsServiceUnavailable builds a Meeting Service service
// get-meetings endpoint ServiceUnavailable error.
func NewGetMeetingsServiceUnavailable(body *GetMeetingsServiceUnavailableResponseBody) *meetingservice.ServiceUnavailableError {
	v := &meetingservice.ServiceUnavailableError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewCreateMeetingMeetingFullCreated builds a "Meeting Service" service
// "create-meeting" endpoint result from a HTTP "Created" response.
func NewCreateMeetingMeetingFullCreated(body *CreateMeetingResponseBody) *meetingservice.MeetingFull {
	v := &meetingservice.MeetingFull{
		UID:                             body.UID,
		ProjectUID:                      body.ProjectUID,
		StartTime:                       body.StartTime,
		Duration:                        body.Duration,
		Timezone:                        body.Timezone,
		Title:                           body.Title,
		Description:                     body.Description,
		Platform:                        body.Platform,
		EarlyJoinTimeMinutes:            body.EarlyJoinTimeMinutes,
		MeetingType:                     body.MeetingType,
		Visibility:                      body.Visibility,
		Restricted:                      body.Restricted,
		ArtifactVisibility:              body.ArtifactVisibility,
		PublicLink:                      body.PublicLink,
		Password:                        body.Password,
		EmailDeliveryErrorCount:         body.EmailDeliveryErrorCount,
		RecordingEnabled:                body.RecordingEnabled,
		TranscriptEnabled:               body.TranscriptEnabled,
		YoutubeUploadEnabled:            body.YoutubeUploadEnabled,
		RegistrantCount:                 body.RegistrantCount,
		RegistrantResponseDeclinedCount: body.RegistrantResponseDeclinedCount,
		RegistrantResponseAcceptedCount: body.RegistrantResponseAcceptedCount,
		CreatedAt:                       body.CreatedAt,
		UpdatedAt:                       body.UpdatedAt,
	}
	if body.Recurrence != nil {
		v.Recurrence = unmarshalRecurrenceResponseBodyToMeetingserviceRecurrence(body.Recurrence)
	}
	if body.Committees != nil {
		v.Committees = make([]*meetingservice.Committee, len(body.Committees))
		for i, val := range body.Committees {
			v.Committees[i] = unmarshalCommitteeResponseBodyToMeetingserviceCommittee(val)
		}
	}
	if body.ZoomConfig != nil {
		v.ZoomConfig = unmarshalZoomConfigFullResponseBodyToMeetingserviceZoomConfigFull(body.ZoomConfig)
	}
	if body.Occurrences != nil {
		v.Occurrences = make([]*meetingservice.Occurrence, len(body.Occurrences))
		for i, val := range body.Occurrences {
			v.Occurrences[i] = unmarshalOccurrenceResponseBodyToMeetingserviceOccurrence(val)
		}
	}
	if body.Organizers != nil {
		v.Organizers = make([]string, len(body.Organizers))
		for i, val := range body.Organizers {
			v.Organizers[i] = val
		}
	}

	return v
}

// NewCreateMeetingBadRequest builds a Meeting Service service create-meeting
// endpoint BadRequest error.
func NewCreateMeetingBadRequest(body *CreateMeetingBadRequestResponseBody) *meetingservice.BadRequestError {
	v := &meetingservice.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewCreateMeetingConflict builds a Meeting Service service create-meeting
// endpoint Conflict error.
func NewCreateMeetingConflict(body *CreateMeetingConflictResponseBody) *meetingservice.ConflictError {
	v := &meetingservice.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewCreateMeetingInternalServerError builds a Meeting Service service
// create-meeting endpoint InternalServerError error.
func NewCreateMeetingInternalServerError(body *CreateMeetingInternalServerErrorResponseBody) *meetingservice.InternalServerError {
	v := &meetingservice.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewCreateMeetingServiceUnavailable builds a Meeting Service service
// create-meeting endpoint ServiceUnavailable error.
func NewCreateMeetingServiceUnavailable(body *CreateMeetingServiceUnavailableResponseBody) *meetingservice.ServiceUnavailableError {
	v := &meetingservice.ServiceUnavailableError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetMeetingBaseResultOK builds a "Meeting Service" service
// "get-meeting-base" endpoint result from a HTTP "OK" response.
func NewGetMeetingBaseResultOK(body *GetMeetingBaseResponseBody, etag *string) *meetingservice.GetMeetingBaseResult {
	v := &meetingservice.MeetingBase{
		UID:                             body.UID,
		ProjectUID:                      body.ProjectUID,
		StartTime:                       body.StartTime,
		Duration:                        body.Duration,
		Timezone:                        body.Timezone,
		Title:                           body.Title,
		Description:                     body.Description,
		Platform:                        body.Platform,
		EarlyJoinTimeMinutes:            body.EarlyJoinTimeMinutes,
		MeetingType:                     body.MeetingType,
		Visibility:                      body.Visibility,
		Restricted:                      body.Restricted,
		ArtifactVisibility:              body.ArtifactVisibility,
		PublicLink:                      body.PublicLink,
		Password:                        body.Password,
		EmailDeliveryErrorCount:         body.EmailDeliveryErrorCount,
		RecordingEnabled:                body.RecordingEnabled,
		TranscriptEnabled:               body.TranscriptEnabled,
		YoutubeUploadEnabled:            body.YoutubeUploadEnabled,
		RegistrantCount:                 body.RegistrantCount,
		RegistrantResponseDeclinedCount: body.RegistrantResponseDeclinedCount,
		RegistrantResponseAcceptedCount: body.RegistrantResponseAcceptedCount,
		CreatedAt:                       body.CreatedAt,
		UpdatedAt:                       body.UpdatedAt,
	}
	if body.Recurrence != nil {
		v.Recurrence = unmarshalRecurrenceResponseBodyToMeetingserviceRecurrence(body.Recurrence)
	}
	if body.Committees != nil {
		v.Committees = make([]*meetingservice.Committee, len(body.Committees))
		for i, val := range body.Committees {
			v.Committees[i] = unmarshalCommitteeResponseBodyToMeetingserviceCommittee(val)
		}
	}
	if body.ZoomConfig != nil {
		v.ZoomConfig = unmarshalZoomConfigFullResponseBodyToMeetingserviceZoomConfigFull(body.ZoomConfig)
	}
	if body.Occurrences != nil {
		v.Occurrences = make([]*meetingservice.Occurrence, len(body.Occurrences))
		for i, val := range body.Occurrences {
			v.Occurrences[i] = unmarshalOccurrenceResponseBodyToMeetingserviceOccurrence(val)
		}
	}
	res := &meetingservice.GetMeetingBaseResult{
		Meeting: v,
	}
	res.Etag = etag

	return res
}

// NewGetMeetingBaseInternalServerError builds a Meeting Service service
// get-meeting-base endpoint InternalServerError error.
func NewGetMeetingBaseInternalServerError(body *GetMeetingBaseInternalServerErrorResponseBody) *meetingservice.InternalServerError {
	v := &meetingservice.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetMeetingBaseNotFound builds a Meeting Service service get-meeting-base
// endpoint NotFound error.
func NewGetMeetingBaseNotFound(body *GetMeetingBaseNotFoundResponseBody) *meetingservice.NotFoundError {
	v := &meetingservice.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetMeetingBaseServiceUnavailable builds a Meeting Service service
// get-meeting-base endpoint ServiceUnavailable error.
func NewGetMeetingBaseServiceUnavailable(body *GetMeetingBaseServiceUnavailableResponseBody) *meetingservice.ServiceUnavailableError {
	v := &meetingservice.ServiceUnavailableError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetMeetingSettingsResultOK builds a "Meeting Service" service
// "get-meeting-settings" endpoint result from a HTTP "OK" response.
func NewGetMeetingSettingsResultOK(body *GetMeetingSettingsResponseBody, etag *string) *meetingservice.GetMeetingSettingsResult {
	v := &meetingservice.MeetingSettings{
		UID:       body.UID,
		CreatedAt: body.CreatedAt,
		UpdatedAt: body.UpdatedAt,
	}
	if body.Organizers != nil {
		v.Organizers = make([]string, len(body.Organizers))
		for i, val := range body.Organizers {
			v.Organizers[i] = val
		}
	}
	res := &meetingservice.GetMeetingSettingsResult{
		MeetingSettings: v,
	}
	res.Etag = etag

	return res
}

// NewGetMeetingSettingsInternalServerError builds a Meeting Service service
// get-meeting-settings endpoint InternalServerError error.
func NewGetMeetingSettingsInternalServerError(body *GetMeetingSettingsInternalServerErrorResponseBody) *meetingservice.InternalServerError {
	v := &meetingservice.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetMeetingSettingsNotFound builds a Meeting Service service
// get-meeting-settings endpoint NotFound error.
func NewGetMeetingSettingsNotFound(body *GetMeetingSettingsNotFoundResponseBody) *meetingservice.NotFoundError {
	v := &meetingservice.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetMeetingSettingsServiceUnavailable builds a Meeting Service service
// get-meeting-settings endpoint ServiceUnavailable error.
func NewGetMeetingSettingsServiceUnavailable(body *GetMeetingSettingsServiceUnavailableResponseBody) *meetingservice.ServiceUnavailableError {
	v := &meetingservice.ServiceUnavailableError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetMeetingJoinURLResultOK builds a "Meeting Service" service
// "get-meeting-join-url" endpoint result from a HTTP "OK" response.
func NewGetMeetingJoinURLResultOK(body *GetMeetingJoinURLResponseBody) *meetingservice.GetMeetingJoinURLResult {
	v := &meetingservice.GetMeetingJoinURLResult{
		JoinURL: *body.JoinURL,
	}

	return v
}

// NewGetMeetingJoinURLInternalServerError builds a Meeting Service service
// get-meeting-join-url endpoint InternalServerError error.
func NewGetMeetingJoinURLInternalServerError(body *GetMeetingJoinURLInternalServerErrorResponseBody) *meetingservice.InternalServerError {
	v := &meetingservice.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetMeetingJoinURLNotFound builds a Meeting Service service
// get-meeting-join-url endpoint NotFound error.
func NewGetMeetingJoinURLNotFound(body *GetMeetingJoinURLNotFoundResponseBody) *meetingservice.NotFoundError {
	v := &meetingservice.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetMeetingJoinURLServiceUnavailable builds a Meeting Service service
// get-meeting-join-url endpoint ServiceUnavailable error.
func NewGetMeetingJoinURLServiceUnavailable(body *GetMeetingJoinURLServiceUnavailableResponseBody) *meetingservice.ServiceUnavailableError {
	v := &meetingservice.ServiceUnavailableError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetMeetingJoinURLUnauthorized builds a Meeting Service service
// get-meeting-join-url endpoint Unauthorized error.
func NewGetMeetingJoinURLUnauthorized(body *GetMeetingJoinURLUnauthorizedResponseBody) *meetingservice.UnauthorizedError {
	v := &meetingservice.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewUpdateMeetingBaseMeetingBaseOK builds a "Meeting Service" service
// "update-meeting-base" endpoint result from a HTTP "OK" response.
func NewUpdateMeetingBaseMeetingBaseOK(body *UpdateMeetingBaseResponseBody) *meetingservice.MeetingBase {
	v := &meetingservice.MeetingBase{
		UID:                             body.UID,
		ProjectUID:                      body.ProjectUID,
		StartTime:                       body.StartTime,
		Duration:                        body.Duration,
		Timezone:                        body.Timezone,
		Title:                           body.Title,
		Description:                     body.Description,
		Platform:                        body.Platform,
		EarlyJoinTimeMinutes:            body.EarlyJoinTimeMinutes,
		MeetingType:                     body.MeetingType,
		Visibility:                      body.Visibility,
		Restricted:                      body.Restricted,
		ArtifactVisibility:              body.ArtifactVisibility,
		PublicLink:                      body.PublicLink,
		Password:                        body.Password,
		EmailDeliveryErrorCount:         body.EmailDeliveryErrorCount,
		RecordingEnabled:                body.RecordingEnabled,
		TranscriptEnabled:               body.TranscriptEnabled,
		YoutubeUploadEnabled:            body.YoutubeUploadEnabled,
		RegistrantCount:                 body.RegistrantCount,
		RegistrantResponseDeclinedCount: body.RegistrantResponseDeclinedCount,
		RegistrantResponseAcceptedCount: body.RegistrantResponseAcceptedCount,
		CreatedAt:                       body.CreatedAt,
		UpdatedAt:                       body.UpdatedAt,
	}
	if body.Recurrence != nil {
		v.Recurrence = unmarshalRecurrenceResponseBodyToMeetingserviceRecurrence(body.Recurrence)
	}
	if body.Committees != nil {
		v.Committees = make([]*meetingservice.Committee, len(body.Committees))
		for i, val := range body.Committees {
			v.Committees[i] = unmarshalCommitteeResponseBodyToMeetingserviceCommittee(val)
		}
	}
	if body.ZoomConfig != nil {
		v.ZoomConfig = unmarshalZoomConfigFullResponseBodyToMeetingserviceZoomConfigFull(body.ZoomConfig)
	}
	if body.Occurrences != nil {
		v.Occurrences = make([]*meetingservice.Occurrence, len(body.Occurrences))
		for i, val := range body.Occurrences {
			v.Occurrences[i] = unmarshalOccurrenceResponseBodyToMeetingserviceOccurrence(val)
		}
	}

	return v
}

// NewUpdateMeetingBaseBadRequest builds a Meeting Service service
// update-meeting-base endpoint BadRequest error.
func NewUpdateMeetingBaseBadRequest(body *UpdateMeetingBaseBadRequestResponseBody) *meetingservice.BadRequestError {
	v := &meetingservice.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewUpdateMeetingBaseConflict builds a Meeting Service service
// update-meeting-base endpoint Conflict error.
func NewUpdateMeetingBaseConflict(body *UpdateMeetingBaseConflictResponseBody) *meetingservice.ConflictError {
	v := &meetingservice.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewUpdateMeetingBaseInternalServerError builds a Meeting Service service
// update-meeting-base endpoint InternalServerError error.
func NewUpdateMeetingBaseInternalServerError(body *UpdateMeetingBaseInternalServerErrorResponseBody) *meetingservice.InternalServerError {
	v := &meetingservice.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewUpdateMeetingBaseNotFound builds a Meeting Service service
// update-meeting-base endpoint NotFound error.
func NewUpdateMeetingBaseNotFound(body *UpdateMeetingBaseNotFoundResponseBody) *meetingservice.NotFoundError {
	v := &meetingservice.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewUpdateMeetingBaseServiceUnavailable builds a Meeting Service service
// update-meeting-base endpoint ServiceUnavailable error.
func NewUpdateMeetingBaseServiceUnavailable(body *UpdateMeetingBaseServiceUnavailableResponseBody) *meetingservice.ServiceUnavailableError {
	v := &meetingservice.ServiceUnavailableError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewUpdateMeetingSettingsMeetingSettingsOK builds a "Meeting Service" service
// "update-meeting-settings" endpoint result from a HTTP "OK" response.
func NewUpdateMeetingSettingsMeetingSettingsOK(body *UpdateMeetingSettingsResponseBody) *meetingservice.MeetingSettings {
	v := &meetingservice.MeetingSettings{
		UID:       body.UID,
		CreatedAt: body.CreatedAt,
		UpdatedAt: body.UpdatedAt,
	}
	if body.Organizers != nil {
		v.Organizers = make([]string, len(body.Organizers))
		for i, val := range body.Organizers {
			v.Organizers[i] = val
		}
	}

	return v
}

// NewUpdateMeetingSettingsBadRequest builds a Meeting Service service
// update-meeting-settings endpoint BadRequest error.
func NewUpdateMeetingSettingsBadRequest(body *UpdateMeetingSettingsBadRequestResponseBody) *meetingservice.BadRequestError {
	v := &meetingservice.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewUpdateMeetingSettingsInternalServerError builds a Meeting Service service
// update-meeting-settings endpoint InternalServerError error.
func NewUpdateMeetingSettingsInternalServerError(body *UpdateMeetingSettingsInternalServerErrorResponseBody) *meetingservice.InternalServerError {
	v := &meetingservice.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewUpdateMeetingSettingsNotFound builds a Meeting Service service
// update-meeting-settings endpoint NotFound error.
func NewUpdateMeetingSettingsNotFound(body *UpdateMeetingSettingsNotFoundResponseBody) *meetingservice.NotFoundError {
	v := &meetingservice.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewUpdateMeetingSettingsServiceUnavailable builds a Meeting Service service
// update-meeting-settings endpoint ServiceUnavailable error.
func NewUpdateMeetingSettingsServiceUnavailable(body *UpdateMeetingSettingsServiceUnavailableResponseBody) *meetingservice.ServiceUnavailableError {
	v := &meetingservice.ServiceUnavailableError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewDeleteMeetingBadRequest builds a Meeting Service service delete-meeting
// endpoint BadRequest error.
func NewDeleteMeetingBadRequest(body *DeleteMeetingBadRequestResponseBody) *meetingservice.BadRequestError {
	v := &meetingservice.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewDeleteMeetingInternalServerError builds a Meeting Service service
// delete-meeting endpoint InternalServerError error.
func NewDeleteMeetingInternalServerError(body *DeleteMeetingInternalServerErrorResponseBody) *meetingservice.InternalServerError {
	v := &meetingservice.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewDeleteMeetingNotFound builds a Meeting Service service delete-meeting
// endpoint NotFound error.
func NewDeleteMeetingNotFound(body *DeleteMeetingNotFoundResponseBody) *meetingservice.NotFoundError {
	v := &meetingservice.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewDeleteMeetingServiceUnavailable builds a Meeting Service service
// delete-meeting endpoint ServiceUnavailable error.
func NewDeleteMeetingServiceUnavailable(body *DeleteMeetingServiceUnavailableResponseBody) *meetingservice.ServiceUnavailableError {
	v := &meetingservice.ServiceUnavailableError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetMeetingRegistrantsResultOK builds a "Meeting Service" service
// "get-meeting-registrants" endpoint result from a HTTP "OK" response.
func NewGetMeetingRegistrantsResultOK(body *GetMeetingRegistrantsResponseBody, cacheControl *string) *meetingservice.GetMeetingRegistrantsResult {
	v := &meetingservice.GetMeetingRegistrantsResult{}
	v.Registrants = make([]*meetingservice.Registrant, len(body.Registrants))
	for i, val := range body.Registrants {
		v.Registrants[i] = unmarshalRegistrantResponseBodyToMeetingserviceRegistrant(val)
	}
	v.CacheControl = cacheControl

	return v
}

// NewGetMeetingRegistrantsInternalServerError builds a Meeting Service service
// get-meeting-registrants endpoint InternalServerError error.
func NewGetMeetingRegistrantsInternalServerError(body *GetMeetingRegistrantsInternalServerErrorResponseBody) *meetingservice.InternalServerError {
	v := &meetingservice.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetMeetingRegistrantsNotFound builds a Meeting Service service
// get-meeting-registrants endpoint NotFound error.
func NewGetMeetingRegistrantsNotFound(body *GetMeetingRegistrantsNotFoundResponseBody) *meetingservice.NotFoundError {
	v := &meetingservice.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetMeetingRegistrantsServiceUnavailable builds a Meeting Service service
// get-meeting-registrants endpoint ServiceUnavailable error.
func NewGetMeetingRegistrantsServiceUnavailable(body *GetMeetingRegistrantsServiceUnavailableResponseBody) *meetingservice.ServiceUnavailableError {
	v := &meetingservice.ServiceUnavailableError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewCreateMeetingRegistrantRegistrantCreated builds a "Meeting Service"
// service "create-meeting-registrant" endpoint result from a HTTP "Created"
// response.
func NewCreateMeetingRegistrantRegistrantCreated(body *CreateMeetingRegistrantResponseBody) *meetingservice.Registrant {
	v := &meetingservice.Registrant{
		UID:                *body.UID,
		MeetingUID:         *body.MeetingUID,
		Email:              *body.Email,
		FirstName:          body.FirstName,
		LastName:           body.LastName,
		Host:               body.Host,
		Type:               *body.Type,
		CommitteeUID:       body.CommitteeUID,
		JobTitle:           body.JobTitle,
		OccurrenceID:       body.OccurrenceID,
		OrgName:            body.OrgName,
		OrgIsMember:        body.OrgIsMember,
		OrgIsProjectMember: body.OrgIsProjectMember,
		AvatarURL:          body.AvatarURL,
		Username:           body.Username,
		CreatedAt:          body.CreatedAt,
		UpdatedAt:          body.UpdatedAt,
	}

	return v
}

// NewCreateMeetingRegistrantBadRequest builds a Meeting Service service
// create-meeting-registrant endpoint BadRequest error.
func NewCreateMeetingRegistrantBadRequest(body *CreateMeetingRegistrantBadRequestResponseBody) *meetingservice.BadRequestError {
	v := &meetingservice.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewCreateMeetingRegistrantConflict builds a Meeting Service service
// create-meeting-registrant endpoint Conflict error.
func NewCreateMeetingRegistrantConflict(body *CreateMeetingRegistrantConflictResponseBody) *meetingservice.ConflictError {
	v := &meetingservice.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewCreateMeetingRegistrantInternalServerError builds a Meeting Service
// service create-meeting-registrant endpoint InternalServerError error.
func NewCreateMeetingRegistrantInternalServerError(body *CreateMeetingRegistrantInternalServerErrorResponseBody) *meetingservice.InternalServerError {
	v := &meetingservice.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewCreateMeetingRegistrantNotFound builds a Meeting Service service
// create-meeting-registrant endpoint NotFound error.
func NewCreateMeetingRegistrantNotFound(body *CreateMeetingRegistrantNotFoundResponseBody) *meetingservice.NotFoundError {
	v := &meetingservice.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewCreateMeetingRegistrantServiceUnavailable builds a Meeting Service
// service create-meeting-registrant endpoint ServiceUnavailable error.
func NewCreateMeetingRegistrantServiceUnavailable(body *CreateMeetingRegistrantServiceUnavailableResponseBody) *meetingservice.ServiceUnavailableError {
	v := &meetingservice.ServiceUnavailableError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetMeetingRegistrantResultOK builds a "Meeting Service" service
// "get-meeting-registrant" endpoint result from a HTTP "OK" response.
func NewGetMeetingRegistrantResultOK(body *GetMeetingRegistrantResponseBody, etag *string) *meetingservice.GetMeetingRegistrantResult {
	v := &meetingservice.Registrant{
		UID:                *body.UID,
		MeetingUID:         *body.MeetingUID,
		Email:              *body.Email,
		FirstName:          body.FirstName,
		LastName:           body.LastName,
		Host:               body.Host,
		Type:               *body.Type,
		CommitteeUID:       body.CommitteeUID,
		JobTitle:           body.JobTitle,
		OccurrenceID:       body.OccurrenceID,
		OrgName:            body.OrgName,
		OrgIsMember:        body.OrgIsMember,
		OrgIsProjectMember: body.OrgIsProjectMember,
		AvatarURL:          body.AvatarURL,
		Username:           body.Username,
		CreatedAt:          body.CreatedAt,
		UpdatedAt:          body.UpdatedAt,
	}
	res := &meetingservice.GetMeetingRegistrantResult{
		Registrant: v,
	}
	res.Etag = etag

	return res
}

// NewGetMeetingRegistrantInternalServerError builds a Meeting Service service
// get-meeting-registrant endpoint InternalServerError error.
func NewGetMeetingRegistrantInternalServerError(body *GetMeetingRegistrantInternalServerErrorResponseBody) *meetingservice.InternalServerError {
	v := &meetingservice.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetMeetingRegistrantNotFound builds a Meeting Service service
// get-meeting-registrant endpoint NotFound error.
func NewGetMeetingRegistrantNotFound(body *GetMeetingRegistrantNotFoundResponseBody) *meetingservice.NotFoundError {
	v := &meetingservice.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetMeetingRegistrantServiceUnavailable builds a Meeting Service service
// get-meeting-registrant endpoint ServiceUnavailable error.
func NewGetMeetingRegistrantServiceUnavailable(body *GetMeetingRegistrantServiceUnavailableResponseBody) *meetingservice.ServiceUnavailableError {
	v := &meetingservice.ServiceUnavailableError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewUpdateMeetingRegistrantRegistrantOK builds a "Meeting Service" service
// "update-meeting-registrant" endpoint result from a HTTP "OK" response.
func NewUpdateMeetingRegistrantRegistrantOK(body *UpdateMeetingRegistrantResponseBody) *meetingservice.Registrant {
	v := &meetingservice.Registrant{
		UID:                *body.UID,
		MeetingUID:         *body.MeetingUID,
		Email:              *body.Email,
		FirstName:          body.FirstName,
		LastName:           body.LastName,
		Host:               body.Host,
		Type:               *body.Type,
		CommitteeUID:       body.CommitteeUID,
		JobTitle:           body.JobTitle,
		OccurrenceID:       body.OccurrenceID,
		OrgName:            body.OrgName,
		OrgIsMember:        body.OrgIsMember,
		OrgIsProjectMember: body.OrgIsProjectMember,
		AvatarURL:          body.AvatarURL,
		Username:           body.Username,
		CreatedAt:          body.CreatedAt,
		UpdatedAt:          body.UpdatedAt,
	}

	return v
}

// NewUpdateMeetingRegistrantBadRequest builds a Meeting Service service
// update-meeting-registrant endpoint BadRequest error.
func NewUpdateMeetingRegistrantBadRequest(body *UpdateMeetingRegistrantBadRequestResponseBody) *meetingservice.BadRequestError {
	v := &meetingservice.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewUpdateMeetingRegistrantConflict builds a Meeting Service service
// update-meeting-registrant endpoint Conflict error.
func NewUpdateMeetingRegistrantConflict(body *UpdateMeetingRegistrantConflictResponseBody) *meetingservice.ConflictError {
	v := &meetingservice.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewUpdateMeetingRegistrantInternalServerError builds a Meeting Service
// service update-meeting-registrant endpoint InternalServerError error.
func NewUpdateMeetingRegistrantInternalServerError(body *UpdateMeetingRegistrantInternalServerErrorResponseBody) *meetingservice.InternalServerError {
	v := &meetingservice.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewUpdateMeetingRegistrantNotFound builds a Meeting Service service
// update-meeting-registrant endpoint NotFound error.
func NewUpdateMeetingRegistrantNotFound(body *UpdateMeetingRegistrantNotFoundResponseBody) *meetingservice.NotFoundError {
	v := &meetingservice.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewUpdateMeetingRegistrantServiceUnavailable builds a Meeting Service
// service update-meeting-registrant endpoint ServiceUnavailable error.
func NewUpdateMeetingRegistrantServiceUnavailable(body *UpdateMeetingRegistrantServiceUnavailableResponseBody) *meetingservice.ServiceUnavailableError {
	v := &meetingservice.ServiceUnavailableError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewDeleteMeetingRegistrantBadRequest builds a Meeting Service service
// delete-meeting-registrant endpoint BadRequest error.
func NewDeleteMeetingRegistrantBadRequest(body *DeleteMeetingRegistrantBadRequestResponseBody) *meetingservice.BadRequestError {
	v := &meetingservice.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewDeleteMeetingRegistrantInternalServerError builds a Meeting Service
// service delete-meeting-registrant endpoint InternalServerError error.
func NewDeleteMeetingRegistrantInternalServerError(body *DeleteMeetingRegistrantInternalServerErrorResponseBody) *meetingservice.InternalServerError {
	v := &meetingservice.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewDeleteMeetingRegistrantNotFound builds a Meeting Service service
// delete-meeting-registrant endpoint NotFound error.
func NewDeleteMeetingRegistrantNotFound(body *DeleteMeetingRegistrantNotFoundResponseBody) *meetingservice.NotFoundError {
	v := &meetingservice.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewDeleteMeetingRegistrantServiceUnavailable builds a Meeting Service
// service delete-meeting-registrant endpoint ServiceUnavailable error.
func NewDeleteMeetingRegistrantServiceUnavailable(body *DeleteMeetingRegistrantServiceUnavailableResponseBody) *meetingservice.ServiceUnavailableError {
	v := &meetingservice.ServiceUnavailableError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewZoomWebhookResponseOK builds a "Meeting Service" service "zoom-webhook"
// endpoint result from a HTTP "OK" response.
func NewZoomWebhookResponseOK(body *ZoomWebhookResponseBody) *meetingservice.ZoomWebhookResponse {
	v := &meetingservice.ZoomWebhookResponse{
		Status:  *body.Status,
		Message: body.Message,
	}

	return v
}

// NewZoomWebhookBadRequest builds a Meeting Service service zoom-webhook
// endpoint BadRequest error.
func NewZoomWebhookBadRequest(body *ZoomWebhookBadRequestResponseBody) *meetingservice.BadRequestError {
	v := &meetingservice.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewZoomWebhookInternalServerError builds a Meeting Service service
// zoom-webhook endpoint InternalServerError error.
func NewZoomWebhookInternalServerError(body *ZoomWebhookInternalServerErrorResponseBody) *meetingservice.InternalServerError {
	v := &meetingservice.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewZoomWebhookUnauthorized builds a Meeting Service service zoom-webhook
// endpoint Unauthorized error.
func NewZoomWebhookUnauthorized(body *ZoomWebhookUnauthorizedResponseBody) *meetingservice.UnauthorizedError {
	v := &meetingservice.UnauthorizedError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetPastMeetingsResultOK builds a "Meeting Service" service
// "get-past-meetings" endpoint result from a HTTP "OK" response.
func NewGetPastMeetingsResultOK(body *GetPastMeetingsResponseBody, cacheControl *string) *meetingservice.GetPastMeetingsResult {
	v := &meetingservice.GetPastMeetingsResult{}
	v.PastMeetings = make([]*meetingservice.PastMeeting, len(body.PastMeetings))
	for i, val := range body.PastMeetings {
		v.PastMeetings[i] = unmarshalPastMeetingResponseBodyToMeetingservicePastMeeting(val)
	}
	v.CacheControl = cacheControl

	return v
}

// NewGetPastMeetingsBadRequest builds a Meeting Service service
// get-past-meetings endpoint BadRequest error.
func NewGetPastMeetingsBadRequest(body *GetPastMeetingsBadRequestResponseBody) *meetingservice.BadRequestError {
	v := &meetingservice.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetPastMeetingsInternalServerError builds a Meeting Service service
// get-past-meetings endpoint InternalServerError error.
func NewGetPastMeetingsInternalServerError(body *GetPastMeetingsInternalServerErrorResponseBody) *meetingservice.InternalServerError {
	v := &meetingservice.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetPastMeetingsServiceUnavailable builds a Meeting Service service
// get-past-meetings endpoint ServiceUnavailable error.
func NewGetPastMeetingsServiceUnavailable(body *GetPastMeetingsServiceUnavailableResponseBody) *meetingservice.ServiceUnavailableError {
	v := &meetingservice.ServiceUnavailableError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewCreatePastMeetingPastMeetingCreated builds a "Meeting Service" service
// "create-past-meeting" endpoint result from a HTTP "Created" response.
func NewCreatePastMeetingPastMeetingCreated(body *CreatePastMeetingResponseBody) *meetingservice.PastMeeting {
	v := &meetingservice.PastMeeting{
		UID:                  body.UID,
		MeetingUID:           body.MeetingUID,
		OccurrenceID:         body.OccurrenceID,
		ProjectUID:           body.ProjectUID,
		ScheduledStartTime:   body.ScheduledStartTime,
		ScheduledEndTime:     body.ScheduledEndTime,
		Duration:             body.Duration,
		Timezone:             body.Timezone,
		Title:                body.Title,
		Description:          body.Description,
		Platform:             body.Platform,
		PlatformMeetingID:    body.PlatformMeetingID,
		EarlyJoinTimeMinutes: body.EarlyJoinTimeMinutes,
		MeetingType:          body.MeetingType,
		Visibility:           body.Visibility,
		Restricted:           body.Restricted,
		ArtifactVisibility:   body.ArtifactVisibility,
		PublicLink:           body.PublicLink,
		RecordingEnabled:     body.RecordingEnabled,
		TranscriptEnabled:    body.TranscriptEnabled,
		YoutubeUploadEnabled: body.YoutubeUploadEnabled,
		CreatedAt:            body.CreatedAt,
		UpdatedAt:            body.UpdatedAt,
	}
	if body.Recurrence != nil {
		v.Recurrence = unmarshalRecurrenceResponseBodyToMeetingserviceRecurrence(body.Recurrence)
	}
	if body.Committees != nil {
		v.Committees = make([]*meetingservice.Committee, len(body.Committees))
		for i, val := range body.Committees {
			v.Committees[i] = unmarshalCommitteeResponseBodyToMeetingserviceCommittee(val)
		}
	}
	if body.ZoomConfig != nil {
		v.ZoomConfig = unmarshalZoomConfigFullResponseBodyToMeetingserviceZoomConfigFull(body.ZoomConfig)
	}
	if body.Sessions != nil {
		v.Sessions = make([]*meetingservice.Session, len(body.Sessions))
		for i, val := range body.Sessions {
			v.Sessions[i] = unmarshalSessionResponseBodyToMeetingserviceSession(val)
		}
	}

	return v
}

// NewCreatePastMeetingBadRequest builds a Meeting Service service
// create-past-meeting endpoint BadRequest error.
func NewCreatePastMeetingBadRequest(body *CreatePastMeetingBadRequestResponseBody) *meetingservice.BadRequestError {
	v := &meetingservice.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewCreatePastMeetingConflict builds a Meeting Service service
// create-past-meeting endpoint Conflict error.
func NewCreatePastMeetingConflict(body *CreatePastMeetingConflictResponseBody) *meetingservice.ConflictError {
	v := &meetingservice.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewCreatePastMeetingInternalServerError builds a Meeting Service service
// create-past-meeting endpoint InternalServerError error.
func NewCreatePastMeetingInternalServerError(body *CreatePastMeetingInternalServerErrorResponseBody) *meetingservice.InternalServerError {
	v := &meetingservice.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewCreatePastMeetingServiceUnavailable builds a Meeting Service service
// create-past-meeting endpoint ServiceUnavailable error.
func NewCreatePastMeetingServiceUnavailable(body *CreatePastMeetingServiceUnavailableResponseBody) *meetingservice.ServiceUnavailableError {
	v := &meetingservice.ServiceUnavailableError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetPastMeetingResultOK builds a "Meeting Service" service
// "get-past-meeting" endpoint result from a HTTP "OK" response.
func NewGetPastMeetingResultOK(body *GetPastMeetingResponseBody, etag *string) *meetingservice.GetPastMeetingResult {
	v := &meetingservice.PastMeeting{
		UID:                  body.UID,
		MeetingUID:           body.MeetingUID,
		OccurrenceID:         body.OccurrenceID,
		ProjectUID:           body.ProjectUID,
		ScheduledStartTime:   body.ScheduledStartTime,
		ScheduledEndTime:     body.ScheduledEndTime,
		Duration:             body.Duration,
		Timezone:             body.Timezone,
		Title:                body.Title,
		Description:          body.Description,
		Platform:             body.Platform,
		PlatformMeetingID:    body.PlatformMeetingID,
		EarlyJoinTimeMinutes: body.EarlyJoinTimeMinutes,
		MeetingType:          body.MeetingType,
		Visibility:           body.Visibility,
		Restricted:           body.Restricted,
		ArtifactVisibility:   body.ArtifactVisibility,
		PublicLink:           body.PublicLink,
		RecordingEnabled:     body.RecordingEnabled,
		TranscriptEnabled:    body.TranscriptEnabled,
		YoutubeUploadEnabled: body.YoutubeUploadEnabled,
		CreatedAt:            body.CreatedAt,
		UpdatedAt:            body.UpdatedAt,
	}
	if body.Recurrence != nil {
		v.Recurrence = unmarshalRecurrenceResponseBodyToMeetingserviceRecurrence(body.Recurrence)
	}
	if body.Committees != nil {
		v.Committees = make([]*meetingservice.Committee, len(body.Committees))
		for i, val := range body.Committees {
			v.Committees[i] = unmarshalCommitteeResponseBodyToMeetingserviceCommittee(val)
		}
	}
	if body.ZoomConfig != nil {
		v.ZoomConfig = unmarshalZoomConfigFullResponseBodyToMeetingserviceZoomConfigFull(body.ZoomConfig)
	}
	if body.Sessions != nil {
		v.Sessions = make([]*meetingservice.Session, len(body.Sessions))
		for i, val := range body.Sessions {
			v.Sessions[i] = unmarshalSessionResponseBodyToMeetingserviceSession(val)
		}
	}
	res := &meetingservice.GetPastMeetingResult{
		PastMeeting: v,
	}
	res.Etag = etag

	return res
}

// NewGetPastMeetingInternalServerError builds a Meeting Service service
// get-past-meeting endpoint InternalServerError error.
func NewGetPastMeetingInternalServerError(body *GetPastMeetingInternalServerErrorResponseBody) *meetingservice.InternalServerError {
	v := &meetingservice.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetPastMeetingNotFound builds a Meeting Service service get-past-meeting
// endpoint NotFound error.
func NewGetPastMeetingNotFound(body *GetPastMeetingNotFoundResponseBody) *meetingservice.NotFoundError {
	v := &meetingservice.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetPastMeetingServiceUnavailable builds a Meeting Service service
// get-past-meeting endpoint ServiceUnavailable error.
func NewGetPastMeetingServiceUnavailable(body *GetPastMeetingServiceUnavailableResponseBody) *meetingservice.ServiceUnavailableError {
	v := &meetingservice.ServiceUnavailableError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewDeletePastMeetingBadRequest builds a Meeting Service service
// delete-past-meeting endpoint BadRequest error.
func NewDeletePastMeetingBadRequest(body *DeletePastMeetingBadRequestResponseBody) *meetingservice.BadRequestError {
	v := &meetingservice.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewDeletePastMeetingInternalServerError builds a Meeting Service service
// delete-past-meeting endpoint InternalServerError error.
func NewDeletePastMeetingInternalServerError(body *DeletePastMeetingInternalServerErrorResponseBody) *meetingservice.InternalServerError {
	v := &meetingservice.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewDeletePastMeetingNotFound builds a Meeting Service service
// delete-past-meeting endpoint NotFound error.
func NewDeletePastMeetingNotFound(body *DeletePastMeetingNotFoundResponseBody) *meetingservice.NotFoundError {
	v := &meetingservice.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewDeletePastMeetingServiceUnavailable builds a Meeting Service service
// delete-past-meeting endpoint ServiceUnavailable error.
func NewDeletePastMeetingServiceUnavailable(body *DeletePastMeetingServiceUnavailableResponseBody) *meetingservice.ServiceUnavailableError {
	v := &meetingservice.ServiceUnavailableError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetPastMeetingParticipantsResultOK builds a "Meeting Service" service
// "get-past-meeting-participants" endpoint result from a HTTP "OK" response.
func NewGetPastMeetingParticipantsResultOK(body *GetPastMeetingParticipantsResponseBody, cacheControl *string) *meetingservice.GetPastMeetingParticipantsResult {
	v := &meetingservice.GetPastMeetingParticipantsResult{}
	v.Participants = make([]*meetingservice.PastMeetingParticipant, len(body.Participants))
	for i, val := range body.Participants {
		v.Participants[i] = unmarshalPastMeetingParticipantResponseBodyToMeetingservicePastMeetingParticipant(val)
	}
	v.CacheControl = cacheControl

	return v
}

// NewGetPastMeetingParticipantsInternalServerError builds a Meeting Service
// service get-past-meeting-participants endpoint InternalServerError error.
func NewGetPastMeetingParticipantsInternalServerError(body *GetPastMeetingParticipantsInternalServerErrorResponseBody) *meetingservice.InternalServerError {
	v := &meetingservice.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetPastMeetingParticipantsNotFound builds a Meeting Service service
// get-past-meeting-participants endpoint NotFound error.
func NewGetPastMeetingParticipantsNotFound(body *GetPastMeetingParticipantsNotFoundResponseBody) *meetingservice.NotFoundError {
	v := &meetingservice.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetPastMeetingParticipantsServiceUnavailable builds a Meeting Service
// service get-past-meeting-participants endpoint ServiceUnavailable error.
func NewGetPastMeetingParticipantsServiceUnavailable(body *GetPastMeetingParticipantsServiceUnavailableResponseBody) *meetingservice.ServiceUnavailableError {
	v := &meetingservice.ServiceUnavailableError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewCreatePastMeetingParticipantPastMeetingParticipantCreated builds a
// "Meeting Service" service "create-past-meeting-participant" endpoint result
// from a HTTP "Created" response.
func NewCreatePastMeetingParticipantPastMeetingParticipantCreated(body *CreatePastMeetingParticipantResponseBody) *meetingservice.PastMeetingParticipant {
	v := &meetingservice.PastMeetingParticipant{
		UID:                *body.UID,
		PastMeetingUID:     *body.PastMeetingUID,
		MeetingUID:         *body.MeetingUID,
		Email:              *body.Email,
		FirstName:          body.FirstName,
		LastName:           body.LastName,
		Host:               body.Host,
		JobTitle:           body.JobTitle,
		OrgName:            body.OrgName,
		OrgIsMember:        body.OrgIsMember,
		OrgIsProjectMember: body.OrgIsProjectMember,
		AvatarURL:          body.AvatarURL,
		Username:           body.Username,
		IsInvited:          body.IsInvited,
		IsAttended:         body.IsAttended,
		CreatedAt:          body.CreatedAt,
		UpdatedAt:          body.UpdatedAt,
	}
	if body.Sessions != nil {
		v.Sessions = make([]*meetingservice.ParticipantSession, len(body.Sessions))
		for i, val := range body.Sessions {
			v.Sessions[i] = unmarshalParticipantSessionResponseBodyToMeetingserviceParticipantSession(val)
		}
	}

	return v
}

// NewCreatePastMeetingParticipantBadRequest builds a Meeting Service service
// create-past-meeting-participant endpoint BadRequest error.
func NewCreatePastMeetingParticipantBadRequest(body *CreatePastMeetingParticipantBadRequestResponseBody) *meetingservice.BadRequestError {
	v := &meetingservice.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewCreatePastMeetingParticipantConflict builds a Meeting Service service
// create-past-meeting-participant endpoint Conflict error.
func NewCreatePastMeetingParticipantConflict(body *CreatePastMeetingParticipantConflictResponseBody) *meetingservice.ConflictError {
	v := &meetingservice.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewCreatePastMeetingParticipantInternalServerError builds a Meeting Service
// service create-past-meeting-participant endpoint InternalServerError error.
func NewCreatePastMeetingParticipantInternalServerError(body *CreatePastMeetingParticipantInternalServerErrorResponseBody) *meetingservice.InternalServerError {
	v := &meetingservice.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewCreatePastMeetingParticipantNotFound builds a Meeting Service service
// create-past-meeting-participant endpoint NotFound error.
func NewCreatePastMeetingParticipantNotFound(body *CreatePastMeetingParticipantNotFoundResponseBody) *meetingservice.NotFoundError {
	v := &meetingservice.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewCreatePastMeetingParticipantServiceUnavailable builds a Meeting Service
// service create-past-meeting-participant endpoint ServiceUnavailable error.
func NewCreatePastMeetingParticipantServiceUnavailable(body *CreatePastMeetingParticipantServiceUnavailableResponseBody) *meetingservice.ServiceUnavailableError {
	v := &meetingservice.ServiceUnavailableError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetPastMeetingParticipantResultOK builds a "Meeting Service" service
// "get-past-meeting-participant" endpoint result from a HTTP "OK" response.
func NewGetPastMeetingParticipantResultOK(body *GetPastMeetingParticipantResponseBody, etag *string) *meetingservice.GetPastMeetingParticipantResult {
	v := &meetingservice.PastMeetingParticipant{
		UID:                *body.UID,
		PastMeetingUID:     *body.PastMeetingUID,
		MeetingUID:         *body.MeetingUID,
		Email:              *body.Email,
		FirstName:          body.FirstName,
		LastName:           body.LastName,
		Host:               body.Host,
		JobTitle:           body.JobTitle,
		OrgName:            body.OrgName,
		OrgIsMember:        body.OrgIsMember,
		OrgIsProjectMember: body.OrgIsProjectMember,
		AvatarURL:          body.AvatarURL,
		Username:           body.Username,
		IsInvited:          body.IsInvited,
		IsAttended:         body.IsAttended,
		CreatedAt:          body.CreatedAt,
		UpdatedAt:          body.UpdatedAt,
	}
	if body.Sessions != nil {
		v.Sessions = make([]*meetingservice.ParticipantSession, len(body.Sessions))
		for i, val := range body.Sessions {
			v.Sessions[i] = unmarshalParticipantSessionResponseBodyToMeetingserviceParticipantSession(val)
		}
	}
	res := &meetingservice.GetPastMeetingParticipantResult{
		Participant: v,
	}
	res.Etag = etag

	return res
}

// NewGetPastMeetingParticipantInternalServerError builds a Meeting Service
// service get-past-meeting-participant endpoint InternalServerError error.
func NewGetPastMeetingParticipantInternalServerError(body *GetPastMeetingParticipantInternalServerErrorResponseBody) *meetingservice.InternalServerError {
	v := &meetingservice.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetPastMeetingParticipantNotFound builds a Meeting Service service
// get-past-meeting-participant endpoint NotFound error.
func NewGetPastMeetingParticipantNotFound(body *GetPastMeetingParticipantNotFoundResponseBody) *meetingservice.NotFoundError {
	v := &meetingservice.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetPastMeetingParticipantServiceUnavailable builds a Meeting Service
// service get-past-meeting-participant endpoint ServiceUnavailable error.
func NewGetPastMeetingParticipantServiceUnavailable(body *GetPastMeetingParticipantServiceUnavailableResponseBody) *meetingservice.ServiceUnavailableError {
	v := &meetingservice.ServiceUnavailableError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewUpdatePastMeetingParticipantPastMeetingParticipantOK builds a "Meeting
// Service" service "update-past-meeting-participant" endpoint result from a
// HTTP "OK" response.
func NewUpdatePastMeetingParticipantPastMeetingParticipantOK(body *UpdatePastMeetingParticipantResponseBody) *meetingservice.PastMeetingParticipant {
	v := &meetingservice.PastMeetingParticipant{
		UID:                *body.UID,
		PastMeetingUID:     *body.PastMeetingUID,
		MeetingUID:         *body.MeetingUID,
		Email:              *body.Email,
		FirstName:          body.FirstName,
		LastName:           body.LastName,
		Host:               body.Host,
		JobTitle:           body.JobTitle,
		OrgName:            body.OrgName,
		OrgIsMember:        body.OrgIsMember,
		OrgIsProjectMember: body.OrgIsProjectMember,
		AvatarURL:          body.AvatarURL,
		Username:           body.Username,
		IsInvited:          body.IsInvited,
		IsAttended:         body.IsAttended,
		CreatedAt:          body.CreatedAt,
		UpdatedAt:          body.UpdatedAt,
	}
	if body.Sessions != nil {
		v.Sessions = make([]*meetingservice.ParticipantSession, len(body.Sessions))
		for i, val := range body.Sessions {
			v.Sessions[i] = unmarshalParticipantSessionResponseBodyToMeetingserviceParticipantSession(val)
		}
	}

	return v
}

// NewUpdatePastMeetingParticipantBadRequest builds a Meeting Service service
// update-past-meeting-participant endpoint BadRequest error.
func NewUpdatePastMeetingParticipantBadRequest(body *UpdatePastMeetingParticipantBadRequestResponseBody) *meetingservice.BadRequestError {
	v := &meetingservice.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewUpdatePastMeetingParticipantConflict builds a Meeting Service service
// update-past-meeting-participant endpoint Conflict error.
func NewUpdatePastMeetingParticipantConflict(body *UpdatePastMeetingParticipantConflictResponseBody) *meetingservice.ConflictError {
	v := &meetingservice.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewUpdatePastMeetingParticipantInternalServerError builds a Meeting Service
// service update-past-meeting-participant endpoint InternalServerError error.
func NewUpdatePastMeetingParticipantInternalServerError(body *UpdatePastMeetingParticipantInternalServerErrorResponseBody) *meetingservice.InternalServerError {
	v := &meetingservice.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewUpdatePastMeetingParticipantNotFound builds a Meeting Service service
// update-past-meeting-participant endpoint NotFound error.
func NewUpdatePastMeetingParticipantNotFound(body *UpdatePastMeetingParticipantNotFoundResponseBody) *meetingservice.NotFoundError {
	v := &meetingservice.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewUpdatePastMeetingParticipantServiceUnavailable builds a Meeting Service
// service update-past-meeting-participant endpoint ServiceUnavailable error.
func NewUpdatePastMeetingParticipantServiceUnavailable(body *UpdatePastMeetingParticipantServiceUnavailableResponseBody) *meetingservice.ServiceUnavailableError {
	v := &meetingservice.ServiceUnavailableError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewDeletePastMeetingParticipantBadRequest builds a Meeting Service service
// delete-past-meeting-participant endpoint BadRequest error.
func NewDeletePastMeetingParticipantBadRequest(body *DeletePastMeetingParticipantBadRequestResponseBody) *meetingservice.BadRequestError {
	v := &meetingservice.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewDeletePastMeetingParticipantInternalServerError builds a Meeting Service
// service delete-past-meeting-participant endpoint InternalServerError error.
func NewDeletePastMeetingParticipantInternalServerError(body *DeletePastMeetingParticipantInternalServerErrorResponseBody) *meetingservice.InternalServerError {
	v := &meetingservice.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewDeletePastMeetingParticipantNotFound builds a Meeting Service service
// delete-past-meeting-participant endpoint NotFound error.
func NewDeletePastMeetingParticipantNotFound(body *DeletePastMeetingParticipantNotFoundResponseBody) *meetingservice.NotFoundError {
	v := &meetingservice.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewDeletePastMeetingParticipantServiceUnavailable builds a Meeting Service
// service delete-past-meeting-participant endpoint ServiceUnavailable error.
func NewDeletePastMeetingParticipantServiceUnavailable(body *DeletePastMeetingParticipantServiceUnavailableResponseBody) *meetingservice.ServiceUnavailableError {
	v := &meetingservice.ServiceUnavailableError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetPastMeetingSummariesResultOK builds a "Meeting Service" service
// "get-past-meeting-summaries" endpoint result from a HTTP "OK" response.
func NewGetPastMeetingSummariesResultOK(body *GetPastMeetingSummariesResponseBody, cacheControl *string) *meetingservice.GetPastMeetingSummariesResult {
	v := &meetingservice.GetPastMeetingSummariesResult{}
	v.Summaries = make([]*meetingservice.PastMeetingSummary, len(body.Summaries))
	for i, val := range body.Summaries {
		v.Summaries[i] = unmarshalPastMeetingSummaryResponseBodyToMeetingservicePastMeetingSummary(val)
	}
	v.CacheControl = cacheControl

	return v
}

// NewGetPastMeetingSummariesInternalServerError builds a Meeting Service
// service get-past-meeting-summaries endpoint InternalServerError error.
func NewGetPastMeetingSummariesInternalServerError(body *GetPastMeetingSummariesInternalServerErrorResponseBody) *meetingservice.InternalServerError {
	v := &meetingservice.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetPastMeetingSummariesNotFound builds a Meeting Service service
// get-past-meeting-summaries endpoint NotFound error.
func NewGetPastMeetingSummariesNotFound(body *GetPastMeetingSummariesNotFoundResponseBody) *meetingservice.NotFoundError {
	v := &meetingservice.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetPastMeetingSummariesServiceUnavailable builds a Meeting Service
// service get-past-meeting-summaries endpoint ServiceUnavailable error.
func NewGetPastMeetingSummariesServiceUnavailable(body *GetPastMeetingSummariesServiceUnavailableResponseBody) *meetingservice.ServiceUnavailableError {
	v := &meetingservice.ServiceUnavailableError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetPastMeetingSummaryResultOK builds a "Meeting Service" service
// "get-past-meeting-summary" endpoint result from a HTTP "OK" response.
func NewGetPastMeetingSummaryResultOK(body *GetPastMeetingSummaryResponseBody, etag *string) *meetingservice.GetPastMeetingSummaryResult {
	v := &meetingservice.PastMeetingSummary{
		UID:              *body.UID,
		PastMeetingUID:   *body.PastMeetingUID,
		MeetingUID:       *body.MeetingUID,
		Platform:         *body.Platform,
		Password:         body.Password,
		RequiresApproval: *body.RequiresApproval,
		Approved:         *body.Approved,
		EmailSent:        *body.EmailSent,
		CreatedAt:        *body.CreatedAt,
		UpdatedAt:        *body.UpdatedAt,
	}
	if body.ZoomConfig != nil {
		v.ZoomConfig = unmarshalPastMeetingSummaryZoomConfigResponseBodyToMeetingservicePastMeetingSummaryZoomConfig(body.ZoomConfig)
	}
	v.SummaryData = unmarshalSummaryDataResponseBodyToMeetingserviceSummaryData(body.SummaryData)
	res := &meetingservice.GetPastMeetingSummaryResult{
		Summary: v,
	}
	res.Etag = etag

	return res
}

// NewGetPastMeetingSummaryInternalServerError builds a Meeting Service service
// get-past-meeting-summary endpoint InternalServerError error.
func NewGetPastMeetingSummaryInternalServerError(body *GetPastMeetingSummaryInternalServerErrorResponseBody) *meetingservice.InternalServerError {
	v := &meetingservice.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetPastMeetingSummaryNotFound builds a Meeting Service service
// get-past-meeting-summary endpoint NotFound error.
func NewGetPastMeetingSummaryNotFound(body *GetPastMeetingSummaryNotFoundResponseBody) *meetingservice.NotFoundError {
	v := &meetingservice.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetPastMeetingSummaryServiceUnavailable builds a Meeting Service service
// get-past-meeting-summary endpoint ServiceUnavailable error.
func NewGetPastMeetingSummaryServiceUnavailable(body *GetPastMeetingSummaryServiceUnavailableResponseBody) *meetingservice.ServiceUnavailableError {
	v := &meetingservice.ServiceUnavailableError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewUpdatePastMeetingSummaryPastMeetingSummaryOK builds a "Meeting Service"
// service "update-past-meeting-summary" endpoint result from a HTTP "OK"
// response.
func NewUpdatePastMeetingSummaryPastMeetingSummaryOK(body *UpdatePastMeetingSummaryResponseBody) *meetingservice.PastMeetingSummary {
	v := &meetingservice.PastMeetingSummary{
		UID:              *body.UID,
		PastMeetingUID:   *body.PastMeetingUID,
		MeetingUID:       *body.MeetingUID,
		Platform:         *body.Platform,
		Password:         body.Password,
		RequiresApproval: *body.RequiresApproval,
		Approved:         *body.Approved,
		EmailSent:        *body.EmailSent,
		CreatedAt:        *body.CreatedAt,
		UpdatedAt:        *body.UpdatedAt,
	}
	if body.ZoomConfig != nil {
		v.ZoomConfig = unmarshalPastMeetingSummaryZoomConfigResponseBodyToMeetingservicePastMeetingSummaryZoomConfig(body.ZoomConfig)
	}
	v.SummaryData = unmarshalSummaryDataResponseBodyToMeetingserviceSummaryData(body.SummaryData)

	return v
}

// NewUpdatePastMeetingSummaryBadRequest builds a Meeting Service service
// update-past-meeting-summary endpoint BadRequest error.
func NewUpdatePastMeetingSummaryBadRequest(body *UpdatePastMeetingSummaryBadRequestResponseBody) *meetingservice.BadRequestError {
	v := &meetingservice.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewUpdatePastMeetingSummaryInternalServerError builds a Meeting Service
// service update-past-meeting-summary endpoint InternalServerError error.
func NewUpdatePastMeetingSummaryInternalServerError(body *UpdatePastMeetingSummaryInternalServerErrorResponseBody) *meetingservice.InternalServerError {
	v := &meetingservice.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewUpdatePastMeetingSummaryNotFound builds a Meeting Service service
// update-past-meeting-summary endpoint NotFound error.
func NewUpdatePastMeetingSummaryNotFound(body *UpdatePastMeetingSummaryNotFoundResponseBody) *meetingservice.NotFoundError {
	v := &meetingservice.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewUpdatePastMeetingSummaryServiceUnavailable builds a Meeting Service
// service update-past-meeting-summary endpoint ServiceUnavailable error.
func NewUpdatePastMeetingSummaryServiceUnavailable(body *UpdatePastMeetingSummaryServiceUnavailableResponseBody) *meetingservice.ServiceUnavailableError {
	v := &meetingservice.ServiceUnavailableError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewReadyzServiceUnavailable builds a Meeting Service service readyz endpoint
// ServiceUnavailable error.
func NewReadyzServiceUnavailable(body *ReadyzServiceUnavailableResponseBody) *meetingservice.ServiceUnavailableError {
	v := &meetingservice.ServiceUnavailableError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// ValidateGetMeetingsResponseBody runs the validations defined on
// Get-MeetingsResponseBody
func ValidateGetMeetingsResponseBody(body *GetMeetingsResponseBody) (err error) {
	if body.Meetings == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("meetings", "body"))
	}
	for _, e := range body.Meetings {
		if e != nil {
			if err2 := ValidateMeetingFullResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateCreateMeetingResponseBody runs the validations defined on
// Create-MeetingResponseBody
func ValidateCreateMeetingResponseBody(body *CreateMeetingResponseBody) (err error) {
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.ProjectUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.project_uid", *body.ProjectUID, goa.FormatUUID))
	}
	if body.StartTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.start_time", *body.StartTime, goa.FormatDateTime))
	}
	if body.Duration != nil {
		if *body.Duration < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.duration", *body.Duration, 0, true))
		}
	}
	if body.Duration != nil {
		if *body.Duration > 600 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.duration", *body.Duration, 600, false))
		}
	}
	if body.Recurrence != nil {
		if err2 := ValidateRecurrenceResponseBody(body.Recurrence); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	for _, e := range body.Committees {
		if e != nil {
			if err2 := ValidateCommitteeResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.Platform != nil {
		if !(*body.Platform == "Zoom") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.platform", *body.Platform, []any{"Zoom"}))
		}
	}
	if body.EarlyJoinTimeMinutes != nil {
		if *body.EarlyJoinTimeMinutes < 10 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.early_join_time_minutes", *body.EarlyJoinTimeMinutes, 10, true))
		}
	}
	if body.EarlyJoinTimeMinutes != nil {
		if *body.EarlyJoinTimeMinutes > 60 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.early_join_time_minutes", *body.EarlyJoinTimeMinutes, 60, false))
		}
	}
	if body.MeetingType != nil {
		if !(*body.MeetingType == "Board" || *body.MeetingType == "Maintainers" || *body.MeetingType == "Marketing" || *body.MeetingType == "Technical" || *body.MeetingType == "Legal" || *body.MeetingType == "Other" || *body.MeetingType == "None") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.meeting_type", *body.MeetingType, []any{"Board", "Maintainers", "Marketing", "Technical", "Legal", "Other", "None"}))
		}
	}
	if body.Visibility != nil {
		if !(*body.Visibility == "public" || *body.Visibility == "private") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.visibility", *body.Visibility, []any{"public", "private"}))
		}
	}
	if body.ArtifactVisibility != nil {
		if !(*body.ArtifactVisibility == "meeting_hosts" || *body.ArtifactVisibility == "meeting_participants" || *body.ArtifactVisibility == "public") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.artifact_visibility", *body.ArtifactVisibility, []any{"meeting_hosts", "meeting_participants", "public"}))
		}
	}
	if body.PublicLink != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.public_link", *body.PublicLink, goa.FormatURI))
	}
	if body.Password != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.password", *body.Password, goa.FormatUUID))
	}
	if body.ZoomConfig != nil {
		if err2 := ValidateZoomConfigFullResponseBody(body.ZoomConfig); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	for _, e := range body.Occurrences {
		if e != nil {
			if err2 := ValidateOccurrenceResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateGetMeetingBaseResponseBody runs the validations defined on
// Get-Meeting-BaseResponseBody
func ValidateGetMeetingBaseResponseBody(body *GetMeetingBaseResponseBody) (err error) {
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.ProjectUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.project_uid", *body.ProjectUID, goa.FormatUUID))
	}
	if body.StartTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.start_time", *body.StartTime, goa.FormatDateTime))
	}
	if body.Duration != nil {
		if *body.Duration < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.duration", *body.Duration, 0, true))
		}
	}
	if body.Duration != nil {
		if *body.Duration > 600 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.duration", *body.Duration, 600, false))
		}
	}
	if body.Recurrence != nil {
		if err2 := ValidateRecurrenceResponseBody(body.Recurrence); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	for _, e := range body.Committees {
		if e != nil {
			if err2 := ValidateCommitteeResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.Platform != nil {
		if !(*body.Platform == "Zoom") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.platform", *body.Platform, []any{"Zoom"}))
		}
	}
	if body.EarlyJoinTimeMinutes != nil {
		if *body.EarlyJoinTimeMinutes < 10 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.early_join_time_minutes", *body.EarlyJoinTimeMinutes, 10, true))
		}
	}
	if body.EarlyJoinTimeMinutes != nil {
		if *body.EarlyJoinTimeMinutes > 60 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.early_join_time_minutes", *body.EarlyJoinTimeMinutes, 60, false))
		}
	}
	if body.MeetingType != nil {
		if !(*body.MeetingType == "Board" || *body.MeetingType == "Maintainers" || *body.MeetingType == "Marketing" || *body.MeetingType == "Technical" || *body.MeetingType == "Legal" || *body.MeetingType == "Other" || *body.MeetingType == "None") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.meeting_type", *body.MeetingType, []any{"Board", "Maintainers", "Marketing", "Technical", "Legal", "Other", "None"}))
		}
	}
	if body.Visibility != nil {
		if !(*body.Visibility == "public" || *body.Visibility == "private") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.visibility", *body.Visibility, []any{"public", "private"}))
		}
	}
	if body.ArtifactVisibility != nil {
		if !(*body.ArtifactVisibility == "meeting_hosts" || *body.ArtifactVisibility == "meeting_participants" || *body.ArtifactVisibility == "public") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.artifact_visibility", *body.ArtifactVisibility, []any{"meeting_hosts", "meeting_participants", "public"}))
		}
	}
	if body.PublicLink != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.public_link", *body.PublicLink, goa.FormatURI))
	}
	if body.Password != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.password", *body.Password, goa.FormatUUID))
	}
	if body.ZoomConfig != nil {
		if err2 := ValidateZoomConfigFullResponseBody(body.ZoomConfig); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	for _, e := range body.Occurrences {
		if e != nil {
			if err2 := ValidateOccurrenceResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateGetMeetingSettingsResponseBody runs the validations defined on
// Get-Meeting-SettingsResponseBody
func ValidateGetMeetingSettingsResponseBody(body *GetMeetingSettingsResponseBody) (err error) {
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateGetMeetingJoinURLResponseBody runs the validations defined on
// Get-Meeting-Join-UrlResponseBody
func ValidateGetMeetingJoinURLResponseBody(body *GetMeetingJoinURLResponseBody) (err error) {
	if body.JoinURL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("join_url", "body"))
	}
	if body.JoinURL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.join_url", *body.JoinURL, goa.FormatURI))
	}
	return
}

// ValidateUpdateMeetingBaseResponseBody runs the validations defined on
// Update-Meeting-BaseResponseBody
func ValidateUpdateMeetingBaseResponseBody(body *UpdateMeetingBaseResponseBody) (err error) {
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.ProjectUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.project_uid", *body.ProjectUID, goa.FormatUUID))
	}
	if body.StartTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.start_time", *body.StartTime, goa.FormatDateTime))
	}
	if body.Duration != nil {
		if *body.Duration < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.duration", *body.Duration, 0, true))
		}
	}
	if body.Duration != nil {
		if *body.Duration > 600 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.duration", *body.Duration, 600, false))
		}
	}
	if body.Recurrence != nil {
		if err2 := ValidateRecurrenceResponseBody(body.Recurrence); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	for _, e := range body.Committees {
		if e != nil {
			if err2 := ValidateCommitteeResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.Platform != nil {
		if !(*body.Platform == "Zoom") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.platform", *body.Platform, []any{"Zoom"}))
		}
	}
	if body.EarlyJoinTimeMinutes != nil {
		if *body.EarlyJoinTimeMinutes < 10 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.early_join_time_minutes", *body.EarlyJoinTimeMinutes, 10, true))
		}
	}
	if body.EarlyJoinTimeMinutes != nil {
		if *body.EarlyJoinTimeMinutes > 60 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.early_join_time_minutes", *body.EarlyJoinTimeMinutes, 60, false))
		}
	}
	if body.MeetingType != nil {
		if !(*body.MeetingType == "Board" || *body.MeetingType == "Maintainers" || *body.MeetingType == "Marketing" || *body.MeetingType == "Technical" || *body.MeetingType == "Legal" || *body.MeetingType == "Other" || *body.MeetingType == "None") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.meeting_type", *body.MeetingType, []any{"Board", "Maintainers", "Marketing", "Technical", "Legal", "Other", "None"}))
		}
	}
	if body.Visibility != nil {
		if !(*body.Visibility == "public" || *body.Visibility == "private") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.visibility", *body.Visibility, []any{"public", "private"}))
		}
	}
	if body.ArtifactVisibility != nil {
		if !(*body.ArtifactVisibility == "meeting_hosts" || *body.ArtifactVisibility == "meeting_participants" || *body.ArtifactVisibility == "public") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.artifact_visibility", *body.ArtifactVisibility, []any{"meeting_hosts", "meeting_participants", "public"}))
		}
	}
	if body.PublicLink != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.public_link", *body.PublicLink, goa.FormatURI))
	}
	if body.Password != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.password", *body.Password, goa.FormatUUID))
	}
	if body.ZoomConfig != nil {
		if err2 := ValidateZoomConfigFullResponseBody(body.ZoomConfig); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	for _, e := range body.Occurrences {
		if e != nil {
			if err2 := ValidateOccurrenceResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateUpdateMeetingSettingsResponseBody runs the validations defined on
// Update-Meeting-SettingsResponseBody
func ValidateUpdateMeetingSettingsResponseBody(body *UpdateMeetingSettingsResponseBody) (err error) {
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateGetMeetingRegistrantsResponseBody runs the validations defined on
// Get-Meeting-RegistrantsResponseBody
func ValidateGetMeetingRegistrantsResponseBody(body *GetMeetingRegistrantsResponseBody) (err error) {
	if body.Registrants == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("registrants", "body"))
	}
	for _, e := range body.Registrants {
		if e != nil {
			if err2 := ValidateRegistrantResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateCreateMeetingRegistrantResponseBody runs the validations defined on
// Create-Meeting-RegistrantResponseBody
func ValidateCreateMeetingRegistrantResponseBody(body *CreateMeetingRegistrantResponseBody) (err error) {
	if body.UID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uid", "body"))
	}
	if body.MeetingUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("meeting_uid", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.MeetingUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.meeting_uid", *body.MeetingUID, goa.FormatUUID))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	if body.FirstName != nil {
		if utf8.RuneCountInString(*body.FirstName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.first_name", *body.FirstName, utf8.RuneCountInString(*body.FirstName), 1, true))
		}
	}
	if body.FirstName != nil {
		if utf8.RuneCountInString(*body.FirstName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.first_name", *body.FirstName, utf8.RuneCountInString(*body.FirstName), 100, false))
		}
	}
	if body.LastName != nil {
		if utf8.RuneCountInString(*body.LastName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.last_name", *body.LastName, utf8.RuneCountInString(*body.LastName), 1, true))
		}
	}
	if body.LastName != nil {
		if utf8.RuneCountInString(*body.LastName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.last_name", *body.LastName, utf8.RuneCountInString(*body.LastName), 100, false))
		}
	}
	if body.Type != nil {
		if !(*body.Type == "direct" || *body.Type == "committee") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []any{"direct", "committee"}))
		}
	}
	if body.CommitteeUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.committee_uid", *body.CommitteeUID, goa.FormatUUID))
	}
	if body.OccurrenceID != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.occurrence_id", *body.OccurrenceID, "^[0-9]*$"))
	}
	if body.AvatarURL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.avatar_url", *body.AvatarURL, goa.FormatURI))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateGetMeetingRegistrantResponseBody runs the validations defined on
// Get-Meeting-RegistrantResponseBody
func ValidateGetMeetingRegistrantResponseBody(body *GetMeetingRegistrantResponseBody) (err error) {
	if body.UID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uid", "body"))
	}
	if body.MeetingUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("meeting_uid", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.MeetingUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.meeting_uid", *body.MeetingUID, goa.FormatUUID))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	if body.FirstName != nil {
		if utf8.RuneCountInString(*body.FirstName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.first_name", *body.FirstName, utf8.RuneCountInString(*body.FirstName), 1, true))
		}
	}
	if body.FirstName != nil {
		if utf8.RuneCountInString(*body.FirstName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.first_name", *body.FirstName, utf8.RuneCountInString(*body.FirstName), 100, false))
		}
	}
	if body.LastName != nil {
		if utf8.RuneCountInString(*body.LastName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.last_name", *body.LastName, utf8.RuneCountInString(*body.LastName), 1, true))
		}
	}
	if body.LastName != nil {
		if utf8.RuneCountInString(*body.LastName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.last_name", *body.LastName, utf8.RuneCountInString(*body.LastName), 100, false))
		}
	}
	if body.Type != nil {
		if !(*body.Type == "direct" || *body.Type == "committee") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []any{"direct", "committee"}))
		}
	}
	if body.CommitteeUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.committee_uid", *body.CommitteeUID, goa.FormatUUID))
	}
	if body.OccurrenceID != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.occurrence_id", *body.OccurrenceID, "^[0-9]*$"))
	}
	if body.AvatarURL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.avatar_url", *body.AvatarURL, goa.FormatURI))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateUpdateMeetingRegistrantResponseBody runs the validations defined on
// Update-Meeting-RegistrantResponseBody
func ValidateUpdateMeetingRegistrantResponseBody(body *UpdateMeetingRegistrantResponseBody) (err error) {
	if body.UID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uid", "body"))
	}
	if body.MeetingUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("meeting_uid", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.MeetingUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.meeting_uid", *body.MeetingUID, goa.FormatUUID))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	if body.FirstName != nil {
		if utf8.RuneCountInString(*body.FirstName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.first_name", *body.FirstName, utf8.RuneCountInString(*body.FirstName), 1, true))
		}
	}
	if body.FirstName != nil {
		if utf8.RuneCountInString(*body.FirstName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.first_name", *body.FirstName, utf8.RuneCountInString(*body.FirstName), 100, false))
		}
	}
	if body.LastName != nil {
		if utf8.RuneCountInString(*body.LastName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.last_name", *body.LastName, utf8.RuneCountInString(*body.LastName), 1, true))
		}
	}
	if body.LastName != nil {
		if utf8.RuneCountInString(*body.LastName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.last_name", *body.LastName, utf8.RuneCountInString(*body.LastName), 100, false))
		}
	}
	if body.Type != nil {
		if !(*body.Type == "direct" || *body.Type == "committee") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []any{"direct", "committee"}))
		}
	}
	if body.CommitteeUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.committee_uid", *body.CommitteeUID, goa.FormatUUID))
	}
	if body.OccurrenceID != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.occurrence_id", *body.OccurrenceID, "^[0-9]*$"))
	}
	if body.AvatarURL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.avatar_url", *body.AvatarURL, goa.FormatURI))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateZoomWebhookResponseBody runs the validations defined on
// Zoom-WebhookResponseBody
func ValidateZoomWebhookResponseBody(body *ZoomWebhookResponseBody) (err error) {
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	return
}

// ValidateGetPastMeetingsResponseBody runs the validations defined on
// Get-Past-MeetingsResponseBody
func ValidateGetPastMeetingsResponseBody(body *GetPastMeetingsResponseBody) (err error) {
	if body.PastMeetings == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("past_meetings", "body"))
	}
	for _, e := range body.PastMeetings {
		if e != nil {
			if err2 := ValidatePastMeetingResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateCreatePastMeetingResponseBody runs the validations defined on
// Create-Past-MeetingResponseBody
func ValidateCreatePastMeetingResponseBody(body *CreatePastMeetingResponseBody) (err error) {
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.MeetingUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.meeting_uid", *body.MeetingUID, goa.FormatUUID))
	}
	if body.ProjectUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.project_uid", *body.ProjectUID, goa.FormatUUID))
	}
	if body.ScheduledStartTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.scheduled_start_time", *body.ScheduledStartTime, goa.FormatDateTime))
	}
	if body.ScheduledEndTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.scheduled_end_time", *body.ScheduledEndTime, goa.FormatDateTime))
	}
	if body.Duration != nil {
		if *body.Duration < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.duration", *body.Duration, 0, true))
		}
	}
	if body.Duration != nil {
		if *body.Duration > 600 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.duration", *body.Duration, 600, false))
		}
	}
	if body.Recurrence != nil {
		if err2 := ValidateRecurrenceResponseBody(body.Recurrence); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	for _, e := range body.Committees {
		if e != nil {
			if err2 := ValidateCommitteeResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.Platform != nil {
		if !(*body.Platform == "Zoom") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.platform", *body.Platform, []any{"Zoom"}))
		}
	}
	if body.EarlyJoinTimeMinutes != nil {
		if *body.EarlyJoinTimeMinutes < 10 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.early_join_time_minutes", *body.EarlyJoinTimeMinutes, 10, true))
		}
	}
	if body.EarlyJoinTimeMinutes != nil {
		if *body.EarlyJoinTimeMinutes > 60 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.early_join_time_minutes", *body.EarlyJoinTimeMinutes, 60, false))
		}
	}
	if body.MeetingType != nil {
		if !(*body.MeetingType == "Board" || *body.MeetingType == "Maintainers" || *body.MeetingType == "Marketing" || *body.MeetingType == "Technical" || *body.MeetingType == "Legal" || *body.MeetingType == "Other" || *body.MeetingType == "None") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.meeting_type", *body.MeetingType, []any{"Board", "Maintainers", "Marketing", "Technical", "Legal", "Other", "None"}))
		}
	}
	if body.Visibility != nil {
		if !(*body.Visibility == "public" || *body.Visibility == "private") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.visibility", *body.Visibility, []any{"public", "private"}))
		}
	}
	if body.ArtifactVisibility != nil {
		if !(*body.ArtifactVisibility == "meeting_hosts" || *body.ArtifactVisibility == "meeting_participants" || *body.ArtifactVisibility == "public") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.artifact_visibility", *body.ArtifactVisibility, []any{"meeting_hosts", "meeting_participants", "public"}))
		}
	}
	if body.PublicLink != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.public_link", *body.PublicLink, goa.FormatURI))
	}
	if body.ZoomConfig != nil {
		if err2 := ValidateZoomConfigFullResponseBody(body.ZoomConfig); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	for _, e := range body.Sessions {
		if e != nil {
			if err2 := ValidateSessionResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateGetPastMeetingResponseBody runs the validations defined on
// Get-Past-MeetingResponseBody
func ValidateGetPastMeetingResponseBody(body *GetPastMeetingResponseBody) (err error) {
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.MeetingUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.meeting_uid", *body.MeetingUID, goa.FormatUUID))
	}
	if body.ProjectUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.project_uid", *body.ProjectUID, goa.FormatUUID))
	}
	if body.ScheduledStartTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.scheduled_start_time", *body.ScheduledStartTime, goa.FormatDateTime))
	}
	if body.ScheduledEndTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.scheduled_end_time", *body.ScheduledEndTime, goa.FormatDateTime))
	}
	if body.Duration != nil {
		if *body.Duration < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.duration", *body.Duration, 0, true))
		}
	}
	if body.Duration != nil {
		if *body.Duration > 600 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.duration", *body.Duration, 600, false))
		}
	}
	if body.Recurrence != nil {
		if err2 := ValidateRecurrenceResponseBody(body.Recurrence); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	for _, e := range body.Committees {
		if e != nil {
			if err2 := ValidateCommitteeResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.Platform != nil {
		if !(*body.Platform == "Zoom") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.platform", *body.Platform, []any{"Zoom"}))
		}
	}
	if body.EarlyJoinTimeMinutes != nil {
		if *body.EarlyJoinTimeMinutes < 10 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.early_join_time_minutes", *body.EarlyJoinTimeMinutes, 10, true))
		}
	}
	if body.EarlyJoinTimeMinutes != nil {
		if *body.EarlyJoinTimeMinutes > 60 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.early_join_time_minutes", *body.EarlyJoinTimeMinutes, 60, false))
		}
	}
	if body.MeetingType != nil {
		if !(*body.MeetingType == "Board" || *body.MeetingType == "Maintainers" || *body.MeetingType == "Marketing" || *body.MeetingType == "Technical" || *body.MeetingType == "Legal" || *body.MeetingType == "Other" || *body.MeetingType == "None") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.meeting_type", *body.MeetingType, []any{"Board", "Maintainers", "Marketing", "Technical", "Legal", "Other", "None"}))
		}
	}
	if body.Visibility != nil {
		if !(*body.Visibility == "public" || *body.Visibility == "private") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.visibility", *body.Visibility, []any{"public", "private"}))
		}
	}
	if body.ArtifactVisibility != nil {
		if !(*body.ArtifactVisibility == "meeting_hosts" || *body.ArtifactVisibility == "meeting_participants" || *body.ArtifactVisibility == "public") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.artifact_visibility", *body.ArtifactVisibility, []any{"meeting_hosts", "meeting_participants", "public"}))
		}
	}
	if body.PublicLink != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.public_link", *body.PublicLink, goa.FormatURI))
	}
	if body.ZoomConfig != nil {
		if err2 := ValidateZoomConfigFullResponseBody(body.ZoomConfig); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	for _, e := range body.Sessions {
		if e != nil {
			if err2 := ValidateSessionResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateGetPastMeetingParticipantsResponseBody runs the validations defined
// on Get-Past-Meeting-ParticipantsResponseBody
func ValidateGetPastMeetingParticipantsResponseBody(body *GetPastMeetingParticipantsResponseBody) (err error) {
	if body.Participants == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("participants", "body"))
	}
	for _, e := range body.Participants {
		if e != nil {
			if err2 := ValidatePastMeetingParticipantResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateCreatePastMeetingParticipantResponseBody runs the validations
// defined on Create-Past-Meeting-ParticipantResponseBody
func ValidateCreatePastMeetingParticipantResponseBody(body *CreatePastMeetingParticipantResponseBody) (err error) {
	if body.UID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uid", "body"))
	}
	if body.PastMeetingUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("past_meeting_uid", "body"))
	}
	if body.MeetingUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("meeting_uid", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.PastMeetingUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.past_meeting_uid", *body.PastMeetingUID, goa.FormatUUID))
	}
	if body.MeetingUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.meeting_uid", *body.MeetingUID, goa.FormatUUID))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	if body.FirstName != nil {
		if utf8.RuneCountInString(*body.FirstName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.first_name", *body.FirstName, utf8.RuneCountInString(*body.FirstName), 1, true))
		}
	}
	if body.FirstName != nil {
		if utf8.RuneCountInString(*body.FirstName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.first_name", *body.FirstName, utf8.RuneCountInString(*body.FirstName), 100, false))
		}
	}
	if body.LastName != nil {
		if utf8.RuneCountInString(*body.LastName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.last_name", *body.LastName, utf8.RuneCountInString(*body.LastName), 1, true))
		}
	}
	if body.LastName != nil {
		if utf8.RuneCountInString(*body.LastName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.last_name", *body.LastName, utf8.RuneCountInString(*body.LastName), 100, false))
		}
	}
	if body.AvatarURL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.avatar_url", *body.AvatarURL, goa.FormatURI))
	}
	for _, e := range body.Sessions {
		if e != nil {
			if err2 := ValidateParticipantSessionResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateGetPastMeetingParticipantResponseBody runs the validations defined
// on Get-Past-Meeting-ParticipantResponseBody
func ValidateGetPastMeetingParticipantResponseBody(body *GetPastMeetingParticipantResponseBody) (err error) {
	if body.UID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uid", "body"))
	}
	if body.PastMeetingUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("past_meeting_uid", "body"))
	}
	if body.MeetingUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("meeting_uid", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.PastMeetingUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.past_meeting_uid", *body.PastMeetingUID, goa.FormatUUID))
	}
	if body.MeetingUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.meeting_uid", *body.MeetingUID, goa.FormatUUID))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	if body.FirstName != nil {
		if utf8.RuneCountInString(*body.FirstName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.first_name", *body.FirstName, utf8.RuneCountInString(*body.FirstName), 1, true))
		}
	}
	if body.FirstName != nil {
		if utf8.RuneCountInString(*body.FirstName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.first_name", *body.FirstName, utf8.RuneCountInString(*body.FirstName), 100, false))
		}
	}
	if body.LastName != nil {
		if utf8.RuneCountInString(*body.LastName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.last_name", *body.LastName, utf8.RuneCountInString(*body.LastName), 1, true))
		}
	}
	if body.LastName != nil {
		if utf8.RuneCountInString(*body.LastName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.last_name", *body.LastName, utf8.RuneCountInString(*body.LastName), 100, false))
		}
	}
	if body.AvatarURL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.avatar_url", *body.AvatarURL, goa.FormatURI))
	}
	for _, e := range body.Sessions {
		if e != nil {
			if err2 := ValidateParticipantSessionResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateUpdatePastMeetingParticipantResponseBody runs the validations
// defined on Update-Past-Meeting-ParticipantResponseBody
func ValidateUpdatePastMeetingParticipantResponseBody(body *UpdatePastMeetingParticipantResponseBody) (err error) {
	if body.UID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uid", "body"))
	}
	if body.PastMeetingUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("past_meeting_uid", "body"))
	}
	if body.MeetingUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("meeting_uid", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.PastMeetingUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.past_meeting_uid", *body.PastMeetingUID, goa.FormatUUID))
	}
	if body.MeetingUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.meeting_uid", *body.MeetingUID, goa.FormatUUID))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	if body.FirstName != nil {
		if utf8.RuneCountInString(*body.FirstName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.first_name", *body.FirstName, utf8.RuneCountInString(*body.FirstName), 1, true))
		}
	}
	if body.FirstName != nil {
		if utf8.RuneCountInString(*body.FirstName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.first_name", *body.FirstName, utf8.RuneCountInString(*body.FirstName), 100, false))
		}
	}
	if body.LastName != nil {
		if utf8.RuneCountInString(*body.LastName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.last_name", *body.LastName, utf8.RuneCountInString(*body.LastName), 1, true))
		}
	}
	if body.LastName != nil {
		if utf8.RuneCountInString(*body.LastName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.last_name", *body.LastName, utf8.RuneCountInString(*body.LastName), 100, false))
		}
	}
	if body.AvatarURL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.avatar_url", *body.AvatarURL, goa.FormatURI))
	}
	for _, e := range body.Sessions {
		if e != nil {
			if err2 := ValidateParticipantSessionResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateGetPastMeetingSummariesResponseBody runs the validations defined on
// Get-Past-Meeting-SummariesResponseBody
func ValidateGetPastMeetingSummariesResponseBody(body *GetPastMeetingSummariesResponseBody) (err error) {
	if body.Summaries == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("summaries", "body"))
	}
	for _, e := range body.Summaries {
		if e != nil {
			if err2 := ValidatePastMeetingSummaryResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateGetPastMeetingSummaryResponseBody runs the validations defined on
// Get-Past-Meeting-SummaryResponseBody
func ValidateGetPastMeetingSummaryResponseBody(body *GetPastMeetingSummaryResponseBody) (err error) {
	if body.UID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uid", "body"))
	}
	if body.PastMeetingUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("past_meeting_uid", "body"))
	}
	if body.MeetingUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("meeting_uid", "body"))
	}
	if body.Platform == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("platform", "body"))
	}
	if body.SummaryData == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("summary_data", "body"))
	}
	if body.RequiresApproval == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("requires_approval", "body"))
	}
	if body.Approved == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("approved", "body"))
	}
	if body.EmailSent == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email_sent", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "body"))
	}
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.PastMeetingUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.past_meeting_uid", *body.PastMeetingUID, goa.FormatUUID))
	}
	if body.MeetingUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.meeting_uid", *body.MeetingUID, goa.FormatUUID))
	}
	if body.Platform != nil {
		if !(*body.Platform == "Zoom") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.platform", *body.Platform, []any{"Zoom"}))
		}
	}
	if body.ZoomConfig != nil {
		if err2 := ValidatePastMeetingSummaryZoomConfigResponseBody(body.ZoomConfig); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.SummaryData != nil {
		if err2 := ValidateSummaryDataResponseBody(body.SummaryData); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateUpdatePastMeetingSummaryResponseBody runs the validations defined on
// Update-Past-Meeting-SummaryResponseBody
func ValidateUpdatePastMeetingSummaryResponseBody(body *UpdatePastMeetingSummaryResponseBody) (err error) {
	if body.UID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uid", "body"))
	}
	if body.PastMeetingUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("past_meeting_uid", "body"))
	}
	if body.MeetingUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("meeting_uid", "body"))
	}
	if body.Platform == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("platform", "body"))
	}
	if body.SummaryData == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("summary_data", "body"))
	}
	if body.RequiresApproval == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("requires_approval", "body"))
	}
	if body.Approved == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("approved", "body"))
	}
	if body.EmailSent == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email_sent", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "body"))
	}
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.PastMeetingUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.past_meeting_uid", *body.PastMeetingUID, goa.FormatUUID))
	}
	if body.MeetingUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.meeting_uid", *body.MeetingUID, goa.FormatUUID))
	}
	if body.Platform != nil {
		if !(*body.Platform == "Zoom") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.platform", *body.Platform, []any{"Zoom"}))
		}
	}
	if body.ZoomConfig != nil {
		if err2 := ValidatePastMeetingSummaryZoomConfigResponseBody(body.ZoomConfig); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.SummaryData != nil {
		if err2 := ValidateSummaryDataResponseBody(body.SummaryData); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateGetMeetingsBadRequestResponseBody runs the validations defined on
// get-meetings_BadRequest_response_body
func ValidateGetMeetingsBadRequestResponseBody(body *GetMeetingsBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetMeetingsInternalServerErrorResponseBody runs the validations
// defined on get-meetings_InternalServerError_response_body
func ValidateGetMeetingsInternalServerErrorResponseBody(body *GetMeetingsInternalServerErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetMeetingsServiceUnavailableResponseBody runs the validations
// defined on get-meetings_ServiceUnavailable_response_body
func ValidateGetMeetingsServiceUnavailableResponseBody(body *GetMeetingsServiceUnavailableResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateMeetingBadRequestResponseBody runs the validations defined on
// create-meeting_BadRequest_response_body
func ValidateCreateMeetingBadRequestResponseBody(body *CreateMeetingBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateMeetingConflictResponseBody runs the validations defined on
// create-meeting_Conflict_response_body
func ValidateCreateMeetingConflictResponseBody(body *CreateMeetingConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateMeetingInternalServerErrorResponseBody runs the validations
// defined on create-meeting_InternalServerError_response_body
func ValidateCreateMeetingInternalServerErrorResponseBody(body *CreateMeetingInternalServerErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateMeetingServiceUnavailableResponseBody runs the validations
// defined on create-meeting_ServiceUnavailable_response_body
func ValidateCreateMeetingServiceUnavailableResponseBody(body *CreateMeetingServiceUnavailableResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetMeetingBaseInternalServerErrorResponseBody runs the validations
// defined on get-meeting-base_InternalServerError_response_body
func ValidateGetMeetingBaseInternalServerErrorResponseBody(body *GetMeetingBaseInternalServerErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetMeetingBaseNotFoundResponseBody runs the validations defined on
// get-meeting-base_NotFound_response_body
func ValidateGetMeetingBaseNotFoundResponseBody(body *GetMeetingBaseNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetMeetingBaseServiceUnavailableResponseBody runs the validations
// defined on get-meeting-base_ServiceUnavailable_response_body
func ValidateGetMeetingBaseServiceUnavailableResponseBody(body *GetMeetingBaseServiceUnavailableResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetMeetingSettingsInternalServerErrorResponseBody runs the
// validations defined on get-meeting-settings_InternalServerError_response_body
func ValidateGetMeetingSettingsInternalServerErrorResponseBody(body *GetMeetingSettingsInternalServerErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetMeetingSettingsNotFoundResponseBody runs the validations defined
// on get-meeting-settings_NotFound_response_body
func ValidateGetMeetingSettingsNotFoundResponseBody(body *GetMeetingSettingsNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetMeetingSettingsServiceUnavailableResponseBody runs the
// validations defined on get-meeting-settings_ServiceUnavailable_response_body
func ValidateGetMeetingSettingsServiceUnavailableResponseBody(body *GetMeetingSettingsServiceUnavailableResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetMeetingJoinURLInternalServerErrorResponseBody runs the
// validations defined on get-meeting-join-url_InternalServerError_response_body
func ValidateGetMeetingJoinURLInternalServerErrorResponseBody(body *GetMeetingJoinURLInternalServerErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetMeetingJoinURLNotFoundResponseBody runs the validations defined
// on get-meeting-join-url_NotFound_response_body
func ValidateGetMeetingJoinURLNotFoundResponseBody(body *GetMeetingJoinURLNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetMeetingJoinURLServiceUnavailableResponseBody runs the validations
// defined on get-meeting-join-url_ServiceUnavailable_response_body
func ValidateGetMeetingJoinURLServiceUnavailableResponseBody(body *GetMeetingJoinURLServiceUnavailableResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetMeetingJoinURLUnauthorizedResponseBody runs the validations
// defined on get-meeting-join-url_Unauthorized_response_body
func ValidateGetMeetingJoinURLUnauthorizedResponseBody(body *GetMeetingJoinURLUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateMeetingBaseBadRequestResponseBody runs the validations defined
// on update-meeting-base_BadRequest_response_body
func ValidateUpdateMeetingBaseBadRequestResponseBody(body *UpdateMeetingBaseBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateMeetingBaseConflictResponseBody runs the validations defined
// on update-meeting-base_Conflict_response_body
func ValidateUpdateMeetingBaseConflictResponseBody(body *UpdateMeetingBaseConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateMeetingBaseInternalServerErrorResponseBody runs the
// validations defined on update-meeting-base_InternalServerError_response_body
func ValidateUpdateMeetingBaseInternalServerErrorResponseBody(body *UpdateMeetingBaseInternalServerErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateMeetingBaseNotFoundResponseBody runs the validations defined
// on update-meeting-base_NotFound_response_body
func ValidateUpdateMeetingBaseNotFoundResponseBody(body *UpdateMeetingBaseNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateMeetingBaseServiceUnavailableResponseBody runs the validations
// defined on update-meeting-base_ServiceUnavailable_response_body
func ValidateUpdateMeetingBaseServiceUnavailableResponseBody(body *UpdateMeetingBaseServiceUnavailableResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateMeetingSettingsBadRequestResponseBody runs the validations
// defined on update-meeting-settings_BadRequest_response_body
func ValidateUpdateMeetingSettingsBadRequestResponseBody(body *UpdateMeetingSettingsBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateMeetingSettingsInternalServerErrorResponseBody runs the
// validations defined on
// update-meeting-settings_InternalServerError_response_body
func ValidateUpdateMeetingSettingsInternalServerErrorResponseBody(body *UpdateMeetingSettingsInternalServerErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateMeetingSettingsNotFoundResponseBody runs the validations
// defined on update-meeting-settings_NotFound_response_body
func ValidateUpdateMeetingSettingsNotFoundResponseBody(body *UpdateMeetingSettingsNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateMeetingSettingsServiceUnavailableResponseBody runs the
// validations defined on
// update-meeting-settings_ServiceUnavailable_response_body
func ValidateUpdateMeetingSettingsServiceUnavailableResponseBody(body *UpdateMeetingSettingsServiceUnavailableResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteMeetingBadRequestResponseBody runs the validations defined on
// delete-meeting_BadRequest_response_body
func ValidateDeleteMeetingBadRequestResponseBody(body *DeleteMeetingBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteMeetingInternalServerErrorResponseBody runs the validations
// defined on delete-meeting_InternalServerError_response_body
func ValidateDeleteMeetingInternalServerErrorResponseBody(body *DeleteMeetingInternalServerErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteMeetingNotFoundResponseBody runs the validations defined on
// delete-meeting_NotFound_response_body
func ValidateDeleteMeetingNotFoundResponseBody(body *DeleteMeetingNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteMeetingServiceUnavailableResponseBody runs the validations
// defined on delete-meeting_ServiceUnavailable_response_body
func ValidateDeleteMeetingServiceUnavailableResponseBody(body *DeleteMeetingServiceUnavailableResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetMeetingRegistrantsInternalServerErrorResponseBody runs the
// validations defined on
// get-meeting-registrants_InternalServerError_response_body
func ValidateGetMeetingRegistrantsInternalServerErrorResponseBody(body *GetMeetingRegistrantsInternalServerErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetMeetingRegistrantsNotFoundResponseBody runs the validations
// defined on get-meeting-registrants_NotFound_response_body
func ValidateGetMeetingRegistrantsNotFoundResponseBody(body *GetMeetingRegistrantsNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetMeetingRegistrantsServiceUnavailableResponseBody runs the
// validations defined on
// get-meeting-registrants_ServiceUnavailable_response_body
func ValidateGetMeetingRegistrantsServiceUnavailableResponseBody(body *GetMeetingRegistrantsServiceUnavailableResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateMeetingRegistrantBadRequestResponseBody runs the validations
// defined on create-meeting-registrant_BadRequest_response_body
func ValidateCreateMeetingRegistrantBadRequestResponseBody(body *CreateMeetingRegistrantBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateMeetingRegistrantConflictResponseBody runs the validations
// defined on create-meeting-registrant_Conflict_response_body
func ValidateCreateMeetingRegistrantConflictResponseBody(body *CreateMeetingRegistrantConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateMeetingRegistrantInternalServerErrorResponseBody runs the
// validations defined on
// create-meeting-registrant_InternalServerError_response_body
func ValidateCreateMeetingRegistrantInternalServerErrorResponseBody(body *CreateMeetingRegistrantInternalServerErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateMeetingRegistrantNotFoundResponseBody runs the validations
// defined on create-meeting-registrant_NotFound_response_body
func ValidateCreateMeetingRegistrantNotFoundResponseBody(body *CreateMeetingRegistrantNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateMeetingRegistrantServiceUnavailableResponseBody runs the
// validations defined on
// create-meeting-registrant_ServiceUnavailable_response_body
func ValidateCreateMeetingRegistrantServiceUnavailableResponseBody(body *CreateMeetingRegistrantServiceUnavailableResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetMeetingRegistrantInternalServerErrorResponseBody runs the
// validations defined on
// get-meeting-registrant_InternalServerError_response_body
func ValidateGetMeetingRegistrantInternalServerErrorResponseBody(body *GetMeetingRegistrantInternalServerErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetMeetingRegistrantNotFoundResponseBody runs the validations
// defined on get-meeting-registrant_NotFound_response_body
func ValidateGetMeetingRegistrantNotFoundResponseBody(body *GetMeetingRegistrantNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetMeetingRegistrantServiceUnavailableResponseBody runs the
// validations defined on
// get-meeting-registrant_ServiceUnavailable_response_body
func ValidateGetMeetingRegistrantServiceUnavailableResponseBody(body *GetMeetingRegistrantServiceUnavailableResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateMeetingRegistrantBadRequestResponseBody runs the validations
// defined on update-meeting-registrant_BadRequest_response_body
func ValidateUpdateMeetingRegistrantBadRequestResponseBody(body *UpdateMeetingRegistrantBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateMeetingRegistrantConflictResponseBody runs the validations
// defined on update-meeting-registrant_Conflict_response_body
func ValidateUpdateMeetingRegistrantConflictResponseBody(body *UpdateMeetingRegistrantConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateMeetingRegistrantInternalServerErrorResponseBody runs the
// validations defined on
// update-meeting-registrant_InternalServerError_response_body
func ValidateUpdateMeetingRegistrantInternalServerErrorResponseBody(body *UpdateMeetingRegistrantInternalServerErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateMeetingRegistrantNotFoundResponseBody runs the validations
// defined on update-meeting-registrant_NotFound_response_body
func ValidateUpdateMeetingRegistrantNotFoundResponseBody(body *UpdateMeetingRegistrantNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateMeetingRegistrantServiceUnavailableResponseBody runs the
// validations defined on
// update-meeting-registrant_ServiceUnavailable_response_body
func ValidateUpdateMeetingRegistrantServiceUnavailableResponseBody(body *UpdateMeetingRegistrantServiceUnavailableResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteMeetingRegistrantBadRequestResponseBody runs the validations
// defined on delete-meeting-registrant_BadRequest_response_body
func ValidateDeleteMeetingRegistrantBadRequestResponseBody(body *DeleteMeetingRegistrantBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteMeetingRegistrantInternalServerErrorResponseBody runs the
// validations defined on
// delete-meeting-registrant_InternalServerError_response_body
func ValidateDeleteMeetingRegistrantInternalServerErrorResponseBody(body *DeleteMeetingRegistrantInternalServerErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteMeetingRegistrantNotFoundResponseBody runs the validations
// defined on delete-meeting-registrant_NotFound_response_body
func ValidateDeleteMeetingRegistrantNotFoundResponseBody(body *DeleteMeetingRegistrantNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteMeetingRegistrantServiceUnavailableResponseBody runs the
// validations defined on
// delete-meeting-registrant_ServiceUnavailable_response_body
func ValidateDeleteMeetingRegistrantServiceUnavailableResponseBody(body *DeleteMeetingRegistrantServiceUnavailableResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateZoomWebhookBadRequestResponseBody runs the validations defined on
// zoom-webhook_BadRequest_response_body
func ValidateZoomWebhookBadRequestResponseBody(body *ZoomWebhookBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateZoomWebhookInternalServerErrorResponseBody runs the validations
// defined on zoom-webhook_InternalServerError_response_body
func ValidateZoomWebhookInternalServerErrorResponseBody(body *ZoomWebhookInternalServerErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateZoomWebhookUnauthorizedResponseBody runs the validations defined on
// zoom-webhook_Unauthorized_response_body
func ValidateZoomWebhookUnauthorizedResponseBody(body *ZoomWebhookUnauthorizedResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetPastMeetingsBadRequestResponseBody runs the validations defined
// on get-past-meetings_BadRequest_response_body
func ValidateGetPastMeetingsBadRequestResponseBody(body *GetPastMeetingsBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetPastMeetingsInternalServerErrorResponseBody runs the validations
// defined on get-past-meetings_InternalServerError_response_body
func ValidateGetPastMeetingsInternalServerErrorResponseBody(body *GetPastMeetingsInternalServerErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetPastMeetingsServiceUnavailableResponseBody runs the validations
// defined on get-past-meetings_ServiceUnavailable_response_body
func ValidateGetPastMeetingsServiceUnavailableResponseBody(body *GetPastMeetingsServiceUnavailableResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreatePastMeetingBadRequestResponseBody runs the validations defined
// on create-past-meeting_BadRequest_response_body
func ValidateCreatePastMeetingBadRequestResponseBody(body *CreatePastMeetingBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreatePastMeetingConflictResponseBody runs the validations defined
// on create-past-meeting_Conflict_response_body
func ValidateCreatePastMeetingConflictResponseBody(body *CreatePastMeetingConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreatePastMeetingInternalServerErrorResponseBody runs the
// validations defined on create-past-meeting_InternalServerError_response_body
func ValidateCreatePastMeetingInternalServerErrorResponseBody(body *CreatePastMeetingInternalServerErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreatePastMeetingServiceUnavailableResponseBody runs the validations
// defined on create-past-meeting_ServiceUnavailable_response_body
func ValidateCreatePastMeetingServiceUnavailableResponseBody(body *CreatePastMeetingServiceUnavailableResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetPastMeetingInternalServerErrorResponseBody runs the validations
// defined on get-past-meeting_InternalServerError_response_body
func ValidateGetPastMeetingInternalServerErrorResponseBody(body *GetPastMeetingInternalServerErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetPastMeetingNotFoundResponseBody runs the validations defined on
// get-past-meeting_NotFound_response_body
func ValidateGetPastMeetingNotFoundResponseBody(body *GetPastMeetingNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetPastMeetingServiceUnavailableResponseBody runs the validations
// defined on get-past-meeting_ServiceUnavailable_response_body
func ValidateGetPastMeetingServiceUnavailableResponseBody(body *GetPastMeetingServiceUnavailableResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeletePastMeetingBadRequestResponseBody runs the validations defined
// on delete-past-meeting_BadRequest_response_body
func ValidateDeletePastMeetingBadRequestResponseBody(body *DeletePastMeetingBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeletePastMeetingInternalServerErrorResponseBody runs the
// validations defined on delete-past-meeting_InternalServerError_response_body
func ValidateDeletePastMeetingInternalServerErrorResponseBody(body *DeletePastMeetingInternalServerErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeletePastMeetingNotFoundResponseBody runs the validations defined
// on delete-past-meeting_NotFound_response_body
func ValidateDeletePastMeetingNotFoundResponseBody(body *DeletePastMeetingNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeletePastMeetingServiceUnavailableResponseBody runs the validations
// defined on delete-past-meeting_ServiceUnavailable_response_body
func ValidateDeletePastMeetingServiceUnavailableResponseBody(body *DeletePastMeetingServiceUnavailableResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetPastMeetingParticipantsInternalServerErrorResponseBody runs the
// validations defined on
// get-past-meeting-participants_InternalServerError_response_body
func ValidateGetPastMeetingParticipantsInternalServerErrorResponseBody(body *GetPastMeetingParticipantsInternalServerErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetPastMeetingParticipantsNotFoundResponseBody runs the validations
// defined on get-past-meeting-participants_NotFound_response_body
func ValidateGetPastMeetingParticipantsNotFoundResponseBody(body *GetPastMeetingParticipantsNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetPastMeetingParticipantsServiceUnavailableResponseBody runs the
// validations defined on
// get-past-meeting-participants_ServiceUnavailable_response_body
func ValidateGetPastMeetingParticipantsServiceUnavailableResponseBody(body *GetPastMeetingParticipantsServiceUnavailableResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreatePastMeetingParticipantBadRequestResponseBody runs the
// validations defined on
// create-past-meeting-participant_BadRequest_response_body
func ValidateCreatePastMeetingParticipantBadRequestResponseBody(body *CreatePastMeetingParticipantBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreatePastMeetingParticipantConflictResponseBody runs the
// validations defined on create-past-meeting-participant_Conflict_response_body
func ValidateCreatePastMeetingParticipantConflictResponseBody(body *CreatePastMeetingParticipantConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreatePastMeetingParticipantInternalServerErrorResponseBody runs the
// validations defined on
// create-past-meeting-participant_InternalServerError_response_body
func ValidateCreatePastMeetingParticipantInternalServerErrorResponseBody(body *CreatePastMeetingParticipantInternalServerErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreatePastMeetingParticipantNotFoundResponseBody runs the
// validations defined on create-past-meeting-participant_NotFound_response_body
func ValidateCreatePastMeetingParticipantNotFoundResponseBody(body *CreatePastMeetingParticipantNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreatePastMeetingParticipantServiceUnavailableResponseBody runs the
// validations defined on
// create-past-meeting-participant_ServiceUnavailable_response_body
func ValidateCreatePastMeetingParticipantServiceUnavailableResponseBody(body *CreatePastMeetingParticipantServiceUnavailableResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetPastMeetingParticipantInternalServerErrorResponseBody runs the
// validations defined on
// get-past-meeting-participant_InternalServerError_response_body
func ValidateGetPastMeetingParticipantInternalServerErrorResponseBody(body *GetPastMeetingParticipantInternalServerErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetPastMeetingParticipantNotFoundResponseBody runs the validations
// defined on get-past-meeting-participant_NotFound_response_body
func ValidateGetPastMeetingParticipantNotFoundResponseBody(body *GetPastMeetingParticipantNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetPastMeetingParticipantServiceUnavailableResponseBody runs the
// validations defined on
// get-past-meeting-participant_ServiceUnavailable_response_body
func ValidateGetPastMeetingParticipantServiceUnavailableResponseBody(body *GetPastMeetingParticipantServiceUnavailableResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdatePastMeetingParticipantBadRequestResponseBody runs the
// validations defined on
// update-past-meeting-participant_BadRequest_response_body
func ValidateUpdatePastMeetingParticipantBadRequestResponseBody(body *UpdatePastMeetingParticipantBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdatePastMeetingParticipantConflictResponseBody runs the
// validations defined on update-past-meeting-participant_Conflict_response_body
func ValidateUpdatePastMeetingParticipantConflictResponseBody(body *UpdatePastMeetingParticipantConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdatePastMeetingParticipantInternalServerErrorResponseBody runs the
// validations defined on
// update-past-meeting-participant_InternalServerError_response_body
func ValidateUpdatePastMeetingParticipantInternalServerErrorResponseBody(body *UpdatePastMeetingParticipantInternalServerErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdatePastMeetingParticipantNotFoundResponseBody runs the
// validations defined on update-past-meeting-participant_NotFound_response_body
func ValidateUpdatePastMeetingParticipantNotFoundResponseBody(body *UpdatePastMeetingParticipantNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdatePastMeetingParticipantServiceUnavailableResponseBody runs the
// validations defined on
// update-past-meeting-participant_ServiceUnavailable_response_body
func ValidateUpdatePastMeetingParticipantServiceUnavailableResponseBody(body *UpdatePastMeetingParticipantServiceUnavailableResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeletePastMeetingParticipantBadRequestResponseBody runs the
// validations defined on
// delete-past-meeting-participant_BadRequest_response_body
func ValidateDeletePastMeetingParticipantBadRequestResponseBody(body *DeletePastMeetingParticipantBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeletePastMeetingParticipantInternalServerErrorResponseBody runs the
// validations defined on
// delete-past-meeting-participant_InternalServerError_response_body
func ValidateDeletePastMeetingParticipantInternalServerErrorResponseBody(body *DeletePastMeetingParticipantInternalServerErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeletePastMeetingParticipantNotFoundResponseBody runs the
// validations defined on delete-past-meeting-participant_NotFound_response_body
func ValidateDeletePastMeetingParticipantNotFoundResponseBody(body *DeletePastMeetingParticipantNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeletePastMeetingParticipantServiceUnavailableResponseBody runs the
// validations defined on
// delete-past-meeting-participant_ServiceUnavailable_response_body
func ValidateDeletePastMeetingParticipantServiceUnavailableResponseBody(body *DeletePastMeetingParticipantServiceUnavailableResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetPastMeetingSummariesInternalServerErrorResponseBody runs the
// validations defined on
// get-past-meeting-summaries_InternalServerError_response_body
func ValidateGetPastMeetingSummariesInternalServerErrorResponseBody(body *GetPastMeetingSummariesInternalServerErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetPastMeetingSummariesNotFoundResponseBody runs the validations
// defined on get-past-meeting-summaries_NotFound_response_body
func ValidateGetPastMeetingSummariesNotFoundResponseBody(body *GetPastMeetingSummariesNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetPastMeetingSummariesServiceUnavailableResponseBody runs the
// validations defined on
// get-past-meeting-summaries_ServiceUnavailable_response_body
func ValidateGetPastMeetingSummariesServiceUnavailableResponseBody(body *GetPastMeetingSummariesServiceUnavailableResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetPastMeetingSummaryInternalServerErrorResponseBody runs the
// validations defined on
// get-past-meeting-summary_InternalServerError_response_body
func ValidateGetPastMeetingSummaryInternalServerErrorResponseBody(body *GetPastMeetingSummaryInternalServerErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetPastMeetingSummaryNotFoundResponseBody runs the validations
// defined on get-past-meeting-summary_NotFound_response_body
func ValidateGetPastMeetingSummaryNotFoundResponseBody(body *GetPastMeetingSummaryNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetPastMeetingSummaryServiceUnavailableResponseBody runs the
// validations defined on
// get-past-meeting-summary_ServiceUnavailable_response_body
func ValidateGetPastMeetingSummaryServiceUnavailableResponseBody(body *GetPastMeetingSummaryServiceUnavailableResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdatePastMeetingSummaryBadRequestResponseBody runs the validations
// defined on update-past-meeting-summary_BadRequest_response_body
func ValidateUpdatePastMeetingSummaryBadRequestResponseBody(body *UpdatePastMeetingSummaryBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdatePastMeetingSummaryInternalServerErrorResponseBody runs the
// validations defined on
// update-past-meeting-summary_InternalServerError_response_body
func ValidateUpdatePastMeetingSummaryInternalServerErrorResponseBody(body *UpdatePastMeetingSummaryInternalServerErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdatePastMeetingSummaryNotFoundResponseBody runs the validations
// defined on update-past-meeting-summary_NotFound_response_body
func ValidateUpdatePastMeetingSummaryNotFoundResponseBody(body *UpdatePastMeetingSummaryNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdatePastMeetingSummaryServiceUnavailableResponseBody runs the
// validations defined on
// update-past-meeting-summary_ServiceUnavailable_response_body
func ValidateUpdatePastMeetingSummaryServiceUnavailableResponseBody(body *UpdatePastMeetingSummaryServiceUnavailableResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateReadyzServiceUnavailableResponseBody runs the validations defined on
// readyz_ServiceUnavailable_response_body
func ValidateReadyzServiceUnavailableResponseBody(body *ReadyzServiceUnavailableResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateMeetingFullResponseBody runs the validations defined on
// MeetingFullResponseBody
func ValidateMeetingFullResponseBody(body *MeetingFullResponseBody) (err error) {
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.ProjectUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.project_uid", *body.ProjectUID, goa.FormatUUID))
	}
	if body.StartTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.start_time", *body.StartTime, goa.FormatDateTime))
	}
	if body.Duration != nil {
		if *body.Duration < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.duration", *body.Duration, 0, true))
		}
	}
	if body.Duration != nil {
		if *body.Duration > 600 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.duration", *body.Duration, 600, false))
		}
	}
	if body.Recurrence != nil {
		if err2 := ValidateRecurrenceResponseBody(body.Recurrence); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	for _, e := range body.Committees {
		if e != nil {
			if err2 := ValidateCommitteeResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.Platform != nil {
		if !(*body.Platform == "Zoom") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.platform", *body.Platform, []any{"Zoom"}))
		}
	}
	if body.EarlyJoinTimeMinutes != nil {
		if *body.EarlyJoinTimeMinutes < 10 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.early_join_time_minutes", *body.EarlyJoinTimeMinutes, 10, true))
		}
	}
	if body.EarlyJoinTimeMinutes != nil {
		if *body.EarlyJoinTimeMinutes > 60 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.early_join_time_minutes", *body.EarlyJoinTimeMinutes, 60, false))
		}
	}
	if body.MeetingType != nil {
		if !(*body.MeetingType == "Board" || *body.MeetingType == "Maintainers" || *body.MeetingType == "Marketing" || *body.MeetingType == "Technical" || *body.MeetingType == "Legal" || *body.MeetingType == "Other" || *body.MeetingType == "None") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.meeting_type", *body.MeetingType, []any{"Board", "Maintainers", "Marketing", "Technical", "Legal", "Other", "None"}))
		}
	}
	if body.Visibility != nil {
		if !(*body.Visibility == "public" || *body.Visibility == "private") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.visibility", *body.Visibility, []any{"public", "private"}))
		}
	}
	if body.ArtifactVisibility != nil {
		if !(*body.ArtifactVisibility == "meeting_hosts" || *body.ArtifactVisibility == "meeting_participants" || *body.ArtifactVisibility == "public") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.artifact_visibility", *body.ArtifactVisibility, []any{"meeting_hosts", "meeting_participants", "public"}))
		}
	}
	if body.PublicLink != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.public_link", *body.PublicLink, goa.FormatURI))
	}
	if body.Password != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.password", *body.Password, goa.FormatUUID))
	}
	if body.ZoomConfig != nil {
		if err2 := ValidateZoomConfigFullResponseBody(body.ZoomConfig); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	for _, e := range body.Occurrences {
		if e != nil {
			if err2 := ValidateOccurrenceResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateRecurrenceResponseBody runs the validations defined on
// RecurrenceResponseBody
func ValidateRecurrenceResponseBody(body *RecurrenceResponseBody) (err error) {
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.RepeatInterval == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("repeat_interval", "body"))
	}
	if body.Type != nil {
		if !(*body.Type == 1 || *body.Type == 2 || *body.Type == 3) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []any{1, 2, 3}))
		}
	}
	if body.RepeatInterval != nil {
		if *body.RepeatInterval < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.repeat_interval", *body.RepeatInterval, 1, true))
		}
	}
	if body.WeeklyDays != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.weekly_days", *body.WeeklyDays, "^[1-7](,[1-7])*$"))
	}
	if body.MonthlyDay != nil {
		if *body.MonthlyDay < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.monthly_day", *body.MonthlyDay, 1, true))
		}
	}
	if body.MonthlyDay != nil {
		if *body.MonthlyDay > 31 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.monthly_day", *body.MonthlyDay, 31, false))
		}
	}
	if body.MonthlyWeek != nil {
		if !(*body.MonthlyWeek == -1 || *body.MonthlyWeek == 1 || *body.MonthlyWeek == 2 || *body.MonthlyWeek == 3 || *body.MonthlyWeek == 4) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.monthly_week", *body.MonthlyWeek, []any{-1, 1, 2, 3, 4}))
		}
	}
	if body.MonthlyWeekDay != nil {
		if !(*body.MonthlyWeekDay == 1 || *body.MonthlyWeekDay == 2 || *body.MonthlyWeekDay == 3 || *body.MonthlyWeekDay == 4 || *body.MonthlyWeekDay == 5 || *body.MonthlyWeekDay == 6 || *body.MonthlyWeekDay == 7) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.monthly_week_day", *body.MonthlyWeekDay, []any{1, 2, 3, 4, 5, 6, 7}))
		}
	}
	if body.EndDateTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.end_date_time", *body.EndDateTime, goa.FormatDateTime))
	}
	return
}

// ValidateCommitteeResponseBody runs the validations defined on
// CommitteeResponseBody
func ValidateCommitteeResponseBody(body *CommitteeResponseBody) (err error) {
	if body.UID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uid", "body"))
	}
	if body.AllowedVotingStatuses == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("allowed_voting_statuses", "body"))
	}
	return
}

// ValidateZoomConfigFullResponseBody runs the validations defined on
// ZoomConfigFullResponseBody
func ValidateZoomConfigFullResponseBody(body *ZoomConfigFullResponseBody) (err error) {
	if body.MeetingID != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.meeting_id", *body.MeetingID, "^\\d{9,11}$"))
	}
	if body.MeetingID != nil {
		if utf8.RuneCountInString(*body.MeetingID) < 9 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.meeting_id", *body.MeetingID, utf8.RuneCountInString(*body.MeetingID), 9, true))
		}
	}
	if body.MeetingID != nil {
		if utf8.RuneCountInString(*body.MeetingID) > 11 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.meeting_id", *body.MeetingID, utf8.RuneCountInString(*body.MeetingID), 11, false))
		}
	}
	if body.Passcode != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.passcode", *body.Passcode, "^\\d{6,10}$"))
	}
	if body.Passcode != nil {
		if utf8.RuneCountInString(*body.Passcode) < 6 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.passcode", *body.Passcode, utf8.RuneCountInString(*body.Passcode), 6, true))
		}
	}
	if body.Passcode != nil {
		if utf8.RuneCountInString(*body.Passcode) > 10 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.passcode", *body.Passcode, utf8.RuneCountInString(*body.Passcode), 10, false))
		}
	}
	return
}

// ValidateOccurrenceResponseBody runs the validations defined on
// OccurrenceResponseBody
func ValidateOccurrenceResponseBody(body *OccurrenceResponseBody) (err error) {
	if body.StartTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.start_time", *body.StartTime, goa.FormatDateTime))
	}
	if body.Recurrence != nil {
		if err2 := ValidateRecurrenceResponseBody(body.Recurrence); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateRecurrenceRequestBody runs the validations defined on
// RecurrenceRequestBody
func ValidateRecurrenceRequestBody(body *RecurrenceRequestBody) (err error) {
	if !(body.Type == 1 || body.Type == 2 || body.Type == 3) {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", body.Type, []any{1, 2, 3}))
	}
	if body.RepeatInterval < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("body.repeat_interval", body.RepeatInterval, 1, true))
	}
	if body.WeeklyDays != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.weekly_days", *body.WeeklyDays, "^[1-7](,[1-7])*$"))
	}
	if body.MonthlyDay != nil {
		if *body.MonthlyDay < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.monthly_day", *body.MonthlyDay, 1, true))
		}
	}
	if body.MonthlyDay != nil {
		if *body.MonthlyDay > 31 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.monthly_day", *body.MonthlyDay, 31, false))
		}
	}
	if body.MonthlyWeek != nil {
		if !(*body.MonthlyWeek == -1 || *body.MonthlyWeek == 1 || *body.MonthlyWeek == 2 || *body.MonthlyWeek == 3 || *body.MonthlyWeek == 4) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.monthly_week", *body.MonthlyWeek, []any{-1, 1, 2, 3, 4}))
		}
	}
	if body.MonthlyWeekDay != nil {
		if !(*body.MonthlyWeekDay == 1 || *body.MonthlyWeekDay == 2 || *body.MonthlyWeekDay == 3 || *body.MonthlyWeekDay == 4 || *body.MonthlyWeekDay == 5 || *body.MonthlyWeekDay == 6 || *body.MonthlyWeekDay == 7) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.monthly_week_day", *body.MonthlyWeekDay, []any{1, 2, 3, 4, 5, 6, 7}))
		}
	}
	if body.EndDateTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.end_date_time", *body.EndDateTime, goa.FormatDateTime))
	}
	return
}

// ValidateCommitteeRequestBody runs the validations defined on
// CommitteeRequestBody
func ValidateCommitteeRequestBody(body *CommitteeRequestBody) (err error) {
	if body.AllowedVotingStatuses == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("allowed_voting_statuses", "body"))
	}
	return
}

// ValidateMeetingBaseResponseBody runs the validations defined on
// MeetingBaseResponseBody
func ValidateMeetingBaseResponseBody(body *MeetingBaseResponseBody) (err error) {
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.ProjectUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.project_uid", *body.ProjectUID, goa.FormatUUID))
	}
	if body.StartTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.start_time", *body.StartTime, goa.FormatDateTime))
	}
	if body.Duration != nil {
		if *body.Duration < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.duration", *body.Duration, 0, true))
		}
	}
	if body.Duration != nil {
		if *body.Duration > 600 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.duration", *body.Duration, 600, false))
		}
	}
	if body.Recurrence != nil {
		if err2 := ValidateRecurrenceResponseBody(body.Recurrence); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	for _, e := range body.Committees {
		if e != nil {
			if err2 := ValidateCommitteeResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.Platform != nil {
		if !(*body.Platform == "Zoom") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.platform", *body.Platform, []any{"Zoom"}))
		}
	}
	if body.EarlyJoinTimeMinutes != nil {
		if *body.EarlyJoinTimeMinutes < 10 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.early_join_time_minutes", *body.EarlyJoinTimeMinutes, 10, true))
		}
	}
	if body.EarlyJoinTimeMinutes != nil {
		if *body.EarlyJoinTimeMinutes > 60 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.early_join_time_minutes", *body.EarlyJoinTimeMinutes, 60, false))
		}
	}
	if body.MeetingType != nil {
		if !(*body.MeetingType == "Board" || *body.MeetingType == "Maintainers" || *body.MeetingType == "Marketing" || *body.MeetingType == "Technical" || *body.MeetingType == "Legal" || *body.MeetingType == "Other" || *body.MeetingType == "None") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.meeting_type", *body.MeetingType, []any{"Board", "Maintainers", "Marketing", "Technical", "Legal", "Other", "None"}))
		}
	}
	if body.Visibility != nil {
		if !(*body.Visibility == "public" || *body.Visibility == "private") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.visibility", *body.Visibility, []any{"public", "private"}))
		}
	}
	if body.ArtifactVisibility != nil {
		if !(*body.ArtifactVisibility == "meeting_hosts" || *body.ArtifactVisibility == "meeting_participants" || *body.ArtifactVisibility == "public") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.artifact_visibility", *body.ArtifactVisibility, []any{"meeting_hosts", "meeting_participants", "public"}))
		}
	}
	if body.PublicLink != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.public_link", *body.PublicLink, goa.FormatURI))
	}
	if body.Password != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.password", *body.Password, goa.FormatUUID))
	}
	if body.ZoomConfig != nil {
		if err2 := ValidateZoomConfigFullResponseBody(body.ZoomConfig); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	for _, e := range body.Occurrences {
		if e != nil {
			if err2 := ValidateOccurrenceResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateMeetingSettingsResponseBody runs the validations defined on
// MeetingSettingsResponseBody
func ValidateMeetingSettingsResponseBody(body *MeetingSettingsResponseBody) (err error) {
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateRegistrantResponseBody runs the validations defined on
// RegistrantResponseBody
func ValidateRegistrantResponseBody(body *RegistrantResponseBody) (err error) {
	if body.UID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uid", "body"))
	}
	if body.MeetingUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("meeting_uid", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.MeetingUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.meeting_uid", *body.MeetingUID, goa.FormatUUID))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	if body.FirstName != nil {
		if utf8.RuneCountInString(*body.FirstName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.first_name", *body.FirstName, utf8.RuneCountInString(*body.FirstName), 1, true))
		}
	}
	if body.FirstName != nil {
		if utf8.RuneCountInString(*body.FirstName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.first_name", *body.FirstName, utf8.RuneCountInString(*body.FirstName), 100, false))
		}
	}
	if body.LastName != nil {
		if utf8.RuneCountInString(*body.LastName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.last_name", *body.LastName, utf8.RuneCountInString(*body.LastName), 1, true))
		}
	}
	if body.LastName != nil {
		if utf8.RuneCountInString(*body.LastName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.last_name", *body.LastName, utf8.RuneCountInString(*body.LastName), 100, false))
		}
	}
	if body.Type != nil {
		if !(*body.Type == "direct" || *body.Type == "committee") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []any{"direct", "committee"}))
		}
	}
	if body.CommitteeUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.committee_uid", *body.CommitteeUID, goa.FormatUUID))
	}
	if body.OccurrenceID != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.occurrence_id", *body.OccurrenceID, "^[0-9]*$"))
	}
	if body.AvatarURL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.avatar_url", *body.AvatarURL, goa.FormatURI))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}

// ValidatePastMeetingResponseBody runs the validations defined on
// PastMeetingResponseBody
func ValidatePastMeetingResponseBody(body *PastMeetingResponseBody) (err error) {
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.MeetingUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.meeting_uid", *body.MeetingUID, goa.FormatUUID))
	}
	if body.ProjectUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.project_uid", *body.ProjectUID, goa.FormatUUID))
	}
	if body.ScheduledStartTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.scheduled_start_time", *body.ScheduledStartTime, goa.FormatDateTime))
	}
	if body.ScheduledEndTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.scheduled_end_time", *body.ScheduledEndTime, goa.FormatDateTime))
	}
	if body.Duration != nil {
		if *body.Duration < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.duration", *body.Duration, 0, true))
		}
	}
	if body.Duration != nil {
		if *body.Duration > 600 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.duration", *body.Duration, 600, false))
		}
	}
	if body.Recurrence != nil {
		if err2 := ValidateRecurrenceResponseBody(body.Recurrence); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	for _, e := range body.Committees {
		if e != nil {
			if err2 := ValidateCommitteeResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.Platform != nil {
		if !(*body.Platform == "Zoom") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.platform", *body.Platform, []any{"Zoom"}))
		}
	}
	if body.EarlyJoinTimeMinutes != nil {
		if *body.EarlyJoinTimeMinutes < 10 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.early_join_time_minutes", *body.EarlyJoinTimeMinutes, 10, true))
		}
	}
	if body.EarlyJoinTimeMinutes != nil {
		if *body.EarlyJoinTimeMinutes > 60 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.early_join_time_minutes", *body.EarlyJoinTimeMinutes, 60, false))
		}
	}
	if body.MeetingType != nil {
		if !(*body.MeetingType == "Board" || *body.MeetingType == "Maintainers" || *body.MeetingType == "Marketing" || *body.MeetingType == "Technical" || *body.MeetingType == "Legal" || *body.MeetingType == "Other" || *body.MeetingType == "None") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.meeting_type", *body.MeetingType, []any{"Board", "Maintainers", "Marketing", "Technical", "Legal", "Other", "None"}))
		}
	}
	if body.Visibility != nil {
		if !(*body.Visibility == "public" || *body.Visibility == "private") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.visibility", *body.Visibility, []any{"public", "private"}))
		}
	}
	if body.ArtifactVisibility != nil {
		if !(*body.ArtifactVisibility == "meeting_hosts" || *body.ArtifactVisibility == "meeting_participants" || *body.ArtifactVisibility == "public") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.artifact_visibility", *body.ArtifactVisibility, []any{"meeting_hosts", "meeting_participants", "public"}))
		}
	}
	if body.PublicLink != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.public_link", *body.PublicLink, goa.FormatURI))
	}
	if body.ZoomConfig != nil {
		if err2 := ValidateZoomConfigFullResponseBody(body.ZoomConfig); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	for _, e := range body.Sessions {
		if e != nil {
			if err2 := ValidateSessionResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateSessionResponseBody runs the validations defined on
// SessionResponseBody
func ValidateSessionResponseBody(body *SessionResponseBody) (err error) {
	if body.UID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uid", "body"))
	}
	if body.StartTime == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("start_time", "body"))
	}
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.StartTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.start_time", *body.StartTime, goa.FormatDateTime))
	}
	if body.EndTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.end_time", *body.EndTime, goa.FormatDateTime))
	}
	return
}

// ValidateZoomConfigFullRequestBody runs the validations defined on
// ZoomConfigFullRequestBody
func ValidateZoomConfigFullRequestBody(body *ZoomConfigFullRequestBody) (err error) {
	if body.MeetingID != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.meeting_id", *body.MeetingID, "^\\d{9,11}$"))
	}
	if body.MeetingID != nil {
		if utf8.RuneCountInString(*body.MeetingID) < 9 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.meeting_id", *body.MeetingID, utf8.RuneCountInString(*body.MeetingID), 9, true))
		}
	}
	if body.MeetingID != nil {
		if utf8.RuneCountInString(*body.MeetingID) > 11 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.meeting_id", *body.MeetingID, utf8.RuneCountInString(*body.MeetingID), 11, false))
		}
	}
	if body.Passcode != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.passcode", *body.Passcode, "^\\d{6,10}$"))
	}
	if body.Passcode != nil {
		if utf8.RuneCountInString(*body.Passcode) < 6 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.passcode", *body.Passcode, utf8.RuneCountInString(*body.Passcode), 6, true))
		}
	}
	if body.Passcode != nil {
		if utf8.RuneCountInString(*body.Passcode) > 10 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.passcode", *body.Passcode, utf8.RuneCountInString(*body.Passcode), 10, false))
		}
	}
	return
}

// ValidateSessionRequestBody runs the validations defined on SessionRequestBody
func ValidateSessionRequestBody(body *SessionRequestBody) (err error) {
	err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", body.UID, goa.FormatUUID))
	err = goa.MergeErrors(err, goa.ValidateFormat("body.start_time", body.StartTime, goa.FormatDateTime))
	if body.EndTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.end_time", *body.EndTime, goa.FormatDateTime))
	}
	return
}

// ValidatePastMeetingParticipantResponseBody runs the validations defined on
// PastMeetingParticipantResponseBody
func ValidatePastMeetingParticipantResponseBody(body *PastMeetingParticipantResponseBody) (err error) {
	if body.UID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uid", "body"))
	}
	if body.PastMeetingUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("past_meeting_uid", "body"))
	}
	if body.MeetingUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("meeting_uid", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.PastMeetingUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.past_meeting_uid", *body.PastMeetingUID, goa.FormatUUID))
	}
	if body.MeetingUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.meeting_uid", *body.MeetingUID, goa.FormatUUID))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	if body.FirstName != nil {
		if utf8.RuneCountInString(*body.FirstName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.first_name", *body.FirstName, utf8.RuneCountInString(*body.FirstName), 1, true))
		}
	}
	if body.FirstName != nil {
		if utf8.RuneCountInString(*body.FirstName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.first_name", *body.FirstName, utf8.RuneCountInString(*body.FirstName), 100, false))
		}
	}
	if body.LastName != nil {
		if utf8.RuneCountInString(*body.LastName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.last_name", *body.LastName, utf8.RuneCountInString(*body.LastName), 1, true))
		}
	}
	if body.LastName != nil {
		if utf8.RuneCountInString(*body.LastName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.last_name", *body.LastName, utf8.RuneCountInString(*body.LastName), 100, false))
		}
	}
	if body.AvatarURL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.avatar_url", *body.AvatarURL, goa.FormatURI))
	}
	for _, e := range body.Sessions {
		if e != nil {
			if err2 := ValidateParticipantSessionResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateParticipantSessionResponseBody runs the validations defined on
// ParticipantSessionResponseBody
func ValidateParticipantSessionResponseBody(body *ParticipantSessionResponseBody) (err error) {
	if body.UID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uid", "body"))
	}
	if body.JoinTime == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("join_time", "body"))
	}
	if body.JoinTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.join_time", *body.JoinTime, goa.FormatDateTime))
	}
	if body.LeaveTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.leave_time", *body.LeaveTime, goa.FormatDateTime))
	}
	return
}

// ValidatePastMeetingSummaryResponseBody runs the validations defined on
// PastMeetingSummaryResponseBody
func ValidatePastMeetingSummaryResponseBody(body *PastMeetingSummaryResponseBody) (err error) {
	if body.UID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uid", "body"))
	}
	if body.PastMeetingUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("past_meeting_uid", "body"))
	}
	if body.MeetingUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("meeting_uid", "body"))
	}
	if body.Platform == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("platform", "body"))
	}
	if body.SummaryData == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("summary_data", "body"))
	}
	if body.RequiresApproval == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("requires_approval", "body"))
	}
	if body.Approved == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("approved", "body"))
	}
	if body.EmailSent == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email_sent", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "body"))
	}
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.PastMeetingUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.past_meeting_uid", *body.PastMeetingUID, goa.FormatUUID))
	}
	if body.MeetingUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.meeting_uid", *body.MeetingUID, goa.FormatUUID))
	}
	if body.Platform != nil {
		if !(*body.Platform == "Zoom") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.platform", *body.Platform, []any{"Zoom"}))
		}
	}
	if body.ZoomConfig != nil {
		if err2 := ValidatePastMeetingSummaryZoomConfigResponseBody(body.ZoomConfig); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.SummaryData != nil {
		if err2 := ValidateSummaryDataResponseBody(body.SummaryData); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}

// ValidatePastMeetingSummaryZoomConfigResponseBody runs the validations
// defined on PastMeetingSummaryZoomConfigResponseBody
func ValidatePastMeetingSummaryZoomConfigResponseBody(body *PastMeetingSummaryZoomConfigResponseBody) (err error) {
	if body.MeetingID != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.meeting_id", *body.MeetingID, "^\\d{9,11}$"))
	}
	if body.MeetingID != nil {
		if utf8.RuneCountInString(*body.MeetingID) < 9 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.meeting_id", *body.MeetingID, utf8.RuneCountInString(*body.MeetingID), 9, true))
		}
	}
	if body.MeetingID != nil {
		if utf8.RuneCountInString(*body.MeetingID) > 11 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.meeting_id", *body.MeetingID, utf8.RuneCountInString(*body.MeetingID), 11, false))
		}
	}
	return
}

// ValidateSummaryDataResponseBody runs the validations defined on
// SummaryDataResponseBody
func ValidateSummaryDataResponseBody(body *SummaryDataResponseBody) (err error) {
	if body.StartTime == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("start_time", "body"))
	}
	if body.EndTime == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("end_time", "body"))
	}
	if body.StartTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.start_time", *body.StartTime, goa.FormatDateTime))
	}
	if body.EndTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.end_time", *body.EndTime, goa.FormatDateTime))
	}
	for _, e := range body.Details {
		if e != nil {
			if err2 := ValidateSummaryDetailResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range body.EditedDetails {
		if e != nil {
			if err2 := ValidateSummaryDetailResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateSummaryDetailResponseBody runs the validations defined on
// SummaryDetailResponseBody
func ValidateSummaryDetailResponseBody(body *SummaryDetailResponseBody) (err error) {
	if body.Label == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("label", "body"))
	}
	if body.Summary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("summary", "body"))
	}
	return
}
