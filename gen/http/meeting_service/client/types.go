// Code generated by goa v3.21.1, DO NOT EDIT.
//
// Meeting Service HTTP client types
//
// Command:
// $ goa gen github.com/linuxfoundation/lfx-v2-meeting-service/design

package client

import (
	"unicode/utf8"

	meetingservice "github.com/linuxfoundation/lfx-v2-meeting-service/gen/meeting_service"
	goa "goa.design/goa/v3/pkg"
)

// CreateMeetingRequestBody is the type of the "Meeting Service" service
// "create-meeting" endpoint HTTP request body.
type CreateMeetingRequestBody struct {
	// The UID of the LF project
	ProjectUID string `form:"project_uid" json:"project_uid" xml:"project_uid"`
	// The start time of the meeting in RFC3339 format
	StartTime string `form:"start_time" json:"start_time" xml:"start_time"`
	// The duration of the meeting in minutes
	Duration int `form:"duration" json:"duration" xml:"duration"`
	// The timezone of the meeting (e.g. 'America/New_York')
	Timezone string `form:"timezone" json:"timezone" xml:"timezone"`
	// The recurrence of the meeting
	Recurrence *RecurrenceRequestBody `form:"recurrence,omitempty" json:"recurrence,omitempty" xml:"recurrence,omitempty"`
	// The title of the meeting
	Title string `form:"title" json:"title" xml:"title"`
	// The description of the meeting
	Description string `form:"description" json:"description" xml:"description"`
	// The committees associated with the meeting
	Committees []*CommitteeRequestBody `form:"committees,omitempty" json:"committees,omitempty" xml:"committees,omitempty"`
	// The platform name of where the meeting is hosted
	Platform *string `form:"platform,omitempty" json:"platform,omitempty" xml:"platform,omitempty"`
	// The number of minutes that users are allowed to join the meeting early
	// without being kicked out
	EarlyJoinTimeMinutes *int `form:"early_join_time_minutes,omitempty" json:"early_join_time_minutes,omitempty" xml:"early_join_time_minutes,omitempty"`
	// The type of meeting. This is usually dependent on the committee(s)
	// associated with the meeting
	MeetingType *string `form:"meeting_type,omitempty" json:"meeting_type,omitempty" xml:"meeting_type,omitempty"`
	// The visibility of the meeting's existence to other users
	Visibility *string `form:"visibility,omitempty" json:"visibility,omitempty" xml:"visibility,omitempty"`
	// The restrictedness of joining the meeting (i.e. is the meeting restricted to
	// only invited users or anyone?)
	Restricted *bool `form:"restricted,omitempty" json:"restricted,omitempty" xml:"restricted,omitempty"`
	// The visibility of artifacts to users (e.g. public, only for registrants,
	// only for hosts)
	ArtifactVisibility *string `form:"artifact_visibility,omitempty" json:"artifact_visibility,omitempty" xml:"artifact_visibility,omitempty"`
	// The public join URL for participants to join the meeting via the LFX
	// platform (e.g.
	// 'https://zoom-lfx.platform.linuxfoundation.org/meeting/12343245463')
	PublicLink *string `form:"public_link,omitempty" json:"public_link,omitempty" xml:"public_link,omitempty"`
	// Whether recording is enabled for the meeting
	RecordingEnabled *bool `form:"recording_enabled,omitempty" json:"recording_enabled,omitempty" xml:"recording_enabled,omitempty"`
	// Whether transcription is enabled for the meeting
	TranscriptEnabled *bool `form:"transcript_enabled,omitempty" json:"transcript_enabled,omitempty" xml:"transcript_enabled,omitempty"`
	// Whether automatic youtube uploading is enabled for the meeting
	YoutubeUploadEnabled *bool `form:"youtube_upload_enabled,omitempty" json:"youtube_upload_enabled,omitempty" xml:"youtube_upload_enabled,omitempty"`
	// For zoom platform meetings: the configuration for the meeting
	ZoomConfig *ZoomConfigPostRequestBody `form:"zoom_config,omitempty" json:"zoom_config,omitempty" xml:"zoom_config,omitempty"`
}

// UpdateMeetingRequestBody is the type of the "Meeting Service" service
// "update-meeting" endpoint HTTP request body.
type UpdateMeetingRequestBody struct {
	// The UID of the LF project
	ProjectUID string `form:"project_uid" json:"project_uid" xml:"project_uid"`
	// The start time of the meeting in RFC3339 format
	StartTime string `form:"start_time" json:"start_time" xml:"start_time"`
	// The duration of the meeting in minutes
	Duration int `form:"duration" json:"duration" xml:"duration"`
	// The timezone of the meeting (e.g. 'America/New_York')
	Timezone string `form:"timezone" json:"timezone" xml:"timezone"`
	// The recurrence of the meeting
	Recurrence *RecurrenceRequestBody `form:"recurrence,omitempty" json:"recurrence,omitempty" xml:"recurrence,omitempty"`
	// The title of the meeting
	Title string `form:"title" json:"title" xml:"title"`
	// The description of the meeting
	Description string `form:"description" json:"description" xml:"description"`
	// The committees associated with the meeting
	Committees []*CommitteeRequestBody `form:"committees,omitempty" json:"committees,omitempty" xml:"committees,omitempty"`
	// The platform name of where the meeting is hosted
	Platform *string `form:"platform,omitempty" json:"platform,omitempty" xml:"platform,omitempty"`
	// The number of minutes that users are allowed to join the meeting early
	// without being kicked out
	EarlyJoinTimeMinutes *int `form:"early_join_time_minutes,omitempty" json:"early_join_time_minutes,omitempty" xml:"early_join_time_minutes,omitempty"`
	// The type of meeting. This is usually dependent on the committee(s)
	// associated with the meeting
	MeetingType *string `form:"meeting_type,omitempty" json:"meeting_type,omitempty" xml:"meeting_type,omitempty"`
	// The visibility of the meeting's existence to other users
	Visibility *string `form:"visibility,omitempty" json:"visibility,omitempty" xml:"visibility,omitempty"`
	// The restrictedness of joining the meeting (i.e. is the meeting restricted to
	// only invited users or anyone?)
	Restricted *bool `form:"restricted,omitempty" json:"restricted,omitempty" xml:"restricted,omitempty"`
	// The visibility of artifacts to users (e.g. public, only for registrants,
	// only for hosts)
	ArtifactVisibility *string `form:"artifact_visibility,omitempty" json:"artifact_visibility,omitempty" xml:"artifact_visibility,omitempty"`
	// The public join URL for participants to join the meeting via the LFX
	// platform (e.g.
	// 'https://zoom-lfx.platform.linuxfoundation.org/meeting/12343245463')
	PublicLink *string `form:"public_link,omitempty" json:"public_link,omitempty" xml:"public_link,omitempty"`
	// Whether recording is enabled for the meeting
	RecordingEnabled *bool `form:"recording_enabled,omitempty" json:"recording_enabled,omitempty" xml:"recording_enabled,omitempty"`
	// Whether transcription is enabled for the meeting
	TranscriptEnabled *bool `form:"transcript_enabled,omitempty" json:"transcript_enabled,omitempty" xml:"transcript_enabled,omitempty"`
	// Whether automatic youtube uploading is enabled for the meeting
	YoutubeUploadEnabled *bool `form:"youtube_upload_enabled,omitempty" json:"youtube_upload_enabled,omitempty" xml:"youtube_upload_enabled,omitempty"`
	// For zoom platform meetings: the configuration for the meeting
	ZoomConfig *ZoomConfigPostRequestBody `form:"zoom_config,omitempty" json:"zoom_config,omitempty" xml:"zoom_config,omitempty"`
}

// CreateMeetingRegistrantRequestBody is the type of the "Meeting Service"
// service "create-meeting-registrant" endpoint HTTP request body.
type CreateMeetingRegistrantRequestBody struct {
	// User's email address
	Email string `form:"email" json:"email" xml:"email"`
	// User's first name
	FirstName string `form:"first_name" json:"first_name" xml:"first_name"`
	// User's last name
	LastName string `form:"last_name" json:"last_name" xml:"last_name"`
	// If user should have access as a meeting host
	Host *bool `form:"host,omitempty" json:"host,omitempty" xml:"host,omitempty"`
	// User's job title
	JobTitle *string `form:"job_title,omitempty" json:"job_title,omitempty" xml:"job_title,omitempty"`
	// User's organization
	OrgName *string `form:"org_name,omitempty" json:"org_name,omitempty" xml:"org_name,omitempty"`
	// The ID of the specific occurrence the user should be invited to. If blank,
	// user is invited to all occurrences
	OccurrenceID *string `form:"occurrence_id,omitempty" json:"occurrence_id,omitempty" xml:"occurrence_id,omitempty"`
	// User's avatar URL
	AvatarURL *string `form:"avatar_url,omitempty" json:"avatar_url,omitempty" xml:"avatar_url,omitempty"`
	// User's LF ID
	UserID *string `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
}

// UpdateMeetingRegistrantRequestBody is the type of the "Meeting Service"
// service "update-meeting-registrant" endpoint HTTP request body.
type UpdateMeetingRegistrantRequestBody struct {
	// User's email address
	Email string `form:"email" json:"email" xml:"email"`
	// User's first name
	FirstName string `form:"first_name" json:"first_name" xml:"first_name"`
	// User's last name
	LastName string `form:"last_name" json:"last_name" xml:"last_name"`
	// If user should have access as a meeting host
	Host *bool `form:"host,omitempty" json:"host,omitempty" xml:"host,omitempty"`
	// User's job title
	JobTitle *string `form:"job_title,omitempty" json:"job_title,omitempty" xml:"job_title,omitempty"`
	// User's organization
	OrgName *string `form:"org_name,omitempty" json:"org_name,omitempty" xml:"org_name,omitempty"`
	// The ID of the specific occurrence the user should be invited to. If blank,
	// user is invited to all occurrences
	OccurrenceID *string `form:"occurrence_id,omitempty" json:"occurrence_id,omitempty" xml:"occurrence_id,omitempty"`
	// User's avatar URL
	AvatarURL *string `form:"avatar_url,omitempty" json:"avatar_url,omitempty" xml:"avatar_url,omitempty"`
	// User's LF ID
	UserID *string `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
}

// GetMeetingsResponseBody is the type of the "Meeting Service" service
// "get-meetings" endpoint HTTP response body.
type GetMeetingsResponseBody struct {
	// Resources found
	Meetings []*MeetingResponseBody `form:"meetings,omitempty" json:"meetings,omitempty" xml:"meetings,omitempty"`
}

// CreateMeetingResponseBody is the type of the "Meeting Service" service
// "create-meeting" endpoint HTTP response body.
type CreateMeetingResponseBody struct {
	// The UID of the meeting
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// The UID of the LF project
	ProjectUID *string `form:"project_uid,omitempty" json:"project_uid,omitempty" xml:"project_uid,omitempty"`
	// The start time of the meeting in RFC3339 format
	StartTime *string `form:"start_time,omitempty" json:"start_time,omitempty" xml:"start_time,omitempty"`
	// The duration of the meeting in minutes
	Duration *int `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	// The timezone of the meeting (e.g. 'America/New_York')
	Timezone *string `form:"timezone,omitempty" json:"timezone,omitempty" xml:"timezone,omitempty"`
	// The recurrence of the meeting
	Recurrence *RecurrenceResponseBody `form:"recurrence,omitempty" json:"recurrence,omitempty" xml:"recurrence,omitempty"`
	// The title of the meeting
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// The description of the meeting
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The committees associated with the meeting
	Committees []*CommitteeResponseBody `form:"committees,omitempty" json:"committees,omitempty" xml:"committees,omitempty"`
	// The platform name of where the meeting is hosted
	Platform *string `form:"platform,omitempty" json:"platform,omitempty" xml:"platform,omitempty"`
	// The number of minutes that users are allowed to join the meeting early
	// without being kicked out
	EarlyJoinTimeMinutes *int `form:"early_join_time_minutes,omitempty" json:"early_join_time_minutes,omitempty" xml:"early_join_time_minutes,omitempty"`
	// The type of meeting. This is usually dependent on the committee(s)
	// associated with the meeting
	MeetingType *string `form:"meeting_type,omitempty" json:"meeting_type,omitempty" xml:"meeting_type,omitempty"`
	// The visibility of the meeting's existence to other users
	Visibility *string `form:"visibility,omitempty" json:"visibility,omitempty" xml:"visibility,omitempty"`
	// The restrictedness of joining the meeting (i.e. is the meeting restricted to
	// only invited users or anyone?)
	Restricted *bool `form:"restricted,omitempty" json:"restricted,omitempty" xml:"restricted,omitempty"`
	// The visibility of artifacts to users (e.g. public, only for registrants,
	// only for hosts)
	ArtifactVisibility *string `form:"artifact_visibility,omitempty" json:"artifact_visibility,omitempty" xml:"artifact_visibility,omitempty"`
	// The public join URL for participants to join the meeting via the LFX
	// platform (e.g.
	// 'https://zoom-lfx.platform.linuxfoundation.org/meeting/12343245463')
	PublicLink *string `form:"public_link,omitempty" json:"public_link,omitempty" xml:"public_link,omitempty"`
	// The number of registrants that have an email delivery error with their
	// invite. The delivery errors are counted as the last invite that was sent to
	// the registrant, so if a registrant previously had a delivery error but not
	// in their most recent invite received, then it does not count towards this
	// field value.
	EmailDeliveryErrorCount *int `form:"email_delivery_error_count,omitempty" json:"email_delivery_error_count,omitempty" xml:"email_delivery_error_count,omitempty"`
	// Whether recording is enabled for the meeting
	RecordingEnabled *bool `form:"recording_enabled,omitempty" json:"recording_enabled,omitempty" xml:"recording_enabled,omitempty"`
	// Whether transcription is enabled for the meeting
	TranscriptEnabled *bool `form:"transcript_enabled,omitempty" json:"transcript_enabled,omitempty" xml:"transcript_enabled,omitempty"`
	// Whether automatic youtube uploading is enabled for the meeting
	YoutubeUploadEnabled *bool `form:"youtube_upload_enabled,omitempty" json:"youtube_upload_enabled,omitempty" xml:"youtube_upload_enabled,omitempty"`
	// For zoom platform meetings: the configuration for the meeting
	ZoomConfig *ZoomConfigFullResponseBody `form:"zoom_config,omitempty" json:"zoom_config,omitempty" xml:"zoom_config,omitempty"`
	// The number of registrants for the meeting
	RegistrantCount *int `form:"registrant_count,omitempty" json:"registrant_count,omitempty" xml:"registrant_count,omitempty"`
	// The number of registrants that have declined the meeting invitation
	RegistrantResponseDeclinedCount *int `form:"registrant_response_declined_count,omitempty" json:"registrant_response_declined_count,omitempty" xml:"registrant_response_declined_count,omitempty"`
	// The number of registrants that have accepted the meeting invitation
	RegistrantResponseAcceptedCount *int `form:"registrant_response_accepted_count,omitempty" json:"registrant_response_accepted_count,omitempty" xml:"registrant_response_accepted_count,omitempty"`
	// Array of meeting occurrences (read-only from platform API)
	Occurrences []*OccurrenceResponseBody `form:"occurrences,omitempty" json:"occurrences,omitempty" xml:"occurrences,omitempty"`
	// The date and time the resource was created
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The date and time the resource was last updated
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// GetMeetingResponseBody is the type of the "Meeting Service" service
// "get-meeting" endpoint HTTP response body.
type GetMeetingResponseBody MeetingResponseBody

// UpdateMeetingResponseBody is the type of the "Meeting Service" service
// "update-meeting" endpoint HTTP response body.
type UpdateMeetingResponseBody struct {
	// The UID of the meeting
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// The UID of the LF project
	ProjectUID *string `form:"project_uid,omitempty" json:"project_uid,omitempty" xml:"project_uid,omitempty"`
	// The start time of the meeting in RFC3339 format
	StartTime *string `form:"start_time,omitempty" json:"start_time,omitempty" xml:"start_time,omitempty"`
	// The duration of the meeting in minutes
	Duration *int `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	// The timezone of the meeting (e.g. 'America/New_York')
	Timezone *string `form:"timezone,omitempty" json:"timezone,omitempty" xml:"timezone,omitempty"`
	// The recurrence of the meeting
	Recurrence *RecurrenceResponseBody `form:"recurrence,omitempty" json:"recurrence,omitempty" xml:"recurrence,omitempty"`
	// The title of the meeting
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// The description of the meeting
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The committees associated with the meeting
	Committees []*CommitteeResponseBody `form:"committees,omitempty" json:"committees,omitempty" xml:"committees,omitempty"`
	// The platform name of where the meeting is hosted
	Platform *string `form:"platform,omitempty" json:"platform,omitempty" xml:"platform,omitempty"`
	// The number of minutes that users are allowed to join the meeting early
	// without being kicked out
	EarlyJoinTimeMinutes *int `form:"early_join_time_minutes,omitempty" json:"early_join_time_minutes,omitempty" xml:"early_join_time_minutes,omitempty"`
	// The type of meeting. This is usually dependent on the committee(s)
	// associated with the meeting
	MeetingType *string `form:"meeting_type,omitempty" json:"meeting_type,omitempty" xml:"meeting_type,omitempty"`
	// The visibility of the meeting's existence to other users
	Visibility *string `form:"visibility,omitempty" json:"visibility,omitempty" xml:"visibility,omitempty"`
	// The restrictedness of joining the meeting (i.e. is the meeting restricted to
	// only invited users or anyone?)
	Restricted *bool `form:"restricted,omitempty" json:"restricted,omitempty" xml:"restricted,omitempty"`
	// The visibility of artifacts to users (e.g. public, only for registrants,
	// only for hosts)
	ArtifactVisibility *string `form:"artifact_visibility,omitempty" json:"artifact_visibility,omitempty" xml:"artifact_visibility,omitempty"`
	// The public join URL for participants to join the meeting via the LFX
	// platform (e.g.
	// 'https://zoom-lfx.platform.linuxfoundation.org/meeting/12343245463')
	PublicLink *string `form:"public_link,omitempty" json:"public_link,omitempty" xml:"public_link,omitempty"`
	// The number of registrants that have an email delivery error with their
	// invite. The delivery errors are counted as the last invite that was sent to
	// the registrant, so if a registrant previously had a delivery error but not
	// in their most recent invite received, then it does not count towards this
	// field value.
	EmailDeliveryErrorCount *int `form:"email_delivery_error_count,omitempty" json:"email_delivery_error_count,omitempty" xml:"email_delivery_error_count,omitempty"`
	// Whether recording is enabled for the meeting
	RecordingEnabled *bool `form:"recording_enabled,omitempty" json:"recording_enabled,omitempty" xml:"recording_enabled,omitempty"`
	// Whether transcription is enabled for the meeting
	TranscriptEnabled *bool `form:"transcript_enabled,omitempty" json:"transcript_enabled,omitempty" xml:"transcript_enabled,omitempty"`
	// Whether automatic youtube uploading is enabled for the meeting
	YoutubeUploadEnabled *bool `form:"youtube_upload_enabled,omitempty" json:"youtube_upload_enabled,omitempty" xml:"youtube_upload_enabled,omitempty"`
	// For zoom platform meetings: the configuration for the meeting
	ZoomConfig *ZoomConfigFullResponseBody `form:"zoom_config,omitempty" json:"zoom_config,omitempty" xml:"zoom_config,omitempty"`
	// The number of registrants for the meeting
	RegistrantCount *int `form:"registrant_count,omitempty" json:"registrant_count,omitempty" xml:"registrant_count,omitempty"`
	// The number of registrants that have declined the meeting invitation
	RegistrantResponseDeclinedCount *int `form:"registrant_response_declined_count,omitempty" json:"registrant_response_declined_count,omitempty" xml:"registrant_response_declined_count,omitempty"`
	// The number of registrants that have accepted the meeting invitation
	RegistrantResponseAcceptedCount *int `form:"registrant_response_accepted_count,omitempty" json:"registrant_response_accepted_count,omitempty" xml:"registrant_response_accepted_count,omitempty"`
	// Array of meeting occurrences (read-only from platform API)
	Occurrences []*OccurrenceResponseBody `form:"occurrences,omitempty" json:"occurrences,omitempty" xml:"occurrences,omitempty"`
	// The date and time the resource was created
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The date and time the resource was last updated
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// GetMeetingRegistrantsResponseBody is the type of the "Meeting Service"
// service "get-meeting-registrants" endpoint HTTP response body.
type GetMeetingRegistrantsResponseBody struct {
	// Meeting registrants
	Registrants []*RegistrantResponseBody `form:"registrants,omitempty" json:"registrants,omitempty" xml:"registrants,omitempty"`
}

// CreateMeetingRegistrantResponseBody is the type of the "Meeting Service"
// service "create-meeting-registrant" endpoint HTTP response body.
type CreateMeetingRegistrantResponseBody struct {
	// The UID of the registrant
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// The UID of the meeting
	MeetingUID *string `form:"meeting_uid,omitempty" json:"meeting_uid,omitempty" xml:"meeting_uid,omitempty"`
	// User's email address
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// User's first name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// User's last name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// If user should have access as a meeting host
	Host *bool `form:"host,omitempty" json:"host,omitempty" xml:"host,omitempty"`
	// User's job title
	JobTitle *string `form:"job_title,omitempty" json:"job_title,omitempty" xml:"job_title,omitempty"`
	// The ID of the specific occurrence the user should be invited to. If blank,
	// user is invited to all occurrences
	OccurrenceID *string `form:"occurrence_id,omitempty" json:"occurrence_id,omitempty" xml:"occurrence_id,omitempty"`
	// User's organization
	OrgName *string `form:"org_name,omitempty" json:"org_name,omitempty" xml:"org_name,omitempty"`
	// Whether the registrant is in an organization that has a membership with the
	// LF. If unknown, don't pass this field; the API will find the value by default
	OrgIsMember *bool `form:"org_is_member,omitempty" json:"org_is_member,omitempty" xml:"org_is_member,omitempty"`
	// Whether the registrant is in an organization that has a membership with the
	// project (of the meeting). If unknown, don't pass this field; the API will
	// find the value by default
	OrgIsProjectMember *bool `form:"org_is_project_member,omitempty" json:"org_is_project_member,omitempty" xml:"org_is_project_member,omitempty"`
	// User's avatar URL
	AvatarURL *string `form:"avatar_url,omitempty" json:"avatar_url,omitempty" xml:"avatar_url,omitempty"`
	// User's LF ID
	UserID *string `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
	// The date and time the resource was created
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The date and time the resource was last updated
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// GetMeetingRegistrantResponseBody is the type of the "Meeting Service"
// service "get-meeting-registrant" endpoint HTTP response body.
type GetMeetingRegistrantResponseBody RegistrantResponseBody

// UpdateMeetingRegistrantResponseBody is the type of the "Meeting Service"
// service "update-meeting-registrant" endpoint HTTP response body.
type UpdateMeetingRegistrantResponseBody struct {
	// The UID of the registrant
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// The UID of the meeting
	MeetingUID *string `form:"meeting_uid,omitempty" json:"meeting_uid,omitempty" xml:"meeting_uid,omitempty"`
	// User's email address
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// User's first name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// User's last name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// If user should have access as a meeting host
	Host *bool `form:"host,omitempty" json:"host,omitempty" xml:"host,omitempty"`
	// User's job title
	JobTitle *string `form:"job_title,omitempty" json:"job_title,omitempty" xml:"job_title,omitempty"`
	// The ID of the specific occurrence the user should be invited to. If blank,
	// user is invited to all occurrences
	OccurrenceID *string `form:"occurrence_id,omitempty" json:"occurrence_id,omitempty" xml:"occurrence_id,omitempty"`
	// User's organization
	OrgName *string `form:"org_name,omitempty" json:"org_name,omitempty" xml:"org_name,omitempty"`
	// Whether the registrant is in an organization that has a membership with the
	// LF. If unknown, don't pass this field; the API will find the value by default
	OrgIsMember *bool `form:"org_is_member,omitempty" json:"org_is_member,omitempty" xml:"org_is_member,omitempty"`
	// Whether the registrant is in an organization that has a membership with the
	// project (of the meeting). If unknown, don't pass this field; the API will
	// find the value by default
	OrgIsProjectMember *bool `form:"org_is_project_member,omitempty" json:"org_is_project_member,omitempty" xml:"org_is_project_member,omitempty"`
	// User's avatar URL
	AvatarURL *string `form:"avatar_url,omitempty" json:"avatar_url,omitempty" xml:"avatar_url,omitempty"`
	// User's LF ID
	UserID *string `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
	// The date and time the resource was created
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The date and time the resource was last updated
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// GetMeetingsBadRequestResponseBody is the type of the "Meeting Service"
// service "get-meetings" endpoint HTTP response body for the "BadRequest"
// error.
type GetMeetingsBadRequestResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetMeetingsInternalServerErrorResponseBody is the type of the "Meeting
// Service" service "get-meetings" endpoint HTTP response body for the
// "InternalServerError" error.
type GetMeetingsInternalServerErrorResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetMeetingsServiceUnavailableResponseBody is the type of the "Meeting
// Service" service "get-meetings" endpoint HTTP response body for the
// "ServiceUnavailable" error.
type GetMeetingsServiceUnavailableResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateMeetingBadRequestResponseBody is the type of the "Meeting Service"
// service "create-meeting" endpoint HTTP response body for the "BadRequest"
// error.
type CreateMeetingBadRequestResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateMeetingConflictResponseBody is the type of the "Meeting Service"
// service "create-meeting" endpoint HTTP response body for the "Conflict"
// error.
type CreateMeetingConflictResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateMeetingInternalServerErrorResponseBody is the type of the "Meeting
// Service" service "create-meeting" endpoint HTTP response body for the
// "InternalServerError" error.
type CreateMeetingInternalServerErrorResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateMeetingServiceUnavailableResponseBody is the type of the "Meeting
// Service" service "create-meeting" endpoint HTTP response body for the
// "ServiceUnavailable" error.
type CreateMeetingServiceUnavailableResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetMeetingInternalServerErrorResponseBody is the type of the "Meeting
// Service" service "get-meeting" endpoint HTTP response body for the
// "InternalServerError" error.
type GetMeetingInternalServerErrorResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetMeetingNotFoundResponseBody is the type of the "Meeting Service" service
// "get-meeting" endpoint HTTP response body for the "NotFound" error.
type GetMeetingNotFoundResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetMeetingServiceUnavailableResponseBody is the type of the "Meeting
// Service" service "get-meeting" endpoint HTTP response body for the
// "ServiceUnavailable" error.
type GetMeetingServiceUnavailableResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateMeetingBadRequestResponseBody is the type of the "Meeting Service"
// service "update-meeting" endpoint HTTP response body for the "BadRequest"
// error.
type UpdateMeetingBadRequestResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateMeetingConflictResponseBody is the type of the "Meeting Service"
// service "update-meeting" endpoint HTTP response body for the "Conflict"
// error.
type UpdateMeetingConflictResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateMeetingInternalServerErrorResponseBody is the type of the "Meeting
// Service" service "update-meeting" endpoint HTTP response body for the
// "InternalServerError" error.
type UpdateMeetingInternalServerErrorResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateMeetingNotFoundResponseBody is the type of the "Meeting Service"
// service "update-meeting" endpoint HTTP response body for the "NotFound"
// error.
type UpdateMeetingNotFoundResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateMeetingServiceUnavailableResponseBody is the type of the "Meeting
// Service" service "update-meeting" endpoint HTTP response body for the
// "ServiceUnavailable" error.
type UpdateMeetingServiceUnavailableResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteMeetingBadRequestResponseBody is the type of the "Meeting Service"
// service "delete-meeting" endpoint HTTP response body for the "BadRequest"
// error.
type DeleteMeetingBadRequestResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteMeetingInternalServerErrorResponseBody is the type of the "Meeting
// Service" service "delete-meeting" endpoint HTTP response body for the
// "InternalServerError" error.
type DeleteMeetingInternalServerErrorResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteMeetingNotFoundResponseBody is the type of the "Meeting Service"
// service "delete-meeting" endpoint HTTP response body for the "NotFound"
// error.
type DeleteMeetingNotFoundResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteMeetingServiceUnavailableResponseBody is the type of the "Meeting
// Service" service "delete-meeting" endpoint HTTP response body for the
// "ServiceUnavailable" error.
type DeleteMeetingServiceUnavailableResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetMeetingRegistrantsInternalServerErrorResponseBody is the type of the
// "Meeting Service" service "get-meeting-registrants" endpoint HTTP response
// body for the "InternalServerError" error.
type GetMeetingRegistrantsInternalServerErrorResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetMeetingRegistrantsNotFoundResponseBody is the type of the "Meeting
// Service" service "get-meeting-registrants" endpoint HTTP response body for
// the "NotFound" error.
type GetMeetingRegistrantsNotFoundResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetMeetingRegistrantsServiceUnavailableResponseBody is the type of the
// "Meeting Service" service "get-meeting-registrants" endpoint HTTP response
// body for the "ServiceUnavailable" error.
type GetMeetingRegistrantsServiceUnavailableResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateMeetingRegistrantBadRequestResponseBody is the type of the "Meeting
// Service" service "create-meeting-registrant" endpoint HTTP response body for
// the "BadRequest" error.
type CreateMeetingRegistrantBadRequestResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateMeetingRegistrantConflictResponseBody is the type of the "Meeting
// Service" service "create-meeting-registrant" endpoint HTTP response body for
// the "Conflict" error.
type CreateMeetingRegistrantConflictResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateMeetingRegistrantInternalServerErrorResponseBody is the type of the
// "Meeting Service" service "create-meeting-registrant" endpoint HTTP response
// body for the "InternalServerError" error.
type CreateMeetingRegistrantInternalServerErrorResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateMeetingRegistrantNotFoundResponseBody is the type of the "Meeting
// Service" service "create-meeting-registrant" endpoint HTTP response body for
// the "NotFound" error.
type CreateMeetingRegistrantNotFoundResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateMeetingRegistrantServiceUnavailableResponseBody is the type of the
// "Meeting Service" service "create-meeting-registrant" endpoint HTTP response
// body for the "ServiceUnavailable" error.
type CreateMeetingRegistrantServiceUnavailableResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetMeetingRegistrantInternalServerErrorResponseBody is the type of the
// "Meeting Service" service "get-meeting-registrant" endpoint HTTP response
// body for the "InternalServerError" error.
type GetMeetingRegistrantInternalServerErrorResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetMeetingRegistrantNotFoundResponseBody is the type of the "Meeting
// Service" service "get-meeting-registrant" endpoint HTTP response body for
// the "NotFound" error.
type GetMeetingRegistrantNotFoundResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetMeetingRegistrantServiceUnavailableResponseBody is the type of the
// "Meeting Service" service "get-meeting-registrant" endpoint HTTP response
// body for the "ServiceUnavailable" error.
type GetMeetingRegistrantServiceUnavailableResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateMeetingRegistrantBadRequestResponseBody is the type of the "Meeting
// Service" service "update-meeting-registrant" endpoint HTTP response body for
// the "BadRequest" error.
type UpdateMeetingRegistrantBadRequestResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateMeetingRegistrantConflictResponseBody is the type of the "Meeting
// Service" service "update-meeting-registrant" endpoint HTTP response body for
// the "Conflict" error.
type UpdateMeetingRegistrantConflictResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateMeetingRegistrantInternalServerErrorResponseBody is the type of the
// "Meeting Service" service "update-meeting-registrant" endpoint HTTP response
// body for the "InternalServerError" error.
type UpdateMeetingRegistrantInternalServerErrorResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateMeetingRegistrantNotFoundResponseBody is the type of the "Meeting
// Service" service "update-meeting-registrant" endpoint HTTP response body for
// the "NotFound" error.
type UpdateMeetingRegistrantNotFoundResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateMeetingRegistrantServiceUnavailableResponseBody is the type of the
// "Meeting Service" service "update-meeting-registrant" endpoint HTTP response
// body for the "ServiceUnavailable" error.
type UpdateMeetingRegistrantServiceUnavailableResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteMeetingRegistrantBadRequestResponseBody is the type of the "Meeting
// Service" service "delete-meeting-registrant" endpoint HTTP response body for
// the "BadRequest" error.
type DeleteMeetingRegistrantBadRequestResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteMeetingRegistrantInternalServerErrorResponseBody is the type of the
// "Meeting Service" service "delete-meeting-registrant" endpoint HTTP response
// body for the "InternalServerError" error.
type DeleteMeetingRegistrantInternalServerErrorResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteMeetingRegistrantNotFoundResponseBody is the type of the "Meeting
// Service" service "delete-meeting-registrant" endpoint HTTP response body for
// the "NotFound" error.
type DeleteMeetingRegistrantNotFoundResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteMeetingRegistrantServiceUnavailableResponseBody is the type of the
// "Meeting Service" service "delete-meeting-registrant" endpoint HTTP response
// body for the "ServiceUnavailable" error.
type DeleteMeetingRegistrantServiceUnavailableResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// ReadyzServiceUnavailableResponseBody is the type of the "Meeting Service"
// service "readyz" endpoint HTTP response body for the "ServiceUnavailable"
// error.
type ReadyzServiceUnavailableResponseBody struct {
	// HTTP status code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// MeetingResponseBody is used to define fields on response body types.
type MeetingResponseBody struct {
	// The UID of the meeting
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// The UID of the LF project
	ProjectUID *string `form:"project_uid,omitempty" json:"project_uid,omitempty" xml:"project_uid,omitempty"`
	// The start time of the meeting in RFC3339 format
	StartTime *string `form:"start_time,omitempty" json:"start_time,omitempty" xml:"start_time,omitempty"`
	// The duration of the meeting in minutes
	Duration *int `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	// The timezone of the meeting (e.g. 'America/New_York')
	Timezone *string `form:"timezone,omitempty" json:"timezone,omitempty" xml:"timezone,omitempty"`
	// The recurrence of the meeting
	Recurrence *RecurrenceResponseBody `form:"recurrence,omitempty" json:"recurrence,omitempty" xml:"recurrence,omitempty"`
	// The title of the meeting
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// The description of the meeting
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The committees associated with the meeting
	Committees []*CommitteeResponseBody `form:"committees,omitempty" json:"committees,omitempty" xml:"committees,omitempty"`
	// The platform name of where the meeting is hosted
	Platform *string `form:"platform,omitempty" json:"platform,omitempty" xml:"platform,omitempty"`
	// The number of minutes that users are allowed to join the meeting early
	// without being kicked out
	EarlyJoinTimeMinutes *int `form:"early_join_time_minutes,omitempty" json:"early_join_time_minutes,omitempty" xml:"early_join_time_minutes,omitempty"`
	// The type of meeting. This is usually dependent on the committee(s)
	// associated with the meeting
	MeetingType *string `form:"meeting_type,omitempty" json:"meeting_type,omitempty" xml:"meeting_type,omitempty"`
	// The visibility of the meeting's existence to other users
	Visibility *string `form:"visibility,omitempty" json:"visibility,omitempty" xml:"visibility,omitempty"`
	// The restrictedness of joining the meeting (i.e. is the meeting restricted to
	// only invited users or anyone?)
	Restricted *bool `form:"restricted,omitempty" json:"restricted,omitempty" xml:"restricted,omitempty"`
	// The visibility of artifacts to users (e.g. public, only for registrants,
	// only for hosts)
	ArtifactVisibility *string `form:"artifact_visibility,omitempty" json:"artifact_visibility,omitempty" xml:"artifact_visibility,omitempty"`
	// The public join URL for participants to join the meeting via the LFX
	// platform (e.g.
	// 'https://zoom-lfx.platform.linuxfoundation.org/meeting/12343245463')
	PublicLink *string `form:"public_link,omitempty" json:"public_link,omitempty" xml:"public_link,omitempty"`
	// The number of registrants that have an email delivery error with their
	// invite. The delivery errors are counted as the last invite that was sent to
	// the registrant, so if a registrant previously had a delivery error but not
	// in their most recent invite received, then it does not count towards this
	// field value.
	EmailDeliveryErrorCount *int `form:"email_delivery_error_count,omitempty" json:"email_delivery_error_count,omitempty" xml:"email_delivery_error_count,omitempty"`
	// Whether recording is enabled for the meeting
	RecordingEnabled *bool `form:"recording_enabled,omitempty" json:"recording_enabled,omitempty" xml:"recording_enabled,omitempty"`
	// Whether transcription is enabled for the meeting
	TranscriptEnabled *bool `form:"transcript_enabled,omitempty" json:"transcript_enabled,omitempty" xml:"transcript_enabled,omitempty"`
	// Whether automatic youtube uploading is enabled for the meeting
	YoutubeUploadEnabled *bool `form:"youtube_upload_enabled,omitempty" json:"youtube_upload_enabled,omitempty" xml:"youtube_upload_enabled,omitempty"`
	// For zoom platform meetings: the configuration for the meeting
	ZoomConfig *ZoomConfigFullResponseBody `form:"zoom_config,omitempty" json:"zoom_config,omitempty" xml:"zoom_config,omitempty"`
	// The number of registrants for the meeting
	RegistrantCount *int `form:"registrant_count,omitempty" json:"registrant_count,omitempty" xml:"registrant_count,omitempty"`
	// The number of registrants that have declined the meeting invitation
	RegistrantResponseDeclinedCount *int `form:"registrant_response_declined_count,omitempty" json:"registrant_response_declined_count,omitempty" xml:"registrant_response_declined_count,omitempty"`
	// The number of registrants that have accepted the meeting invitation
	RegistrantResponseAcceptedCount *int `form:"registrant_response_accepted_count,omitempty" json:"registrant_response_accepted_count,omitempty" xml:"registrant_response_accepted_count,omitempty"`
	// Array of meeting occurrences (read-only from platform API)
	Occurrences []*OccurrenceResponseBody `form:"occurrences,omitempty" json:"occurrences,omitempty" xml:"occurrences,omitempty"`
	// The date and time the resource was created
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The date and time the resource was last updated
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// RecurrenceResponseBody is used to define fields on response body types.
type RecurrenceResponseBody struct {
	// The recurrence type
	Type *int `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Define the interval at which the meeting should recur.
	// For instance, if you would like to schedule a meeting that recurs every two
	// months,
	// you must set the value of this field as '2' and the value of the 'type'
	// parameter as '3'.
	// For a daily meeting, the maximum interval you can set is '90' days.
	// For a weekly meeting the maximum interval that you can set is of '12' weeks.
	// For a monthly meeting, there is a maximum of '3' months.
	RepeatInterval *int `form:"repeat_interval,omitempty" json:"repeat_interval,omitempty" xml:"repeat_interval,omitempty"`
	// This field is required if you're scheduling a recurring meeting of type '2'
	// to state which day(s)
	// of the week the meeting should repeat. The value for this field could be a
	// number between '1' to '7' in string format.
	// For instance, if the meeting should recur on Sunday, provide '1' as the
	// value of this field.
	// If you would like the meeting to occur on multiple days of a week, you
	// should provide comma separated values for this field.
	// For instance, if the meeting should recur on Sundays and Tuesdays provide
	// '1,3' as the value of this field.
	// 1 - Sunday
	// 2 - Monday
	// 3 - Tuesday
	// 4 - Wednesday
	// 5 - Thursday
	// 6 - Friday
	// 7 - Saturday
	WeeklyDays *string `form:"weekly_days,omitempty" json:"weekly_days,omitempty" xml:"weekly_days,omitempty"`
	// Use this field only if you're scheduling a recurring meeting of type '3' to
	// state which day in a month, the meeting should recur. The value range is
	// from 1 to 31. For instance, if you would like the meeting to recur on 23rd
	// of each month, provide '23' as the value of this field and '1' as the value
	// of the 'repeat_interval' field. Instead, if you would like the meeting to
	// recur every three months, on 23rd of the month, change the value of the
	// 'repeat_interval' field to '3'.
	MonthlyDay *int `form:"monthly_day,omitempty" json:"monthly_day,omitempty" xml:"monthly_day,omitempty"`
	// Use this field only if you're scheduling a recurring meeting of type '3' to
	// state the week of the month when the meeting should recur. If you use this
	// field, you must also use the 'monthly_week_day' field to state the day of
	// the week when the meeting should recur. '-1' - Last week of the month. 1 -
	// First week of the month. 2 - Second week of the month. 3 - Third week of the
	// month. 4 - Fourth week of the month.
	MonthlyWeek *int `form:"monthly_week,omitempty" json:"monthly_week,omitempty" xml:"monthly_week,omitempty"`
	// Use this field only if you're scheduling a recurring meeting of type '3' to
	// state a specific day in a week when the monthly meeting should recur. To use
	// this field, you must also use the 'monthly_week' field. 1 - Sunday 2 -
	// Monday 3 - Tuesday 4 - Wednesday 5 - Thursday 6 - Friday 7 - Saturday
	MonthlyWeekDay *int `form:"monthly_week_day,omitempty" json:"monthly_week_day,omitempty" xml:"monthly_week_day,omitempty"`
	// Select how many times the meeting should recur before it is canceled. Cannot
	// be used with 'end_date_time'.
	EndTimes *int `form:"end_times,omitempty" json:"end_times,omitempty" xml:"end_times,omitempty"`
	// Select the final date on which the meeting will recur before it is canceled.
	// Cannot be used with 'end_times'. should be in GMT. should be in
	// 'yyyy-MM-ddTHH:mm:ssZ' format.
	EndDateTime *string `form:"end_date_time,omitempty" json:"end_date_time,omitempty" xml:"end_date_time,omitempty"`
}

// CommitteeResponseBody is used to define fields on response body types.
type CommitteeResponseBody struct {
	// The UID of the committee
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// The committee voting statuses required for committee members to be added to
	// the meeting
	AllowedVotingStatuses []string `form:"allowed_voting_statuses,omitempty" json:"allowed_voting_statuses,omitempty" xml:"allowed_voting_statuses,omitempty"`
}

// ZoomConfigFullResponseBody is used to define fields on response body types.
type ZoomConfigFullResponseBody struct {
	// The ID of the created meeting in Zoom
	MeetingID *string `form:"meeting_id,omitempty" json:"meeting_id,omitempty" xml:"meeting_id,omitempty"`
	// For zoom platform meetings: whether Zoom AI companion is enabled
	AiCompanionEnabled *bool `form:"ai_companion_enabled,omitempty" json:"ai_companion_enabled,omitempty" xml:"ai_companion_enabled,omitempty"`
	// For zoom platform meetings: whether AI summary approval is required
	AiSummaryRequireApproval *bool `form:"ai_summary_require_approval,omitempty" json:"ai_summary_require_approval,omitempty" xml:"ai_summary_require_approval,omitempty"`
}

// OccurrenceResponseBody is used to define fields on response body types.
type OccurrenceResponseBody struct {
	// ID of the occurrence, also the start time in unix time
	OccurrenceID *string `form:"occurrence_id,omitempty" json:"occurrence_id,omitempty" xml:"occurrence_id,omitempty"`
	// GMT start time of occurrence
	StartTime *string `form:"start_time,omitempty" json:"start_time,omitempty" xml:"start_time,omitempty"`
	// Meeting title for this occurrence
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Meeting description for this occurrence
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Occurrence duration in minutes
	Duration *int `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
	// The recurrence pattern for this occurrence onwards if there is one
	Recurrence *RecurrenceResponseBody `form:"recurrence,omitempty" json:"recurrence,omitempty" xml:"recurrence,omitempty"`
	// Number of registrants for this meeting occurrence
	RegistrantCount *int `form:"registrant_count,omitempty" json:"registrant_count,omitempty" xml:"registrant_count,omitempty"`
	// Number of registrants who declined the invite for this occurrence
	ResponseCountNo *int `form:"response_count_no,omitempty" json:"response_count_no,omitempty" xml:"response_count_no,omitempty"`
	// Number of registrants who accepted the invite for this occurrence
	ResponseCountYes *int `form:"response_count_yes,omitempty" json:"response_count_yes,omitempty" xml:"response_count_yes,omitempty"`
	// Occurrence status from platform
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
}

// RecurrenceRequestBody is used to define fields on request body types.
type RecurrenceRequestBody struct {
	// The recurrence type
	Type int `form:"type" json:"type" xml:"type"`
	// Define the interval at which the meeting should recur.
	// For instance, if you would like to schedule a meeting that recurs every two
	// months,
	// you must set the value of this field as '2' and the value of the 'type'
	// parameter as '3'.
	// For a daily meeting, the maximum interval you can set is '90' days.
	// For a weekly meeting the maximum interval that you can set is of '12' weeks.
	// For a monthly meeting, there is a maximum of '3' months.
	RepeatInterval int `form:"repeat_interval" json:"repeat_interval" xml:"repeat_interval"`
	// This field is required if you're scheduling a recurring meeting of type '2'
	// to state which day(s)
	// of the week the meeting should repeat. The value for this field could be a
	// number between '1' to '7' in string format.
	// For instance, if the meeting should recur on Sunday, provide '1' as the
	// value of this field.
	// If you would like the meeting to occur on multiple days of a week, you
	// should provide comma separated values for this field.
	// For instance, if the meeting should recur on Sundays and Tuesdays provide
	// '1,3' as the value of this field.
	// 1 - Sunday
	// 2 - Monday
	// 3 - Tuesday
	// 4 - Wednesday
	// 5 - Thursday
	// 6 - Friday
	// 7 - Saturday
	WeeklyDays *string `form:"weekly_days,omitempty" json:"weekly_days,omitempty" xml:"weekly_days,omitempty"`
	// Use this field only if you're scheduling a recurring meeting of type '3' to
	// state which day in a month, the meeting should recur. The value range is
	// from 1 to 31. For instance, if you would like the meeting to recur on 23rd
	// of each month, provide '23' as the value of this field and '1' as the value
	// of the 'repeat_interval' field. Instead, if you would like the meeting to
	// recur every three months, on 23rd of the month, change the value of the
	// 'repeat_interval' field to '3'.
	MonthlyDay *int `form:"monthly_day,omitempty" json:"monthly_day,omitempty" xml:"monthly_day,omitempty"`
	// Use this field only if you're scheduling a recurring meeting of type '3' to
	// state the week of the month when the meeting should recur. If you use this
	// field, you must also use the 'monthly_week_day' field to state the day of
	// the week when the meeting should recur. '-1' - Last week of the month. 1 -
	// First week of the month. 2 - Second week of the month. 3 - Third week of the
	// month. 4 - Fourth week of the month.
	MonthlyWeek *int `form:"monthly_week,omitempty" json:"monthly_week,omitempty" xml:"monthly_week,omitempty"`
	// Use this field only if you're scheduling a recurring meeting of type '3' to
	// state a specific day in a week when the monthly meeting should recur. To use
	// this field, you must also use the 'monthly_week' field. 1 - Sunday 2 -
	// Monday 3 - Tuesday 4 - Wednesday 5 - Thursday 6 - Friday 7 - Saturday
	MonthlyWeekDay *int `form:"monthly_week_day,omitempty" json:"monthly_week_day,omitempty" xml:"monthly_week_day,omitempty"`
	// Select how many times the meeting should recur before it is canceled. Cannot
	// be used with 'end_date_time'.
	EndTimes *int `form:"end_times,omitempty" json:"end_times,omitempty" xml:"end_times,omitempty"`
	// Select the final date on which the meeting will recur before it is canceled.
	// Cannot be used with 'end_times'. should be in GMT. should be in
	// 'yyyy-MM-ddTHH:mm:ssZ' format.
	EndDateTime *string `form:"end_date_time,omitempty" json:"end_date_time,omitempty" xml:"end_date_time,omitempty"`
}

// CommitteeRequestBody is used to define fields on request body types.
type CommitteeRequestBody struct {
	// The UID of the committee
	UID string `form:"uid" json:"uid" xml:"uid"`
	// The committee voting statuses required for committee members to be added to
	// the meeting
	AllowedVotingStatuses []string `form:"allowed_voting_statuses" json:"allowed_voting_statuses" xml:"allowed_voting_statuses"`
}

// ZoomConfigPostRequestBody is used to define fields on request body types.
type ZoomConfigPostRequestBody struct {
	// For zoom platform meetings: whether Zoom AI companion is enabled
	AiCompanionEnabled *bool `form:"ai_companion_enabled,omitempty" json:"ai_companion_enabled,omitempty" xml:"ai_companion_enabled,omitempty"`
	// For zoom platform meetings: whether AI summary approval is required
	AiSummaryRequireApproval *bool `form:"ai_summary_require_approval,omitempty" json:"ai_summary_require_approval,omitempty" xml:"ai_summary_require_approval,omitempty"`
}

// RegistrantResponseBody is used to define fields on response body types.
type RegistrantResponseBody struct {
	// The UID of the registrant
	UID *string `form:"uid,omitempty" json:"uid,omitempty" xml:"uid,omitempty"`
	// The UID of the meeting
	MeetingUID *string `form:"meeting_uid,omitempty" json:"meeting_uid,omitempty" xml:"meeting_uid,omitempty"`
	// User's email address
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// User's first name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// User's last name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// If user should have access as a meeting host
	Host *bool `form:"host,omitempty" json:"host,omitempty" xml:"host,omitempty"`
	// User's job title
	JobTitle *string `form:"job_title,omitempty" json:"job_title,omitempty" xml:"job_title,omitempty"`
	// The ID of the specific occurrence the user should be invited to. If blank,
	// user is invited to all occurrences
	OccurrenceID *string `form:"occurrence_id,omitempty" json:"occurrence_id,omitempty" xml:"occurrence_id,omitempty"`
	// User's organization
	OrgName *string `form:"org_name,omitempty" json:"org_name,omitempty" xml:"org_name,omitempty"`
	// Whether the registrant is in an organization that has a membership with the
	// LF. If unknown, don't pass this field; the API will find the value by default
	OrgIsMember *bool `form:"org_is_member,omitempty" json:"org_is_member,omitempty" xml:"org_is_member,omitempty"`
	// Whether the registrant is in an organization that has a membership with the
	// project (of the meeting). If unknown, don't pass this field; the API will
	// find the value by default
	OrgIsProjectMember *bool `form:"org_is_project_member,omitempty" json:"org_is_project_member,omitempty" xml:"org_is_project_member,omitempty"`
	// User's avatar URL
	AvatarURL *string `form:"avatar_url,omitempty" json:"avatar_url,omitempty" xml:"avatar_url,omitempty"`
	// User's LF ID
	UserID *string `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
	// The date and time the resource was created
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// The date and time the resource was last updated
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// NewCreateMeetingRequestBody builds the HTTP request body from the payload of
// the "create-meeting" endpoint of the "Meeting Service" service.
func NewCreateMeetingRequestBody(p *meetingservice.CreateMeetingPayload) *CreateMeetingRequestBody {
	body := &CreateMeetingRequestBody{
		ProjectUID:           p.ProjectUID,
		StartTime:            p.StartTime,
		Duration:             p.Duration,
		Timezone:             p.Timezone,
		Title:                p.Title,
		Description:          p.Description,
		Platform:             p.Platform,
		EarlyJoinTimeMinutes: p.EarlyJoinTimeMinutes,
		MeetingType:          p.MeetingType,
		Visibility:           p.Visibility,
		Restricted:           p.Restricted,
		ArtifactVisibility:   p.ArtifactVisibility,
		PublicLink:           p.PublicLink,
		RecordingEnabled:     p.RecordingEnabled,
		TranscriptEnabled:    p.TranscriptEnabled,
		YoutubeUploadEnabled: p.YoutubeUploadEnabled,
	}
	if p.Recurrence != nil {
		body.Recurrence = marshalMeetingserviceRecurrenceToRecurrenceRequestBody(p.Recurrence)
	}
	if p.Committees != nil {
		body.Committees = make([]*CommitteeRequestBody, len(p.Committees))
		for i, val := range p.Committees {
			body.Committees[i] = marshalMeetingserviceCommitteeToCommitteeRequestBody(val)
		}
	}
	if p.ZoomConfig != nil {
		body.ZoomConfig = marshalMeetingserviceZoomConfigPostToZoomConfigPostRequestBody(p.ZoomConfig)
	}
	return body
}

// NewUpdateMeetingRequestBody builds the HTTP request body from the payload of
// the "update-meeting" endpoint of the "Meeting Service" service.
func NewUpdateMeetingRequestBody(p *meetingservice.UpdateMeetingPayload) *UpdateMeetingRequestBody {
	body := &UpdateMeetingRequestBody{
		ProjectUID:           p.ProjectUID,
		StartTime:            p.StartTime,
		Duration:             p.Duration,
		Timezone:             p.Timezone,
		Title:                p.Title,
		Description:          p.Description,
		Platform:             p.Platform,
		EarlyJoinTimeMinutes: p.EarlyJoinTimeMinutes,
		MeetingType:          p.MeetingType,
		Visibility:           p.Visibility,
		Restricted:           p.Restricted,
		ArtifactVisibility:   p.ArtifactVisibility,
		PublicLink:           p.PublicLink,
		RecordingEnabled:     p.RecordingEnabled,
		TranscriptEnabled:    p.TranscriptEnabled,
		YoutubeUploadEnabled: p.YoutubeUploadEnabled,
	}
	if p.Recurrence != nil {
		body.Recurrence = marshalMeetingserviceRecurrenceToRecurrenceRequestBody(p.Recurrence)
	}
	if p.Committees != nil {
		body.Committees = make([]*CommitteeRequestBody, len(p.Committees))
		for i, val := range p.Committees {
			body.Committees[i] = marshalMeetingserviceCommitteeToCommitteeRequestBody(val)
		}
	}
	if p.ZoomConfig != nil {
		body.ZoomConfig = marshalMeetingserviceZoomConfigPostToZoomConfigPostRequestBody(p.ZoomConfig)
	}
	return body
}

// NewCreateMeetingRegistrantRequestBody builds the HTTP request body from the
// payload of the "create-meeting-registrant" endpoint of the "Meeting Service"
// service.
func NewCreateMeetingRegistrantRequestBody(p *meetingservice.CreateMeetingRegistrantPayload) *CreateMeetingRegistrantRequestBody {
	body := &CreateMeetingRegistrantRequestBody{
		Email:        p.Email,
		FirstName:    p.FirstName,
		LastName:     p.LastName,
		Host:         p.Host,
		JobTitle:     p.JobTitle,
		OrgName:      p.OrgName,
		OccurrenceID: p.OccurrenceID,
		AvatarURL:    p.AvatarURL,
		UserID:       p.UserID,
	}
	return body
}

// NewUpdateMeetingRegistrantRequestBody builds the HTTP request body from the
// payload of the "update-meeting-registrant" endpoint of the "Meeting Service"
// service.
func NewUpdateMeetingRegistrantRequestBody(p *meetingservice.UpdateMeetingRegistrantPayload) *UpdateMeetingRegistrantRequestBody {
	body := &UpdateMeetingRegistrantRequestBody{
		Email:        p.Email,
		FirstName:    p.FirstName,
		LastName:     p.LastName,
		Host:         p.Host,
		JobTitle:     p.JobTitle,
		OrgName:      p.OrgName,
		OccurrenceID: p.OccurrenceID,
		AvatarURL:    p.AvatarURL,
		UserID:       p.UserID,
	}
	return body
}

// NewGetMeetingsResultOK builds a "Meeting Service" service "get-meetings"
// endpoint result from a HTTP "OK" response.
func NewGetMeetingsResultOK(body *GetMeetingsResponseBody, cacheControl *string) *meetingservice.GetMeetingsResult {
	v := &meetingservice.GetMeetingsResult{}
	v.Meetings = make([]*meetingservice.Meeting, len(body.Meetings))
	for i, val := range body.Meetings {
		v.Meetings[i] = unmarshalMeetingResponseBodyToMeetingserviceMeeting(val)
	}
	v.CacheControl = cacheControl

	return v
}

// NewGetMeetingsBadRequest builds a Meeting Service service get-meetings
// endpoint BadRequest error.
func NewGetMeetingsBadRequest(body *GetMeetingsBadRequestResponseBody) *meetingservice.BadRequestError {
	v := &meetingservice.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetMeetingsInternalServerError builds a Meeting Service service
// get-meetings endpoint InternalServerError error.
func NewGetMeetingsInternalServerError(body *GetMeetingsInternalServerErrorResponseBody) *meetingservice.InternalServerError {
	v := &meetingservice.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetMeetingsServiceUnavailable builds a Meeting Service service
// get-meetings endpoint ServiceUnavailable error.
func NewGetMeetingsServiceUnavailable(body *GetMeetingsServiceUnavailableResponseBody) *meetingservice.ServiceUnavailableError {
	v := &meetingservice.ServiceUnavailableError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewCreateMeetingMeetingCreated builds a "Meeting Service" service
// "create-meeting" endpoint result from a HTTP "Created" response.
func NewCreateMeetingMeetingCreated(body *CreateMeetingResponseBody) *meetingservice.Meeting {
	v := &meetingservice.Meeting{
		UID:                             body.UID,
		ProjectUID:                      body.ProjectUID,
		StartTime:                       body.StartTime,
		Duration:                        body.Duration,
		Timezone:                        body.Timezone,
		Title:                           body.Title,
		Description:                     body.Description,
		Platform:                        body.Platform,
		EarlyJoinTimeMinutes:            body.EarlyJoinTimeMinutes,
		MeetingType:                     body.MeetingType,
		Visibility:                      body.Visibility,
		Restricted:                      body.Restricted,
		ArtifactVisibility:              body.ArtifactVisibility,
		PublicLink:                      body.PublicLink,
		EmailDeliveryErrorCount:         body.EmailDeliveryErrorCount,
		RecordingEnabled:                body.RecordingEnabled,
		TranscriptEnabled:               body.TranscriptEnabled,
		YoutubeUploadEnabled:            body.YoutubeUploadEnabled,
		RegistrantCount:                 body.RegistrantCount,
		RegistrantResponseDeclinedCount: body.RegistrantResponseDeclinedCount,
		RegistrantResponseAcceptedCount: body.RegistrantResponseAcceptedCount,
		CreatedAt:                       body.CreatedAt,
		UpdatedAt:                       body.UpdatedAt,
	}
	if body.Recurrence != nil {
		v.Recurrence = unmarshalRecurrenceResponseBodyToMeetingserviceRecurrence(body.Recurrence)
	}
	if body.Committees != nil {
		v.Committees = make([]*meetingservice.Committee, len(body.Committees))
		for i, val := range body.Committees {
			v.Committees[i] = unmarshalCommitteeResponseBodyToMeetingserviceCommittee(val)
		}
	}
	if body.ZoomConfig != nil {
		v.ZoomConfig = unmarshalZoomConfigFullResponseBodyToMeetingserviceZoomConfigFull(body.ZoomConfig)
	}
	if body.Occurrences != nil {
		v.Occurrences = make([]*meetingservice.Occurrence, len(body.Occurrences))
		for i, val := range body.Occurrences {
			v.Occurrences[i] = unmarshalOccurrenceResponseBodyToMeetingserviceOccurrence(val)
		}
	}

	return v
}

// NewCreateMeetingBadRequest builds a Meeting Service service create-meeting
// endpoint BadRequest error.
func NewCreateMeetingBadRequest(body *CreateMeetingBadRequestResponseBody) *meetingservice.BadRequestError {
	v := &meetingservice.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewCreateMeetingConflict builds a Meeting Service service create-meeting
// endpoint Conflict error.
func NewCreateMeetingConflict(body *CreateMeetingConflictResponseBody) *meetingservice.ConflictError {
	v := &meetingservice.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewCreateMeetingInternalServerError builds a Meeting Service service
// create-meeting endpoint InternalServerError error.
func NewCreateMeetingInternalServerError(body *CreateMeetingInternalServerErrorResponseBody) *meetingservice.InternalServerError {
	v := &meetingservice.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewCreateMeetingServiceUnavailable builds a Meeting Service service
// create-meeting endpoint ServiceUnavailable error.
func NewCreateMeetingServiceUnavailable(body *CreateMeetingServiceUnavailableResponseBody) *meetingservice.ServiceUnavailableError {
	v := &meetingservice.ServiceUnavailableError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetMeetingResultOK builds a "Meeting Service" service "get-meeting"
// endpoint result from a HTTP "OK" response.
func NewGetMeetingResultOK(body *GetMeetingResponseBody, etag *string) *meetingservice.GetMeetingResult {
	v := &meetingservice.Meeting{
		UID:                             body.UID,
		ProjectUID:                      body.ProjectUID,
		StartTime:                       body.StartTime,
		Duration:                        body.Duration,
		Timezone:                        body.Timezone,
		Title:                           body.Title,
		Description:                     body.Description,
		Platform:                        body.Platform,
		EarlyJoinTimeMinutes:            body.EarlyJoinTimeMinutes,
		MeetingType:                     body.MeetingType,
		Visibility:                      body.Visibility,
		Restricted:                      body.Restricted,
		ArtifactVisibility:              body.ArtifactVisibility,
		PublicLink:                      body.PublicLink,
		EmailDeliveryErrorCount:         body.EmailDeliveryErrorCount,
		RecordingEnabled:                body.RecordingEnabled,
		TranscriptEnabled:               body.TranscriptEnabled,
		YoutubeUploadEnabled:            body.YoutubeUploadEnabled,
		RegistrantCount:                 body.RegistrantCount,
		RegistrantResponseDeclinedCount: body.RegistrantResponseDeclinedCount,
		RegistrantResponseAcceptedCount: body.RegistrantResponseAcceptedCount,
		CreatedAt:                       body.CreatedAt,
		UpdatedAt:                       body.UpdatedAt,
	}
	if body.Recurrence != nil {
		v.Recurrence = unmarshalRecurrenceResponseBodyToMeetingserviceRecurrence(body.Recurrence)
	}
	if body.Committees != nil {
		v.Committees = make([]*meetingservice.Committee, len(body.Committees))
		for i, val := range body.Committees {
			v.Committees[i] = unmarshalCommitteeResponseBodyToMeetingserviceCommittee(val)
		}
	}
	if body.ZoomConfig != nil {
		v.ZoomConfig = unmarshalZoomConfigFullResponseBodyToMeetingserviceZoomConfigFull(body.ZoomConfig)
	}
	if body.Occurrences != nil {
		v.Occurrences = make([]*meetingservice.Occurrence, len(body.Occurrences))
		for i, val := range body.Occurrences {
			v.Occurrences[i] = unmarshalOccurrenceResponseBodyToMeetingserviceOccurrence(val)
		}
	}
	res := &meetingservice.GetMeetingResult{
		Meeting: v,
	}
	res.Etag = etag

	return res
}

// NewGetMeetingInternalServerError builds a Meeting Service service
// get-meeting endpoint InternalServerError error.
func NewGetMeetingInternalServerError(body *GetMeetingInternalServerErrorResponseBody) *meetingservice.InternalServerError {
	v := &meetingservice.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetMeetingNotFound builds a Meeting Service service get-meeting endpoint
// NotFound error.
func NewGetMeetingNotFound(body *GetMeetingNotFoundResponseBody) *meetingservice.NotFoundError {
	v := &meetingservice.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetMeetingServiceUnavailable builds a Meeting Service service get-meeting
// endpoint ServiceUnavailable error.
func NewGetMeetingServiceUnavailable(body *GetMeetingServiceUnavailableResponseBody) *meetingservice.ServiceUnavailableError {
	v := &meetingservice.ServiceUnavailableError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewUpdateMeetingMeetingOK builds a "Meeting Service" service
// "update-meeting" endpoint result from a HTTP "OK" response.
func NewUpdateMeetingMeetingOK(body *UpdateMeetingResponseBody) *meetingservice.Meeting {
	v := &meetingservice.Meeting{
		UID:                             body.UID,
		ProjectUID:                      body.ProjectUID,
		StartTime:                       body.StartTime,
		Duration:                        body.Duration,
		Timezone:                        body.Timezone,
		Title:                           body.Title,
		Description:                     body.Description,
		Platform:                        body.Platform,
		EarlyJoinTimeMinutes:            body.EarlyJoinTimeMinutes,
		MeetingType:                     body.MeetingType,
		Visibility:                      body.Visibility,
		Restricted:                      body.Restricted,
		ArtifactVisibility:              body.ArtifactVisibility,
		PublicLink:                      body.PublicLink,
		EmailDeliveryErrorCount:         body.EmailDeliveryErrorCount,
		RecordingEnabled:                body.RecordingEnabled,
		TranscriptEnabled:               body.TranscriptEnabled,
		YoutubeUploadEnabled:            body.YoutubeUploadEnabled,
		RegistrantCount:                 body.RegistrantCount,
		RegistrantResponseDeclinedCount: body.RegistrantResponseDeclinedCount,
		RegistrantResponseAcceptedCount: body.RegistrantResponseAcceptedCount,
		CreatedAt:                       body.CreatedAt,
		UpdatedAt:                       body.UpdatedAt,
	}
	if body.Recurrence != nil {
		v.Recurrence = unmarshalRecurrenceResponseBodyToMeetingserviceRecurrence(body.Recurrence)
	}
	if body.Committees != nil {
		v.Committees = make([]*meetingservice.Committee, len(body.Committees))
		for i, val := range body.Committees {
			v.Committees[i] = unmarshalCommitteeResponseBodyToMeetingserviceCommittee(val)
		}
	}
	if body.ZoomConfig != nil {
		v.ZoomConfig = unmarshalZoomConfigFullResponseBodyToMeetingserviceZoomConfigFull(body.ZoomConfig)
	}
	if body.Occurrences != nil {
		v.Occurrences = make([]*meetingservice.Occurrence, len(body.Occurrences))
		for i, val := range body.Occurrences {
			v.Occurrences[i] = unmarshalOccurrenceResponseBodyToMeetingserviceOccurrence(val)
		}
	}

	return v
}

// NewUpdateMeetingBadRequest builds a Meeting Service service update-meeting
// endpoint BadRequest error.
func NewUpdateMeetingBadRequest(body *UpdateMeetingBadRequestResponseBody) *meetingservice.BadRequestError {
	v := &meetingservice.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewUpdateMeetingConflict builds a Meeting Service service update-meeting
// endpoint Conflict error.
func NewUpdateMeetingConflict(body *UpdateMeetingConflictResponseBody) *meetingservice.ConflictError {
	v := &meetingservice.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewUpdateMeetingInternalServerError builds a Meeting Service service
// update-meeting endpoint InternalServerError error.
func NewUpdateMeetingInternalServerError(body *UpdateMeetingInternalServerErrorResponseBody) *meetingservice.InternalServerError {
	v := &meetingservice.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewUpdateMeetingNotFound builds a Meeting Service service update-meeting
// endpoint NotFound error.
func NewUpdateMeetingNotFound(body *UpdateMeetingNotFoundResponseBody) *meetingservice.NotFoundError {
	v := &meetingservice.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewUpdateMeetingServiceUnavailable builds a Meeting Service service
// update-meeting endpoint ServiceUnavailable error.
func NewUpdateMeetingServiceUnavailable(body *UpdateMeetingServiceUnavailableResponseBody) *meetingservice.ServiceUnavailableError {
	v := &meetingservice.ServiceUnavailableError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewDeleteMeetingBadRequest builds a Meeting Service service delete-meeting
// endpoint BadRequest error.
func NewDeleteMeetingBadRequest(body *DeleteMeetingBadRequestResponseBody) *meetingservice.BadRequestError {
	v := &meetingservice.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewDeleteMeetingInternalServerError builds a Meeting Service service
// delete-meeting endpoint InternalServerError error.
func NewDeleteMeetingInternalServerError(body *DeleteMeetingInternalServerErrorResponseBody) *meetingservice.InternalServerError {
	v := &meetingservice.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewDeleteMeetingNotFound builds a Meeting Service service delete-meeting
// endpoint NotFound error.
func NewDeleteMeetingNotFound(body *DeleteMeetingNotFoundResponseBody) *meetingservice.NotFoundError {
	v := &meetingservice.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewDeleteMeetingServiceUnavailable builds a Meeting Service service
// delete-meeting endpoint ServiceUnavailable error.
func NewDeleteMeetingServiceUnavailable(body *DeleteMeetingServiceUnavailableResponseBody) *meetingservice.ServiceUnavailableError {
	v := &meetingservice.ServiceUnavailableError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetMeetingRegistrantsResultOK builds a "Meeting Service" service
// "get-meeting-registrants" endpoint result from a HTTP "OK" response.
func NewGetMeetingRegistrantsResultOK(body *GetMeetingRegistrantsResponseBody, cacheControl *string) *meetingservice.GetMeetingRegistrantsResult {
	v := &meetingservice.GetMeetingRegistrantsResult{}
	v.Registrants = make([]*meetingservice.Registrant, len(body.Registrants))
	for i, val := range body.Registrants {
		v.Registrants[i] = unmarshalRegistrantResponseBodyToMeetingserviceRegistrant(val)
	}
	v.CacheControl = cacheControl

	return v
}

// NewGetMeetingRegistrantsInternalServerError builds a Meeting Service service
// get-meeting-registrants endpoint InternalServerError error.
func NewGetMeetingRegistrantsInternalServerError(body *GetMeetingRegistrantsInternalServerErrorResponseBody) *meetingservice.InternalServerError {
	v := &meetingservice.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetMeetingRegistrantsNotFound builds a Meeting Service service
// get-meeting-registrants endpoint NotFound error.
func NewGetMeetingRegistrantsNotFound(body *GetMeetingRegistrantsNotFoundResponseBody) *meetingservice.NotFoundError {
	v := &meetingservice.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetMeetingRegistrantsServiceUnavailable builds a Meeting Service service
// get-meeting-registrants endpoint ServiceUnavailable error.
func NewGetMeetingRegistrantsServiceUnavailable(body *GetMeetingRegistrantsServiceUnavailableResponseBody) *meetingservice.ServiceUnavailableError {
	v := &meetingservice.ServiceUnavailableError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewCreateMeetingRegistrantRegistrantCreated builds a "Meeting Service"
// service "create-meeting-registrant" endpoint result from a HTTP "Created"
// response.
func NewCreateMeetingRegistrantRegistrantCreated(body *CreateMeetingRegistrantResponseBody) *meetingservice.Registrant {
	v := &meetingservice.Registrant{
		UID:                *body.UID,
		MeetingUID:         *body.MeetingUID,
		Email:              *body.Email,
		FirstName:          *body.FirstName,
		LastName:           *body.LastName,
		Host:               body.Host,
		JobTitle:           body.JobTitle,
		OccurrenceID:       body.OccurrenceID,
		OrgName:            body.OrgName,
		OrgIsMember:        body.OrgIsMember,
		OrgIsProjectMember: body.OrgIsProjectMember,
		AvatarURL:          body.AvatarURL,
		UserID:             body.UserID,
		CreatedAt:          body.CreatedAt,
		UpdatedAt:          body.UpdatedAt,
	}

	return v
}

// NewCreateMeetingRegistrantBadRequest builds a Meeting Service service
// create-meeting-registrant endpoint BadRequest error.
func NewCreateMeetingRegistrantBadRequest(body *CreateMeetingRegistrantBadRequestResponseBody) *meetingservice.BadRequestError {
	v := &meetingservice.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewCreateMeetingRegistrantConflict builds a Meeting Service service
// create-meeting-registrant endpoint Conflict error.
func NewCreateMeetingRegistrantConflict(body *CreateMeetingRegistrantConflictResponseBody) *meetingservice.ConflictError {
	v := &meetingservice.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewCreateMeetingRegistrantInternalServerError builds a Meeting Service
// service create-meeting-registrant endpoint InternalServerError error.
func NewCreateMeetingRegistrantInternalServerError(body *CreateMeetingRegistrantInternalServerErrorResponseBody) *meetingservice.InternalServerError {
	v := &meetingservice.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewCreateMeetingRegistrantNotFound builds a Meeting Service service
// create-meeting-registrant endpoint NotFound error.
func NewCreateMeetingRegistrantNotFound(body *CreateMeetingRegistrantNotFoundResponseBody) *meetingservice.NotFoundError {
	v := &meetingservice.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewCreateMeetingRegistrantServiceUnavailable builds a Meeting Service
// service create-meeting-registrant endpoint ServiceUnavailable error.
func NewCreateMeetingRegistrantServiceUnavailable(body *CreateMeetingRegistrantServiceUnavailableResponseBody) *meetingservice.ServiceUnavailableError {
	v := &meetingservice.ServiceUnavailableError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetMeetingRegistrantResultOK builds a "Meeting Service" service
// "get-meeting-registrant" endpoint result from a HTTP "OK" response.
func NewGetMeetingRegistrantResultOK(body *GetMeetingRegistrantResponseBody, etag *string) *meetingservice.GetMeetingRegistrantResult {
	v := &meetingservice.Registrant{
		UID:                *body.UID,
		MeetingUID:         *body.MeetingUID,
		Email:              *body.Email,
		FirstName:          *body.FirstName,
		LastName:           *body.LastName,
		Host:               body.Host,
		JobTitle:           body.JobTitle,
		OccurrenceID:       body.OccurrenceID,
		OrgName:            body.OrgName,
		OrgIsMember:        body.OrgIsMember,
		OrgIsProjectMember: body.OrgIsProjectMember,
		AvatarURL:          body.AvatarURL,
		UserID:             body.UserID,
		CreatedAt:          body.CreatedAt,
		UpdatedAt:          body.UpdatedAt,
	}
	res := &meetingservice.GetMeetingRegistrantResult{
		Registrant: v,
	}
	res.Etag = etag

	return res
}

// NewGetMeetingRegistrantInternalServerError builds a Meeting Service service
// get-meeting-registrant endpoint InternalServerError error.
func NewGetMeetingRegistrantInternalServerError(body *GetMeetingRegistrantInternalServerErrorResponseBody) *meetingservice.InternalServerError {
	v := &meetingservice.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetMeetingRegistrantNotFound builds a Meeting Service service
// get-meeting-registrant endpoint NotFound error.
func NewGetMeetingRegistrantNotFound(body *GetMeetingRegistrantNotFoundResponseBody) *meetingservice.NotFoundError {
	v := &meetingservice.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewGetMeetingRegistrantServiceUnavailable builds a Meeting Service service
// get-meeting-registrant endpoint ServiceUnavailable error.
func NewGetMeetingRegistrantServiceUnavailable(body *GetMeetingRegistrantServiceUnavailableResponseBody) *meetingservice.ServiceUnavailableError {
	v := &meetingservice.ServiceUnavailableError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewUpdateMeetingRegistrantRegistrantOK builds a "Meeting Service" service
// "update-meeting-registrant" endpoint result from a HTTP "OK" response.
func NewUpdateMeetingRegistrantRegistrantOK(body *UpdateMeetingRegistrantResponseBody) *meetingservice.Registrant {
	v := &meetingservice.Registrant{
		UID:                *body.UID,
		MeetingUID:         *body.MeetingUID,
		Email:              *body.Email,
		FirstName:          *body.FirstName,
		LastName:           *body.LastName,
		Host:               body.Host,
		JobTitle:           body.JobTitle,
		OccurrenceID:       body.OccurrenceID,
		OrgName:            body.OrgName,
		OrgIsMember:        body.OrgIsMember,
		OrgIsProjectMember: body.OrgIsProjectMember,
		AvatarURL:          body.AvatarURL,
		UserID:             body.UserID,
		CreatedAt:          body.CreatedAt,
		UpdatedAt:          body.UpdatedAt,
	}

	return v
}

// NewUpdateMeetingRegistrantBadRequest builds a Meeting Service service
// update-meeting-registrant endpoint BadRequest error.
func NewUpdateMeetingRegistrantBadRequest(body *UpdateMeetingRegistrantBadRequestResponseBody) *meetingservice.BadRequestError {
	v := &meetingservice.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewUpdateMeetingRegistrantConflict builds a Meeting Service service
// update-meeting-registrant endpoint Conflict error.
func NewUpdateMeetingRegistrantConflict(body *UpdateMeetingRegistrantConflictResponseBody) *meetingservice.ConflictError {
	v := &meetingservice.ConflictError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewUpdateMeetingRegistrantInternalServerError builds a Meeting Service
// service update-meeting-registrant endpoint InternalServerError error.
func NewUpdateMeetingRegistrantInternalServerError(body *UpdateMeetingRegistrantInternalServerErrorResponseBody) *meetingservice.InternalServerError {
	v := &meetingservice.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewUpdateMeetingRegistrantNotFound builds a Meeting Service service
// update-meeting-registrant endpoint NotFound error.
func NewUpdateMeetingRegistrantNotFound(body *UpdateMeetingRegistrantNotFoundResponseBody) *meetingservice.NotFoundError {
	v := &meetingservice.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewUpdateMeetingRegistrantServiceUnavailable builds a Meeting Service
// service update-meeting-registrant endpoint ServiceUnavailable error.
func NewUpdateMeetingRegistrantServiceUnavailable(body *UpdateMeetingRegistrantServiceUnavailableResponseBody) *meetingservice.ServiceUnavailableError {
	v := &meetingservice.ServiceUnavailableError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewDeleteMeetingRegistrantBadRequest builds a Meeting Service service
// delete-meeting-registrant endpoint BadRequest error.
func NewDeleteMeetingRegistrantBadRequest(body *DeleteMeetingRegistrantBadRequestResponseBody) *meetingservice.BadRequestError {
	v := &meetingservice.BadRequestError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewDeleteMeetingRegistrantInternalServerError builds a Meeting Service
// service delete-meeting-registrant endpoint InternalServerError error.
func NewDeleteMeetingRegistrantInternalServerError(body *DeleteMeetingRegistrantInternalServerErrorResponseBody) *meetingservice.InternalServerError {
	v := &meetingservice.InternalServerError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewDeleteMeetingRegistrantNotFound builds a Meeting Service service
// delete-meeting-registrant endpoint NotFound error.
func NewDeleteMeetingRegistrantNotFound(body *DeleteMeetingRegistrantNotFoundResponseBody) *meetingservice.NotFoundError {
	v := &meetingservice.NotFoundError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewDeleteMeetingRegistrantServiceUnavailable builds a Meeting Service
// service delete-meeting-registrant endpoint ServiceUnavailable error.
func NewDeleteMeetingRegistrantServiceUnavailable(body *DeleteMeetingRegistrantServiceUnavailableResponseBody) *meetingservice.ServiceUnavailableError {
	v := &meetingservice.ServiceUnavailableError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// NewReadyzServiceUnavailable builds a Meeting Service service readyz endpoint
// ServiceUnavailable error.
func NewReadyzServiceUnavailable(body *ReadyzServiceUnavailableResponseBody) *meetingservice.ServiceUnavailableError {
	v := &meetingservice.ServiceUnavailableError{
		Code:    *body.Code,
		Message: *body.Message,
	}

	return v
}

// ValidateGetMeetingsResponseBody runs the validations defined on
// Get-MeetingsResponseBody
func ValidateGetMeetingsResponseBody(body *GetMeetingsResponseBody) (err error) {
	if body.Meetings == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("meetings", "body"))
	}
	for _, e := range body.Meetings {
		if e != nil {
			if err2 := ValidateMeetingResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateCreateMeetingResponseBody runs the validations defined on
// Create-MeetingResponseBody
func ValidateCreateMeetingResponseBody(body *CreateMeetingResponseBody) (err error) {
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.ProjectUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.project_uid", *body.ProjectUID, goa.FormatUUID))
	}
	if body.StartTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.start_time", *body.StartTime, goa.FormatDateTime))
	}
	if body.Duration != nil {
		if *body.Duration < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.duration", *body.Duration, 0, true))
		}
	}
	if body.Duration != nil {
		if *body.Duration > 600 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.duration", *body.Duration, 600, false))
		}
	}
	if body.Recurrence != nil {
		if err2 := ValidateRecurrenceResponseBody(body.Recurrence); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	for _, e := range body.Committees {
		if e != nil {
			if err2 := ValidateCommitteeResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.Platform != nil {
		if !(*body.Platform == "Zoom") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.platform", *body.Platform, []any{"Zoom"}))
		}
	}
	if body.EarlyJoinTimeMinutes != nil {
		if *body.EarlyJoinTimeMinutes < 10 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.early_join_time_minutes", *body.EarlyJoinTimeMinutes, 10, true))
		}
	}
	if body.EarlyJoinTimeMinutes != nil {
		if *body.EarlyJoinTimeMinutes > 60 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.early_join_time_minutes", *body.EarlyJoinTimeMinutes, 60, false))
		}
	}
	if body.MeetingType != nil {
		if !(*body.MeetingType == "Board" || *body.MeetingType == "Maintainers" || *body.MeetingType == "Marketing" || *body.MeetingType == "Technical" || *body.MeetingType == "Legal" || *body.MeetingType == "Other" || *body.MeetingType == "None") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.meeting_type", *body.MeetingType, []any{"Board", "Maintainers", "Marketing", "Technical", "Legal", "Other", "None"}))
		}
	}
	if body.Visibility != nil {
		if !(*body.Visibility == "public" || *body.Visibility == "private") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.visibility", *body.Visibility, []any{"public", "private"}))
		}
	}
	if body.ArtifactVisibility != nil {
		if !(*body.ArtifactVisibility == "meeting_hosts" || *body.ArtifactVisibility == "meeting_participants" || *body.ArtifactVisibility == "public") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.artifact_visibility", *body.ArtifactVisibility, []any{"meeting_hosts", "meeting_participants", "public"}))
		}
	}
	if body.ZoomConfig != nil {
		if err2 := ValidateZoomConfigFullResponseBody(body.ZoomConfig); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	for _, e := range body.Occurrences {
		if e != nil {
			if err2 := ValidateOccurrenceResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateGetMeetingResponseBody runs the validations defined on
// Get-MeetingResponseBody
func ValidateGetMeetingResponseBody(body *GetMeetingResponseBody) (err error) {
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.ProjectUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.project_uid", *body.ProjectUID, goa.FormatUUID))
	}
	if body.StartTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.start_time", *body.StartTime, goa.FormatDateTime))
	}
	if body.Duration != nil {
		if *body.Duration < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.duration", *body.Duration, 0, true))
		}
	}
	if body.Duration != nil {
		if *body.Duration > 600 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.duration", *body.Duration, 600, false))
		}
	}
	if body.Recurrence != nil {
		if err2 := ValidateRecurrenceResponseBody(body.Recurrence); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	for _, e := range body.Committees {
		if e != nil {
			if err2 := ValidateCommitteeResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.Platform != nil {
		if !(*body.Platform == "Zoom") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.platform", *body.Platform, []any{"Zoom"}))
		}
	}
	if body.EarlyJoinTimeMinutes != nil {
		if *body.EarlyJoinTimeMinutes < 10 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.early_join_time_minutes", *body.EarlyJoinTimeMinutes, 10, true))
		}
	}
	if body.EarlyJoinTimeMinutes != nil {
		if *body.EarlyJoinTimeMinutes > 60 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.early_join_time_minutes", *body.EarlyJoinTimeMinutes, 60, false))
		}
	}
	if body.MeetingType != nil {
		if !(*body.MeetingType == "Board" || *body.MeetingType == "Maintainers" || *body.MeetingType == "Marketing" || *body.MeetingType == "Technical" || *body.MeetingType == "Legal" || *body.MeetingType == "Other" || *body.MeetingType == "None") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.meeting_type", *body.MeetingType, []any{"Board", "Maintainers", "Marketing", "Technical", "Legal", "Other", "None"}))
		}
	}
	if body.Visibility != nil {
		if !(*body.Visibility == "public" || *body.Visibility == "private") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.visibility", *body.Visibility, []any{"public", "private"}))
		}
	}
	if body.ArtifactVisibility != nil {
		if !(*body.ArtifactVisibility == "meeting_hosts" || *body.ArtifactVisibility == "meeting_participants" || *body.ArtifactVisibility == "public") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.artifact_visibility", *body.ArtifactVisibility, []any{"meeting_hosts", "meeting_participants", "public"}))
		}
	}
	if body.ZoomConfig != nil {
		if err2 := ValidateZoomConfigFullResponseBody(body.ZoomConfig); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	for _, e := range body.Occurrences {
		if e != nil {
			if err2 := ValidateOccurrenceResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateUpdateMeetingResponseBody runs the validations defined on
// Update-MeetingResponseBody
func ValidateUpdateMeetingResponseBody(body *UpdateMeetingResponseBody) (err error) {
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.ProjectUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.project_uid", *body.ProjectUID, goa.FormatUUID))
	}
	if body.StartTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.start_time", *body.StartTime, goa.FormatDateTime))
	}
	if body.Duration != nil {
		if *body.Duration < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.duration", *body.Duration, 0, true))
		}
	}
	if body.Duration != nil {
		if *body.Duration > 600 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.duration", *body.Duration, 600, false))
		}
	}
	if body.Recurrence != nil {
		if err2 := ValidateRecurrenceResponseBody(body.Recurrence); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	for _, e := range body.Committees {
		if e != nil {
			if err2 := ValidateCommitteeResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.Platform != nil {
		if !(*body.Platform == "Zoom") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.platform", *body.Platform, []any{"Zoom"}))
		}
	}
	if body.EarlyJoinTimeMinutes != nil {
		if *body.EarlyJoinTimeMinutes < 10 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.early_join_time_minutes", *body.EarlyJoinTimeMinutes, 10, true))
		}
	}
	if body.EarlyJoinTimeMinutes != nil {
		if *body.EarlyJoinTimeMinutes > 60 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.early_join_time_minutes", *body.EarlyJoinTimeMinutes, 60, false))
		}
	}
	if body.MeetingType != nil {
		if !(*body.MeetingType == "Board" || *body.MeetingType == "Maintainers" || *body.MeetingType == "Marketing" || *body.MeetingType == "Technical" || *body.MeetingType == "Legal" || *body.MeetingType == "Other" || *body.MeetingType == "None") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.meeting_type", *body.MeetingType, []any{"Board", "Maintainers", "Marketing", "Technical", "Legal", "Other", "None"}))
		}
	}
	if body.Visibility != nil {
		if !(*body.Visibility == "public" || *body.Visibility == "private") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.visibility", *body.Visibility, []any{"public", "private"}))
		}
	}
	if body.ArtifactVisibility != nil {
		if !(*body.ArtifactVisibility == "meeting_hosts" || *body.ArtifactVisibility == "meeting_participants" || *body.ArtifactVisibility == "public") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.artifact_visibility", *body.ArtifactVisibility, []any{"meeting_hosts", "meeting_participants", "public"}))
		}
	}
	if body.ZoomConfig != nil {
		if err2 := ValidateZoomConfigFullResponseBody(body.ZoomConfig); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	for _, e := range body.Occurrences {
		if e != nil {
			if err2 := ValidateOccurrenceResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateGetMeetingRegistrantsResponseBody runs the validations defined on
// Get-Meeting-RegistrantsResponseBody
func ValidateGetMeetingRegistrantsResponseBody(body *GetMeetingRegistrantsResponseBody) (err error) {
	if body.Registrants == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("registrants", "body"))
	}
	for _, e := range body.Registrants {
		if e != nil {
			if err2 := ValidateRegistrantResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateCreateMeetingRegistrantResponseBody runs the validations defined on
// Create-Meeting-RegistrantResponseBody
func ValidateCreateMeetingRegistrantResponseBody(body *CreateMeetingRegistrantResponseBody) (err error) {
	if body.UID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uid", "body"))
	}
	if body.MeetingUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("meeting_uid", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.FirstName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("first_name", "body"))
	}
	if body.LastName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("last_name", "body"))
	}
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.MeetingUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.meeting_uid", *body.MeetingUID, goa.FormatUUID))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	if body.FirstName != nil {
		if utf8.RuneCountInString(*body.FirstName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.first_name", *body.FirstName, utf8.RuneCountInString(*body.FirstName), 1, true))
		}
	}
	if body.FirstName != nil {
		if utf8.RuneCountInString(*body.FirstName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.first_name", *body.FirstName, utf8.RuneCountInString(*body.FirstName), 100, false))
		}
	}
	if body.LastName != nil {
		if utf8.RuneCountInString(*body.LastName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.last_name", *body.LastName, utf8.RuneCountInString(*body.LastName), 1, true))
		}
	}
	if body.LastName != nil {
		if utf8.RuneCountInString(*body.LastName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.last_name", *body.LastName, utf8.RuneCountInString(*body.LastName), 100, false))
		}
	}
	if body.OccurrenceID != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.occurrence_id", *body.OccurrenceID, "^[0-9]*$"))
	}
	if body.AvatarURL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.avatar_url", *body.AvatarURL, goa.FormatURI))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateGetMeetingRegistrantResponseBody runs the validations defined on
// Get-Meeting-RegistrantResponseBody
func ValidateGetMeetingRegistrantResponseBody(body *GetMeetingRegistrantResponseBody) (err error) {
	if body.UID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uid", "body"))
	}
	if body.MeetingUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("meeting_uid", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.FirstName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("first_name", "body"))
	}
	if body.LastName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("last_name", "body"))
	}
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.MeetingUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.meeting_uid", *body.MeetingUID, goa.FormatUUID))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	if body.FirstName != nil {
		if utf8.RuneCountInString(*body.FirstName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.first_name", *body.FirstName, utf8.RuneCountInString(*body.FirstName), 1, true))
		}
	}
	if body.FirstName != nil {
		if utf8.RuneCountInString(*body.FirstName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.first_name", *body.FirstName, utf8.RuneCountInString(*body.FirstName), 100, false))
		}
	}
	if body.LastName != nil {
		if utf8.RuneCountInString(*body.LastName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.last_name", *body.LastName, utf8.RuneCountInString(*body.LastName), 1, true))
		}
	}
	if body.LastName != nil {
		if utf8.RuneCountInString(*body.LastName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.last_name", *body.LastName, utf8.RuneCountInString(*body.LastName), 100, false))
		}
	}
	if body.OccurrenceID != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.occurrence_id", *body.OccurrenceID, "^[0-9]*$"))
	}
	if body.AvatarURL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.avatar_url", *body.AvatarURL, goa.FormatURI))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateUpdateMeetingRegistrantResponseBody runs the validations defined on
// Update-Meeting-RegistrantResponseBody
func ValidateUpdateMeetingRegistrantResponseBody(body *UpdateMeetingRegistrantResponseBody) (err error) {
	if body.UID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uid", "body"))
	}
	if body.MeetingUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("meeting_uid", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.FirstName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("first_name", "body"))
	}
	if body.LastName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("last_name", "body"))
	}
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.MeetingUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.meeting_uid", *body.MeetingUID, goa.FormatUUID))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	if body.FirstName != nil {
		if utf8.RuneCountInString(*body.FirstName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.first_name", *body.FirstName, utf8.RuneCountInString(*body.FirstName), 1, true))
		}
	}
	if body.FirstName != nil {
		if utf8.RuneCountInString(*body.FirstName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.first_name", *body.FirstName, utf8.RuneCountInString(*body.FirstName), 100, false))
		}
	}
	if body.LastName != nil {
		if utf8.RuneCountInString(*body.LastName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.last_name", *body.LastName, utf8.RuneCountInString(*body.LastName), 1, true))
		}
	}
	if body.LastName != nil {
		if utf8.RuneCountInString(*body.LastName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.last_name", *body.LastName, utf8.RuneCountInString(*body.LastName), 100, false))
		}
	}
	if body.OccurrenceID != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.occurrence_id", *body.OccurrenceID, "^[0-9]*$"))
	}
	if body.AvatarURL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.avatar_url", *body.AvatarURL, goa.FormatURI))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateGetMeetingsBadRequestResponseBody runs the validations defined on
// get-meetings_BadRequest_response_body
func ValidateGetMeetingsBadRequestResponseBody(body *GetMeetingsBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetMeetingsInternalServerErrorResponseBody runs the validations
// defined on get-meetings_InternalServerError_response_body
func ValidateGetMeetingsInternalServerErrorResponseBody(body *GetMeetingsInternalServerErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetMeetingsServiceUnavailableResponseBody runs the validations
// defined on get-meetings_ServiceUnavailable_response_body
func ValidateGetMeetingsServiceUnavailableResponseBody(body *GetMeetingsServiceUnavailableResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateMeetingBadRequestResponseBody runs the validations defined on
// create-meeting_BadRequest_response_body
func ValidateCreateMeetingBadRequestResponseBody(body *CreateMeetingBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateMeetingConflictResponseBody runs the validations defined on
// create-meeting_Conflict_response_body
func ValidateCreateMeetingConflictResponseBody(body *CreateMeetingConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateMeetingInternalServerErrorResponseBody runs the validations
// defined on create-meeting_InternalServerError_response_body
func ValidateCreateMeetingInternalServerErrorResponseBody(body *CreateMeetingInternalServerErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateMeetingServiceUnavailableResponseBody runs the validations
// defined on create-meeting_ServiceUnavailable_response_body
func ValidateCreateMeetingServiceUnavailableResponseBody(body *CreateMeetingServiceUnavailableResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetMeetingInternalServerErrorResponseBody runs the validations
// defined on get-meeting_InternalServerError_response_body
func ValidateGetMeetingInternalServerErrorResponseBody(body *GetMeetingInternalServerErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetMeetingNotFoundResponseBody runs the validations defined on
// get-meeting_NotFound_response_body
func ValidateGetMeetingNotFoundResponseBody(body *GetMeetingNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetMeetingServiceUnavailableResponseBody runs the validations
// defined on get-meeting_ServiceUnavailable_response_body
func ValidateGetMeetingServiceUnavailableResponseBody(body *GetMeetingServiceUnavailableResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateMeetingBadRequestResponseBody runs the validations defined on
// update-meeting_BadRequest_response_body
func ValidateUpdateMeetingBadRequestResponseBody(body *UpdateMeetingBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateMeetingConflictResponseBody runs the validations defined on
// update-meeting_Conflict_response_body
func ValidateUpdateMeetingConflictResponseBody(body *UpdateMeetingConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateMeetingInternalServerErrorResponseBody runs the validations
// defined on update-meeting_InternalServerError_response_body
func ValidateUpdateMeetingInternalServerErrorResponseBody(body *UpdateMeetingInternalServerErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateMeetingNotFoundResponseBody runs the validations defined on
// update-meeting_NotFound_response_body
func ValidateUpdateMeetingNotFoundResponseBody(body *UpdateMeetingNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateMeetingServiceUnavailableResponseBody runs the validations
// defined on update-meeting_ServiceUnavailable_response_body
func ValidateUpdateMeetingServiceUnavailableResponseBody(body *UpdateMeetingServiceUnavailableResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteMeetingBadRequestResponseBody runs the validations defined on
// delete-meeting_BadRequest_response_body
func ValidateDeleteMeetingBadRequestResponseBody(body *DeleteMeetingBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteMeetingInternalServerErrorResponseBody runs the validations
// defined on delete-meeting_InternalServerError_response_body
func ValidateDeleteMeetingInternalServerErrorResponseBody(body *DeleteMeetingInternalServerErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteMeetingNotFoundResponseBody runs the validations defined on
// delete-meeting_NotFound_response_body
func ValidateDeleteMeetingNotFoundResponseBody(body *DeleteMeetingNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteMeetingServiceUnavailableResponseBody runs the validations
// defined on delete-meeting_ServiceUnavailable_response_body
func ValidateDeleteMeetingServiceUnavailableResponseBody(body *DeleteMeetingServiceUnavailableResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetMeetingRegistrantsInternalServerErrorResponseBody runs the
// validations defined on
// get-meeting-registrants_InternalServerError_response_body
func ValidateGetMeetingRegistrantsInternalServerErrorResponseBody(body *GetMeetingRegistrantsInternalServerErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetMeetingRegistrantsNotFoundResponseBody runs the validations
// defined on get-meeting-registrants_NotFound_response_body
func ValidateGetMeetingRegistrantsNotFoundResponseBody(body *GetMeetingRegistrantsNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetMeetingRegistrantsServiceUnavailableResponseBody runs the
// validations defined on
// get-meeting-registrants_ServiceUnavailable_response_body
func ValidateGetMeetingRegistrantsServiceUnavailableResponseBody(body *GetMeetingRegistrantsServiceUnavailableResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateMeetingRegistrantBadRequestResponseBody runs the validations
// defined on create-meeting-registrant_BadRequest_response_body
func ValidateCreateMeetingRegistrantBadRequestResponseBody(body *CreateMeetingRegistrantBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateMeetingRegistrantConflictResponseBody runs the validations
// defined on create-meeting-registrant_Conflict_response_body
func ValidateCreateMeetingRegistrantConflictResponseBody(body *CreateMeetingRegistrantConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateMeetingRegistrantInternalServerErrorResponseBody runs the
// validations defined on
// create-meeting-registrant_InternalServerError_response_body
func ValidateCreateMeetingRegistrantInternalServerErrorResponseBody(body *CreateMeetingRegistrantInternalServerErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateMeetingRegistrantNotFoundResponseBody runs the validations
// defined on create-meeting-registrant_NotFound_response_body
func ValidateCreateMeetingRegistrantNotFoundResponseBody(body *CreateMeetingRegistrantNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateMeetingRegistrantServiceUnavailableResponseBody runs the
// validations defined on
// create-meeting-registrant_ServiceUnavailable_response_body
func ValidateCreateMeetingRegistrantServiceUnavailableResponseBody(body *CreateMeetingRegistrantServiceUnavailableResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetMeetingRegistrantInternalServerErrorResponseBody runs the
// validations defined on
// get-meeting-registrant_InternalServerError_response_body
func ValidateGetMeetingRegistrantInternalServerErrorResponseBody(body *GetMeetingRegistrantInternalServerErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetMeetingRegistrantNotFoundResponseBody runs the validations
// defined on get-meeting-registrant_NotFound_response_body
func ValidateGetMeetingRegistrantNotFoundResponseBody(body *GetMeetingRegistrantNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetMeetingRegistrantServiceUnavailableResponseBody runs the
// validations defined on
// get-meeting-registrant_ServiceUnavailable_response_body
func ValidateGetMeetingRegistrantServiceUnavailableResponseBody(body *GetMeetingRegistrantServiceUnavailableResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateMeetingRegistrantBadRequestResponseBody runs the validations
// defined on update-meeting-registrant_BadRequest_response_body
func ValidateUpdateMeetingRegistrantBadRequestResponseBody(body *UpdateMeetingRegistrantBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateMeetingRegistrantConflictResponseBody runs the validations
// defined on update-meeting-registrant_Conflict_response_body
func ValidateUpdateMeetingRegistrantConflictResponseBody(body *UpdateMeetingRegistrantConflictResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateMeetingRegistrantInternalServerErrorResponseBody runs the
// validations defined on
// update-meeting-registrant_InternalServerError_response_body
func ValidateUpdateMeetingRegistrantInternalServerErrorResponseBody(body *UpdateMeetingRegistrantInternalServerErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateMeetingRegistrantNotFoundResponseBody runs the validations
// defined on update-meeting-registrant_NotFound_response_body
func ValidateUpdateMeetingRegistrantNotFoundResponseBody(body *UpdateMeetingRegistrantNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateMeetingRegistrantServiceUnavailableResponseBody runs the
// validations defined on
// update-meeting-registrant_ServiceUnavailable_response_body
func ValidateUpdateMeetingRegistrantServiceUnavailableResponseBody(body *UpdateMeetingRegistrantServiceUnavailableResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteMeetingRegistrantBadRequestResponseBody runs the validations
// defined on delete-meeting-registrant_BadRequest_response_body
func ValidateDeleteMeetingRegistrantBadRequestResponseBody(body *DeleteMeetingRegistrantBadRequestResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteMeetingRegistrantInternalServerErrorResponseBody runs the
// validations defined on
// delete-meeting-registrant_InternalServerError_response_body
func ValidateDeleteMeetingRegistrantInternalServerErrorResponseBody(body *DeleteMeetingRegistrantInternalServerErrorResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteMeetingRegistrantNotFoundResponseBody runs the validations
// defined on delete-meeting-registrant_NotFound_response_body
func ValidateDeleteMeetingRegistrantNotFoundResponseBody(body *DeleteMeetingRegistrantNotFoundResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteMeetingRegistrantServiceUnavailableResponseBody runs the
// validations defined on
// delete-meeting-registrant_ServiceUnavailable_response_body
func ValidateDeleteMeetingRegistrantServiceUnavailableResponseBody(body *DeleteMeetingRegistrantServiceUnavailableResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateReadyzServiceUnavailableResponseBody runs the validations defined on
// readyz_ServiceUnavailable_response_body
func ValidateReadyzServiceUnavailableResponseBody(body *ReadyzServiceUnavailableResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateMeetingResponseBody runs the validations defined on
// MeetingResponseBody
func ValidateMeetingResponseBody(body *MeetingResponseBody) (err error) {
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.ProjectUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.project_uid", *body.ProjectUID, goa.FormatUUID))
	}
	if body.StartTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.start_time", *body.StartTime, goa.FormatDateTime))
	}
	if body.Duration != nil {
		if *body.Duration < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.duration", *body.Duration, 0, true))
		}
	}
	if body.Duration != nil {
		if *body.Duration > 600 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.duration", *body.Duration, 600, false))
		}
	}
	if body.Recurrence != nil {
		if err2 := ValidateRecurrenceResponseBody(body.Recurrence); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	for _, e := range body.Committees {
		if e != nil {
			if err2 := ValidateCommitteeResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.Platform != nil {
		if !(*body.Platform == "Zoom") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.platform", *body.Platform, []any{"Zoom"}))
		}
	}
	if body.EarlyJoinTimeMinutes != nil {
		if *body.EarlyJoinTimeMinutes < 10 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.early_join_time_minutes", *body.EarlyJoinTimeMinutes, 10, true))
		}
	}
	if body.EarlyJoinTimeMinutes != nil {
		if *body.EarlyJoinTimeMinutes > 60 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.early_join_time_minutes", *body.EarlyJoinTimeMinutes, 60, false))
		}
	}
	if body.MeetingType != nil {
		if !(*body.MeetingType == "Board" || *body.MeetingType == "Maintainers" || *body.MeetingType == "Marketing" || *body.MeetingType == "Technical" || *body.MeetingType == "Legal" || *body.MeetingType == "Other" || *body.MeetingType == "None") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.meeting_type", *body.MeetingType, []any{"Board", "Maintainers", "Marketing", "Technical", "Legal", "Other", "None"}))
		}
	}
	if body.Visibility != nil {
		if !(*body.Visibility == "public" || *body.Visibility == "private") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.visibility", *body.Visibility, []any{"public", "private"}))
		}
	}
	if body.ArtifactVisibility != nil {
		if !(*body.ArtifactVisibility == "meeting_hosts" || *body.ArtifactVisibility == "meeting_participants" || *body.ArtifactVisibility == "public") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.artifact_visibility", *body.ArtifactVisibility, []any{"meeting_hosts", "meeting_participants", "public"}))
		}
	}
	if body.ZoomConfig != nil {
		if err2 := ValidateZoomConfigFullResponseBody(body.ZoomConfig); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	for _, e := range body.Occurrences {
		if e != nil {
			if err2 := ValidateOccurrenceResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateRecurrenceResponseBody runs the validations defined on
// RecurrenceResponseBody
func ValidateRecurrenceResponseBody(body *RecurrenceResponseBody) (err error) {
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.RepeatInterval == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("repeat_interval", "body"))
	}
	if body.Type != nil {
		if !(*body.Type == 1 || *body.Type == 2 || *body.Type == 3) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []any{1, 2, 3}))
		}
	}
	if body.WeeklyDays != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.weekly_days", *body.WeeklyDays, "^[1-7](,[1-7])*$"))
	}
	if body.MonthlyDay != nil {
		if *body.MonthlyDay < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.monthly_day", *body.MonthlyDay, 1, true))
		}
	}
	if body.MonthlyDay != nil {
		if *body.MonthlyDay > 31 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.monthly_day", *body.MonthlyDay, 31, false))
		}
	}
	if body.MonthlyWeek != nil {
		if !(*body.MonthlyWeek == -1 || *body.MonthlyWeek == 1 || *body.MonthlyWeek == 2 || *body.MonthlyWeek == 3 || *body.MonthlyWeek == 4) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.monthly_week", *body.MonthlyWeek, []any{-1, 1, 2, 3, 4}))
		}
	}
	if body.MonthlyWeekDay != nil {
		if !(*body.MonthlyWeekDay == 1 || *body.MonthlyWeekDay == 2 || *body.MonthlyWeekDay == 3 || *body.MonthlyWeekDay == 4 || *body.MonthlyWeekDay == 5 || *body.MonthlyWeekDay == 6 || *body.MonthlyWeekDay == 7) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.monthly_week_day", *body.MonthlyWeekDay, []any{1, 2, 3, 4, 5, 6, 7}))
		}
	}
	if body.EndDateTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.end_date_time", *body.EndDateTime, goa.FormatDateTime))
	}
	return
}

// ValidateCommitteeResponseBody runs the validations defined on
// CommitteeResponseBody
func ValidateCommitteeResponseBody(body *CommitteeResponseBody) (err error) {
	if body.UID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uid", "body"))
	}
	if body.AllowedVotingStatuses == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("allowed_voting_statuses", "body"))
	}
	return
}

// ValidateZoomConfigFullResponseBody runs the validations defined on
// ZoomConfigFullResponseBody
func ValidateZoomConfigFullResponseBody(body *ZoomConfigFullResponseBody) (err error) {
	if body.MeetingID != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.meeting_id", *body.MeetingID, "^\\d{9,11}$"))
	}
	if body.MeetingID != nil {
		if utf8.RuneCountInString(*body.MeetingID) < 9 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.meeting_id", *body.MeetingID, utf8.RuneCountInString(*body.MeetingID), 9, true))
		}
	}
	if body.MeetingID != nil {
		if utf8.RuneCountInString(*body.MeetingID) > 11 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.meeting_id", *body.MeetingID, utf8.RuneCountInString(*body.MeetingID), 11, false))
		}
	}
	return
}

// ValidateOccurrenceResponseBody runs the validations defined on
// OccurrenceResponseBody
func ValidateOccurrenceResponseBody(body *OccurrenceResponseBody) (err error) {
	if body.StartTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.start_time", *body.StartTime, goa.FormatDateTime))
	}
	if body.Recurrence != nil {
		if err2 := ValidateRecurrenceResponseBody(body.Recurrence); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Status != nil {
		if !(*body.Status == "active" || *body.Status == "cancelled") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []any{"active", "cancelled"}))
		}
	}
	return
}

// ValidateRecurrenceRequestBody runs the validations defined on
// RecurrenceRequestBody
func ValidateRecurrenceRequestBody(body *RecurrenceRequestBody) (err error) {
	if !(body.Type == 1 || body.Type == 2 || body.Type == 3) {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", body.Type, []any{1, 2, 3}))
	}
	if body.WeeklyDays != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.weekly_days", *body.WeeklyDays, "^[1-7](,[1-7])*$"))
	}
	if body.MonthlyDay != nil {
		if *body.MonthlyDay < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.monthly_day", *body.MonthlyDay, 1, true))
		}
	}
	if body.MonthlyDay != nil {
		if *body.MonthlyDay > 31 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.monthly_day", *body.MonthlyDay, 31, false))
		}
	}
	if body.MonthlyWeek != nil {
		if !(*body.MonthlyWeek == -1 || *body.MonthlyWeek == 1 || *body.MonthlyWeek == 2 || *body.MonthlyWeek == 3 || *body.MonthlyWeek == 4) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.monthly_week", *body.MonthlyWeek, []any{-1, 1, 2, 3, 4}))
		}
	}
	if body.MonthlyWeekDay != nil {
		if !(*body.MonthlyWeekDay == 1 || *body.MonthlyWeekDay == 2 || *body.MonthlyWeekDay == 3 || *body.MonthlyWeekDay == 4 || *body.MonthlyWeekDay == 5 || *body.MonthlyWeekDay == 6 || *body.MonthlyWeekDay == 7) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.monthly_week_day", *body.MonthlyWeekDay, []any{1, 2, 3, 4, 5, 6, 7}))
		}
	}
	if body.EndDateTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.end_date_time", *body.EndDateTime, goa.FormatDateTime))
	}
	return
}

// ValidateCommitteeRequestBody runs the validations defined on
// CommitteeRequestBody
func ValidateCommitteeRequestBody(body *CommitteeRequestBody) (err error) {
	if body.AllowedVotingStatuses == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("allowed_voting_statuses", "body"))
	}
	return
}

// ValidateRegistrantResponseBody runs the validations defined on
// RegistrantResponseBody
func ValidateRegistrantResponseBody(body *RegistrantResponseBody) (err error) {
	if body.UID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uid", "body"))
	}
	if body.MeetingUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("meeting_uid", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.FirstName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("first_name", "body"))
	}
	if body.LastName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("last_name", "body"))
	}
	if body.UID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.uid", *body.UID, goa.FormatUUID))
	}
	if body.MeetingUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.meeting_uid", *body.MeetingUID, goa.FormatUUID))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	if body.FirstName != nil {
		if utf8.RuneCountInString(*body.FirstName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.first_name", *body.FirstName, utf8.RuneCountInString(*body.FirstName), 1, true))
		}
	}
	if body.FirstName != nil {
		if utf8.RuneCountInString(*body.FirstName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.first_name", *body.FirstName, utf8.RuneCountInString(*body.FirstName), 100, false))
		}
	}
	if body.LastName != nil {
		if utf8.RuneCountInString(*body.LastName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.last_name", *body.LastName, utf8.RuneCountInString(*body.LastName), 1, true))
		}
	}
	if body.LastName != nil {
		if utf8.RuneCountInString(*body.LastName) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.last_name", *body.LastName, utf8.RuneCountInString(*body.LastName), 100, false))
		}
	}
	if body.OccurrenceID != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.occurrence_id", *body.OccurrenceID, "^[0-9]*$"))
	}
	if body.AvatarURL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.avatar_url", *body.AvatarURL, goa.FormatURI))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}
