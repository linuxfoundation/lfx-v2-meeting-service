// Code generated by goa v3.21.1, DO NOT EDIT.
//
// Meeting Service service
//
// Command:
// $ goa gen github.com/linuxfoundation/lfx-v2-meeting-service/design

package meetingservice

import (
	"context"

	"goa.design/goa/v3/security"
)

// The meeting service handles all meeting-related operations for LF projects.
type Service interface {
	// Get all meetings.
	GetMeetings(context.Context, *GetMeetingsPayload) (res *GetMeetingsResult, err error)
	// Create a new meeting for a project. An actual meeting in the specific
	// platform will be created by
	// this endpoint. The meeting's occurrences and registrants are managed by this
	// service rather than the third-party platform.
	CreateMeeting(context.Context, *CreateMeetingPayload) (res *Meeting, err error)
	// Get a meeting by ID
	GetMeeting(context.Context, *GetMeetingPayload) (res *GetMeetingResult, err error)
	// Update an existing meeting.
	UpdateMeeting(context.Context, *UpdateMeetingPayload) (res *Meeting, err error)
	// Delete an existing meeting.
	DeleteMeeting(context.Context, *DeleteMeetingPayload) (err error)
	// Get all registrants for a meeting
	GetMeetingRegistrants(context.Context, *GetMeetingRegistrantsPayload) (res *GetMeetingRegistrantsResult, err error)
	// Create a new registrant for a meeting
	CreateMeetingRegistrant(context.Context, *CreateMeetingRegistrantPayload) (res *Registrant, err error)
	// Get a specific registrant for a meeting by UID
	GetMeetingRegistrant(context.Context, *GetMeetingRegistrantPayload) (res *GetMeetingRegistrantResult, err error)
	// Update an existing registrant for a meeting
	UpdateMeetingRegistrant(context.Context, *UpdateMeetingRegistrantPayload) (res *Registrant, err error)
	// Delete a registrant from a meeting
	DeleteMeetingRegistrant(context.Context, *DeleteMeetingRegistrantPayload) (err error)
	// Check if the service is able to take inbound requests.
	Readyz(context.Context) (res []byte, err error)
	// Check if the service is alive.
	Livez(context.Context) (res []byte, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// APIName is the name of the API as defined in the design.
const APIName = "Meeting Service"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "Meeting Service"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [12]string{"get-meetings", "create-meeting", "get-meeting", "update-meeting", "delete-meeting", "get-meeting-registrants", "create-meeting-registrant", "get-meeting-registrant", "update-meeting-registrant", "delete-meeting-registrant", "readyz", "livez"}

type BadRequestError struct {
	// HTTP status code
	Code string
	// Error message
	Message string
}

// Committee data for association with meeting
type Committee struct {
	// The UID of the committee
	UID string
	// The committee voting statuses required for committee members to be added to
	// the meeting
	AllowedVotingStatuses []string
}

type ConflictError struct {
	// HTTP status code
	Code string
	// Error message
	Message string
}

// CreateMeetingPayload is the payload type of the Meeting Service service
// create-meeting method.
type CreateMeetingPayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// Version of the API
	Version *string
	// The UID of the LF project
	ProjectUID string
	// The start time of the meeting in RFC3339 format
	StartTime string
	// The duration of the meeting in minutes
	Duration int
	// The timezone of the meeting (e.g. 'America/New_York')
	Timezone string
	// The recurrence of the meeting
	Recurrence *Recurrence
	// The title of the meeting
	Title string
	// The description of the meeting
	Description string
	// The committees associated with the meeting
	Committees []*Committee
	// The platform name of where the meeting is hosted
	Platform *string
	// The number of minutes that users are allowed to join the meeting early
	// without being kicked out
	EarlyJoinTimeMinutes *int
	// The type of meeting. This is usually dependent on the committee(s)
	// associated with the meeting
	MeetingType *string
	// The visibility of the meeting's existence to other users
	Visibility *string
	// The restrictedness of joining the meeting (i.e. is the meeting restricted to
	// only invited users or anyone?)
	Restricted *bool
	// The visibility of artifacts to users (e.g. public, only for registrants,
	// only for hosts)
	ArtifactVisibility *string
	// The public join URL for participants to join the meeting via the LFX
	// platform (e.g.
	// 'https://zoom-lfx.platform.linuxfoundation.org/meeting/12343245463')
	PublicLink *string
	// Whether recording is enabled for the meeting
	RecordingEnabled *bool
	// Whether transcription is enabled for the meeting
	TranscriptEnabled *bool
	// Whether automatic youtube uploading is enabled for the meeting
	YoutubeUploadEnabled *bool
	// For zoom platform meetings: the configuration for the meeting
	ZoomConfig *ZoomConfigPost
}

// CreateMeetingRegistrantPayload is the payload type of the Meeting Service
// service create-meeting-registrant method.
type CreateMeetingRegistrantPayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// Version of the API
	Version *string
	// The UID of the meeting
	MeetingUID string
	// User's email address
	Email string
	// User's first name
	FirstName string
	// User's last name
	LastName string
	// If user should have access as a meeting host
	Host *bool
	// User's job title
	JobTitle *string
	// User's organization
	OrgName *string
	// The ID of the specific occurrence the user should be invited to. If blank,
	// user is invited to all occurrences
	OccurrenceID *string
	// User's avatar URL
	AvatarURL *string
	// User's LF ID
	Username *string
}

// DeleteMeetingPayload is the payload type of the Meeting Service service
// delete-meeting method.
type DeleteMeetingPayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// ETag header value
	Etag *string
	// Version of the API
	Version *string
	// The UID of the meeting
	UID *string
}

// DeleteMeetingRegistrantPayload is the payload type of the Meeting Service
// service delete-meeting-registrant method.
type DeleteMeetingRegistrantPayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// ETag header value
	Etag *string
	// Version of the API
	Version *string
	// The UID of the meeting
	MeetingUID *string
	// The UID of the registrant
	UID *string
}

// GetMeetingPayload is the payload type of the Meeting Service service
// get-meeting method.
type GetMeetingPayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// Version of the API
	Version *string
	// The UID of the meeting
	UID *string
}

// GetMeetingRegistrantPayload is the payload type of the Meeting Service
// service get-meeting-registrant method.
type GetMeetingRegistrantPayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// Version of the API
	Version *string
	// The UID of the meeting
	MeetingUID *string
	// The UID of the registrant
	UID *string
}

// GetMeetingRegistrantResult is the result type of the Meeting Service service
// get-meeting-registrant method.
type GetMeetingRegistrantResult struct {
	Registrant *Registrant
	// ETag header value
	Etag *string
}

// GetMeetingRegistrantsPayload is the payload type of the Meeting Service
// service get-meeting-registrants method.
type GetMeetingRegistrantsPayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// Version of the API
	Version *string
	// The UID of the meeting
	UID *string
}

// GetMeetingRegistrantsResult is the result type of the Meeting Service
// service get-meeting-registrants method.
type GetMeetingRegistrantsResult struct {
	// Meeting registrants
	Registrants []*Registrant
	// Cache control header
	CacheControl *string
}

// GetMeetingResult is the result type of the Meeting Service service
// get-meeting method.
type GetMeetingResult struct {
	Meeting *Meeting
	// ETag header value
	Etag *string
}

// GetMeetingsPayload is the payload type of the Meeting Service service
// get-meetings method.
type GetMeetingsPayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// Version of the API
	Version *string
}

// GetMeetingsResult is the result type of the Meeting Service service
// get-meetings method.
type GetMeetingsResult struct {
	// Resources found
	Meetings []*Meeting
	// Cache control header
	CacheControl *string
}

type InternalServerError struct {
	// HTTP status code
	Code string
	// Error message
	Message string
}

// Meeting is the result type of the Meeting Service service create-meeting
// method.
type Meeting struct {
	// The UID of the meeting
	UID *string
	// The UID of the LF project
	ProjectUID *string
	// The start time of the meeting in RFC3339 format
	StartTime *string
	// The duration of the meeting in minutes
	Duration *int
	// The timezone of the meeting (e.g. 'America/New_York')
	Timezone *string
	// The recurrence of the meeting
	Recurrence *Recurrence
	// The title of the meeting
	Title *string
	// The description of the meeting
	Description *string
	// The committees associated with the meeting
	Committees []*Committee
	// The platform name of where the meeting is hosted
	Platform *string
	// The number of minutes that users are allowed to join the meeting early
	// without being kicked out
	EarlyJoinTimeMinutes *int
	// The type of meeting. This is usually dependent on the committee(s)
	// associated with the meeting
	MeetingType *string
	// The visibility of the meeting's existence to other users
	Visibility *string
	// The restrictedness of joining the meeting (i.e. is the meeting restricted to
	// only invited users or anyone?)
	Restricted *bool
	// The visibility of artifacts to users (e.g. public, only for registrants,
	// only for hosts)
	ArtifactVisibility *string
	// The public join URL for participants to join the meeting via the LFX
	// platform (e.g.
	// 'https://zoom-lfx.platform.linuxfoundation.org/meeting/12343245463')
	PublicLink *string
	// The number of registrants that have an email delivery error with their
	// invite. The delivery errors are counted as the last invite that was sent to
	// the registrant, so if a registrant previously had a delivery error but not
	// in their most recent invite received, then it does not count towards this
	// field value.
	EmailDeliveryErrorCount *int
	// Whether recording is enabled for the meeting
	RecordingEnabled *bool
	// Whether transcription is enabled for the meeting
	TranscriptEnabled *bool
	// Whether automatic youtube uploading is enabled for the meeting
	YoutubeUploadEnabled *bool
	// For zoom platform meetings: the configuration for the meeting
	ZoomConfig *ZoomConfigFull
	// The number of registrants for the meeting
	RegistrantCount *int
	// The number of registrants that have declined the meeting invitation
	RegistrantResponseDeclinedCount *int
	// The number of registrants that have accepted the meeting invitation
	RegistrantResponseAcceptedCount *int
	// Array of meeting occurrences (read-only from platform API)
	Occurrences []*Occurrence
	// The date and time the resource was created
	CreatedAt *string
	// The date and time the resource was last updated
	UpdatedAt *string
}

type NotFoundError struct {
	// HTTP status code
	Code string
	// Error message
	Message string
}

// Meeting occurrence object - read-only data from platform API
type Occurrence struct {
	// ID of the occurrence, also the start time in unix time
	OccurrenceID *string
	// GMT start time of occurrence
	StartTime *string
	// Meeting title for this occurrence
	Title *string
	// Meeting description for this occurrence
	Description *string
	// Occurrence duration in minutes
	Duration *int
	// The recurrence pattern for this occurrence onwards if there is one
	Recurrence *Recurrence
	// Number of registrants for this meeting occurrence
	RegistrantCount *int
	// Number of registrants who declined the invite for this occurrence
	ResponseCountNo *int
	// Number of registrants who accepted the invite for this occurrence
	ResponseCountYes *int
	// Occurrence status from platform
	Status *string
}

// Meeting recurrence object
type Recurrence struct {
	// The recurrence type
	Type int
	// Define the interval at which the meeting should recur.
	// For instance, if you would like to schedule a meeting that recurs every two
	// months,
	// you must set the value of this field as '2' and the value of the 'type'
	// parameter as '3'.
	// For a daily meeting, the maximum interval you can set is '90' days.
	// For a weekly meeting the maximum interval that you can set is of '12' weeks.
	// For a monthly meeting, there is a maximum of '3' months.
	RepeatInterval int
	// This field is required if you're scheduling a recurring meeting of type '2'
	// to state which day(s)
	// of the week the meeting should repeat. The value for this field could be a
	// number between '1' to '7' in string format.
	// For instance, if the meeting should recur on Sunday, provide '1' as the
	// value of this field.
	// If you would like the meeting to occur on multiple days of a week, you
	// should provide comma separated values for this field.
	// For instance, if the meeting should recur on Sundays and Tuesdays provide
	// '1,3' as the value of this field.
	// 1 - Sunday
	// 2 - Monday
	// 3 - Tuesday
	// 4 - Wednesday
	// 5 - Thursday
	// 6 - Friday
	// 7 - Saturday
	WeeklyDays *string
	// Use this field only if you're scheduling a recurring meeting of type '3' to
	// state which day in a month, the meeting should recur. The value range is
	// from 1 to 31. For instance, if you would like the meeting to recur on 23rd
	// of each month, provide '23' as the value of this field and '1' as the value
	// of the 'repeat_interval' field. Instead, if you would like the meeting to
	// recur every three months, on 23rd of the month, change the value of the
	// 'repeat_interval' field to '3'.
	MonthlyDay *int
	// Use this field only if you're scheduling a recurring meeting of type '3' to
	// state the week of the month when the meeting should recur. If you use this
	// field, you must also use the 'monthly_week_day' field to state the day of
	// the week when the meeting should recur. '-1' - Last week of the month. 1 -
	// First week of the month. 2 - Second week of the month. 3 - Third week of the
	// month. 4 - Fourth week of the month.
	MonthlyWeek *int
	// Use this field only if you're scheduling a recurring meeting of type '3' to
	// state a specific day in a week when the monthly meeting should recur. To use
	// this field, you must also use the 'monthly_week' field. 1 - Sunday 2 -
	// Monday 3 - Tuesday 4 - Wednesday 5 - Thursday 6 - Friday 7 - Saturday
	MonthlyWeekDay *int
	// Select how many times the meeting should recur before it is canceled. Cannot
	// be used with 'end_date_time'.
	EndTimes *int
	// Select the final date on which the meeting will recur before it is canceled.
	// Cannot be used with 'end_times'. should be in GMT. should be in
	// 'yyyy-MM-ddTHH:mm:ssZ' format.
	EndDateTime *string
}

// Registrant is the result type of the Meeting Service service
// create-meeting-registrant method.
type Registrant struct {
	// The UID of the registrant
	UID string
	// The UID of the meeting
	MeetingUID string
	// User's email address
	Email string
	// User's first name
	FirstName string
	// User's last name
	LastName string
	// If user should have access as a meeting host
	Host *bool
	// User's job title
	JobTitle *string
	// The ID of the specific occurrence the user should be invited to. If blank,
	// user is invited to all occurrences
	OccurrenceID *string
	// User's organization
	OrgName *string
	// Whether the registrant is in an organization that has a membership with the
	// LF. If unknown, don't pass this field; the API will find the value by default
	OrgIsMember *bool
	// Whether the registrant is in an organization that has a membership with the
	// project (of the meeting). If unknown, don't pass this field; the API will
	// find the value by default
	OrgIsProjectMember *bool
	// User's avatar URL
	AvatarURL *string
	// User's LF ID
	Username *string
	// The date and time the resource was created
	CreatedAt *string
	// The date and time the resource was last updated
	UpdatedAt *string
}

type ServiceUnavailableError struct {
	// HTTP status code
	Code string
	// Error message
	Message string
}

// UpdateMeetingPayload is the payload type of the Meeting Service service
// update-meeting method.
type UpdateMeetingPayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// ETag header value
	Etag *string
	// Version of the API
	Version *string
	// The UID of the meeting
	UID string
	// The UID of the LF project
	ProjectUID string
	// The start time of the meeting in RFC3339 format
	StartTime string
	// The duration of the meeting in minutes
	Duration int
	// The timezone of the meeting (e.g. 'America/New_York')
	Timezone string
	// The recurrence of the meeting
	Recurrence *Recurrence
	// The title of the meeting
	Title string
	// The description of the meeting
	Description string
	// The committees associated with the meeting
	Committees []*Committee
	// The platform name of where the meeting is hosted
	Platform *string
	// The number of minutes that users are allowed to join the meeting early
	// without being kicked out
	EarlyJoinTimeMinutes *int
	// The type of meeting. This is usually dependent on the committee(s)
	// associated with the meeting
	MeetingType *string
	// The visibility of the meeting's existence to other users
	Visibility *string
	// The restrictedness of joining the meeting (i.e. is the meeting restricted to
	// only invited users or anyone?)
	Restricted *bool
	// The visibility of artifacts to users (e.g. public, only for registrants,
	// only for hosts)
	ArtifactVisibility *string
	// The public join URL for participants to join the meeting via the LFX
	// platform (e.g.
	// 'https://zoom-lfx.platform.linuxfoundation.org/meeting/12343245463')
	PublicLink *string
	// Whether recording is enabled for the meeting
	RecordingEnabled *bool
	// Whether transcription is enabled for the meeting
	TranscriptEnabled *bool
	// Whether automatic youtube uploading is enabled for the meeting
	YoutubeUploadEnabled *bool
	// For zoom platform meetings: the configuration for the meeting
	ZoomConfig *ZoomConfigPost
}

// UpdateMeetingRegistrantPayload is the payload type of the Meeting Service
// service update-meeting-registrant method.
type UpdateMeetingRegistrantPayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// ETag header value
	Etag *string
	// Version of the API
	Version *string
	// The UID of the meeting
	MeetingUID string
	// The UID of the registrant
	UID *string
	// User's email address
	Email string
	// User's first name
	FirstName string
	// User's last name
	LastName string
	// If user should have access as a meeting host
	Host *bool
	// User's job title
	JobTitle *string
	// User's organization
	OrgName *string
	// The ID of the specific occurrence the user should be invited to. If blank,
	// user is invited to all occurrences
	OccurrenceID *string
	// User's avatar URL
	AvatarURL *string
	// User's LF ID
	Username *string
}

// Meeting attributes specific to Zoom platform that contain both writable and
// read-only attributes
type ZoomConfigFull struct {
	// The ID of the created meeting in Zoom
	MeetingID *string
	// For zoom platform meetings: whether Zoom AI companion is enabled
	AiCompanionEnabled *bool
	// For zoom platform meetings: whether AI summary approval is required
	AiSummaryRequireApproval *bool
}

// Meeting attributes specific to Zoom platform that are writable
type ZoomConfigPost struct {
	// For zoom platform meetings: whether Zoom AI companion is enabled
	AiCompanionEnabled *bool
	// For zoom platform meetings: whether AI summary approval is required
	AiSummaryRequireApproval *bool
}

// Error returns an error description.
func (e *BadRequestError) Error() string {
	return ""
}

// ErrorName returns "BadRequestError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *BadRequestError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "BadRequestError".
func (e *BadRequestError) GoaErrorName() string {
	return "BadRequest"
}

// Error returns an error description.
func (e *ConflictError) Error() string {
	return ""
}

// ErrorName returns "ConflictError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *ConflictError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "ConflictError".
func (e *ConflictError) GoaErrorName() string {
	return "Conflict"
}

// Error returns an error description.
func (e *InternalServerError) Error() string {
	return ""
}

// ErrorName returns "InternalServerError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *InternalServerError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "InternalServerError".
func (e *InternalServerError) GoaErrorName() string {
	return "InternalServerError"
}

// Error returns an error description.
func (e *NotFoundError) Error() string {
	return ""
}

// ErrorName returns "NotFoundError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *NotFoundError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "NotFoundError".
func (e *NotFoundError) GoaErrorName() string {
	return "NotFound"
}

// Error returns an error description.
func (e *ServiceUnavailableError) Error() string {
	return ""
}

// ErrorName returns "ServiceUnavailableError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *ServiceUnavailableError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "ServiceUnavailableError".
func (e *ServiceUnavailableError) GoaErrorName() string {
	return "ServiceUnavailable"
}
