// Code generated by goa v3.21.1, DO NOT EDIT.
//
// Meeting Service service
//
// Command:
// $ goa gen github.com/linuxfoundation/lfx-v2-meeting-service/design

package meetingservice

import (
	"context"

	"goa.design/goa/v3/security"
)

// The meeting service handles all meeting-related operations for LF projects.
type Service interface {
	// Get all meetings.
	GetMeetings(context.Context, *GetMeetingsPayload) (res *GetMeetingsResult, err error)
	// Create a new meeting for a project. An actual meeting in the specific
	// platform will be created by
	// this endpoint. The meeting's occurrences and registrants are managed by this
	// service rather than the third-party platform.
	CreateMeeting(context.Context, *CreateMeetingPayload) (res *MeetingFull, err error)
	// Get a meeting by ID
	GetMeetingBase(context.Context, *GetMeetingBasePayload) (res *GetMeetingBaseResult, err error)
	// Get a single meeting's settings.
	GetMeetingSettings(context.Context, *GetMeetingSettingsPayload) (res *GetMeetingSettingsResult, err error)
	// Get the join URL for a meeting. Requires the user to be either a participant
	// or organizer of the meeting.
	GetMeetingJoinURL(context.Context, *GetMeetingJoinURLPayload) (res *GetMeetingJoinURLResult, err error)
	// Update an existing meeting base.
	UpdateMeetingBase(context.Context, *UpdateMeetingBasePayload) (res *MeetingBase, err error)
	// Update an existing meeting's settings.
	UpdateMeetingSettings(context.Context, *UpdateMeetingSettingsPayload) (res *MeetingSettings, err error)
	// Delete an existing meeting.
	DeleteMeeting(context.Context, *DeleteMeetingPayload) (err error)
	// Cancel a specific occurrence of a meeting by setting its IsCancelled field
	// to true.
	DeleteMeetingOccurrence(context.Context, *DeleteMeetingOccurrencePayload) (err error)
	// Get all registrants for a meeting
	GetMeetingRegistrants(context.Context, *GetMeetingRegistrantsPayload) (res *GetMeetingRegistrantsResult, err error)
	// Create a new registrant for a meeting
	CreateMeetingRegistrant(context.Context, *CreateMeetingRegistrantPayload) (res *Registrant, err error)
	// Get a specific registrant for a meeting by UID
	GetMeetingRegistrant(context.Context, *GetMeetingRegistrantPayload) (res *GetMeetingRegistrantResult, err error)
	// Update an existing registrant for a meeting
	UpdateMeetingRegistrant(context.Context, *UpdateMeetingRegistrantPayload) (res *Registrant, err error)
	// Delete a registrant from a meeting
	DeleteMeetingRegistrant(context.Context, *DeleteMeetingRegistrantPayload) (err error)
	// Resend an invitation email to a meeting registrant
	ResendMeetingRegistrantInvitation(context.Context, *ResendMeetingRegistrantInvitationPayload) (err error)
	// Create or update an RSVP response for a meeting. Username is automatically
	// extracted from the JWT token. The most recent RSVP takes precedence.
	CreateMeetingRsvp(context.Context, *CreateMeetingRsvpPayload) (res *RSVPResponse, err error)
	// Get all RSVP responses for a meeting (organizers only)
	GetMeetingRsvps(context.Context, *GetMeetingRsvpsPayload) (res *RSVPListResult, err error)
	// Handle Zoom webhook events for meeting lifecycle, participants, and
	// recordings.
	ZoomWebhook(context.Context, *ZoomWebhookPayload) (res *ZoomWebhookResponse, err error)
	// Get all past meetings.
	GetPastMeetings(context.Context, *GetPastMeetingsPayload) (res *GetPastMeetingsResult, err error)
	// Create a new past meeting record. This allows manual addition of past
	// meetings that didn't come from webhooks.
	CreatePastMeeting(context.Context, *CreatePastMeetingPayload) (res *PastMeeting, err error)
	// Get a past meeting by ID
	GetPastMeeting(context.Context, *GetPastMeetingPayload) (res *GetPastMeetingResult, err error)
	// Delete an existing past meeting.
	DeletePastMeeting(context.Context, *DeletePastMeetingPayload) (err error)
	// Get all participants for a past meeting
	GetPastMeetingParticipants(context.Context, *GetPastMeetingParticipantsPayload) (res *GetPastMeetingParticipantsResult, err error)
	// Create a new participant for a past meeting
	CreatePastMeetingParticipant(context.Context, *CreatePastMeetingParticipantPayload) (res *PastMeetingParticipant, err error)
	// Get a specific participant for a past meeting by UID
	GetPastMeetingParticipant(context.Context, *GetPastMeetingParticipantPayload) (res *GetPastMeetingParticipantResult, err error)
	// Update an existing participant for a past meeting
	UpdatePastMeetingParticipant(context.Context, *UpdatePastMeetingParticipantPayload) (res *PastMeetingParticipant, err error)
	// Delete a participant from a past meeting
	DeletePastMeetingParticipant(context.Context, *DeletePastMeetingParticipantPayload) (err error)
	// Get all summaries for a past meeting
	GetPastMeetingSummaries(context.Context, *GetPastMeetingSummariesPayload) (res *GetPastMeetingSummariesResult, err error)
	// Get a specific summary for a past meeting
	GetPastMeetingSummary(context.Context, *GetPastMeetingSummaryPayload) (res *GetPastMeetingSummaryResult, err error)
	// Update an existing past meeting summary
	UpdatePastMeetingSummary(context.Context, *UpdatePastMeetingSummaryPayload) (res *PastMeetingSummary, err error)
	// Check if the service is able to take inbound requests.
	Readyz(context.Context) (res []byte, err error)
	// Check if the service is alive.
	Livez(context.Context) (res []byte, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// APIName is the name of the API as defined in the design.
const APIName = "Meeting Service"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "Meeting Service"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [32]string{"get-meetings", "create-meeting", "get-meeting-base", "get-meeting-settings", "get-meeting-join-url", "update-meeting-base", "update-meeting-settings", "delete-meeting", "delete-meeting-occurrence", "get-meeting-registrants", "create-meeting-registrant", "get-meeting-registrant", "update-meeting-registrant", "delete-meeting-registrant", "resend-meeting-registrant-invitation", "create-meeting-rsvp", "get-meeting-rsvps", "zoom-webhook", "get-past-meetings", "create-past-meeting", "get-past-meeting", "delete-past-meeting", "get-past-meeting-participants", "create-past-meeting-participant", "get-past-meeting-participant", "update-past-meeting-participant", "delete-past-meeting-participant", "get-past-meeting-summaries", "get-past-meeting-summary", "update-past-meeting-summary", "readyz", "livez"}

type BadRequestError struct {
	// HTTP status code
	Code string
	// Error message
	Message string
}

// Committee data for association with meeting
type Committee struct {
	// The UID of the committee
	UID string
	// The committee voting statuses required for committee members to be added to
	// the meeting
	AllowedVotingStatuses []string
}

type ConflictError struct {
	// HTTP status code
	Code string
	// Error message
	Message string
}

// CreateMeetingPayload is the payload type of the Meeting Service service
// create-meeting method.
type CreateMeetingPayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// Version of the API
	Version *string
	// The UID of the LF project
	ProjectUID string
	// The start time of the meeting in RFC3339 format
	StartTime string
	// The duration of the meeting in minutes
	Duration int
	// The timezone of the meeting (e.g. 'America/New_York')
	Timezone string
	// The recurrence of the meeting
	Recurrence *Recurrence
	// The title of the meeting
	Title string
	// The description of the meeting
	Description string
	// The committees associated with the meeting
	Committees []*Committee
	// The platform name of where the meeting is hosted
	Platform *string
	// The number of minutes that users are allowed to join the meeting early
	// without being kicked out
	EarlyJoinTimeMinutes *int
	// The type of meeting. This is usually dependent on the committee(s)
	// associated with the meeting
	MeetingType *string
	// The visibility of the meeting's existence to other users
	Visibility *string
	// The restrictedness of joining the meeting (i.e. is the meeting restricted to
	// only invited users or anyone?)
	Restricted *bool
	// The visibility of artifacts to users (e.g. public, only for registrants,
	// only for hosts)
	ArtifactVisibility *string
	// Whether recording is enabled for the meeting
	RecordingEnabled *bool
	// Whether transcription is enabled for the meeting
	TranscriptEnabled *bool
	// Whether automatic youtube uploading is enabled for the meeting
	YoutubeUploadEnabled *bool
	// The organizers of the meeting. This is a list of LFIDs of the meeting
	// organizers.
	Organizers []string
	// For zoom platform meetings: the configuration for the meeting
	ZoomConfig *ZoomConfigPost
}

// CreateMeetingRegistrantPayload is the payload type of the Meeting Service
// service create-meeting-registrant method.
type CreateMeetingRegistrantPayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// Version of the API
	Version *string
	// The UID of the meeting
	MeetingUID string
	// User's email address
	Email string
	// User's first name
	FirstName *string
	// User's last name
	LastName *string
	// If user should have access as a meeting host
	Host *bool
	// User's job title
	JobTitle *string
	// User's organization
	OrgName *string
	// The ID of the specific occurrence the user should be invited to. If blank,
	// user is invited to all occurrences
	OccurrenceID *string
	// User's avatar URL
	AvatarURL *string
	// User's LF ID
	Username *string
}

// CreateMeetingRsvpPayload is the payload type of the Meeting Service service
// create-meeting-rsvp method.
type CreateMeetingRsvpPayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// Version of the API
	Version *string
	// The UID of the meeting this RSVP is for
	MeetingUID string
	// The ID of the registrant submitting this RSVP
	RegistrantID *string
	// The username of the registrant
	Username *string
	// The RSVP response
	Response string
	// The scope of the RSVP (single occurrence, all occurrences, or this and
	// following)
	Scope string
	// The ID of the specific occurrence (required for 'single' and
	// 'this_and_following' scopes)
	OccurrenceID *string
}

// CreatePastMeetingParticipantPayload is the payload type of the Meeting
// Service service create-past-meeting-participant method.
type CreatePastMeetingParticipantPayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// Version of the API
	Version *string
	// The unique identifier of the past meeting
	UID *string
	// The unique identifier of the past meeting
	PastMeetingUID string
	// User's email address
	Email string
	// User's first name
	FirstName *string
	// User's last name
	LastName *string
	// If user should have access as a meeting host
	Host *bool
	// User's job title
	JobTitle *string
	// User's organization
	OrgName *string
	// User's avatar URL
	AvatarURL *string
	// User's LF ID
	Username *string
	// Whether the participant was invited to this past meeting
	IsInvited *bool
	// Whether the participant attended this past meeting
	IsAttended *bool
}

// CreatePastMeetingPayload is the payload type of the Meeting Service service
// create-past-meeting method.
type CreatePastMeetingPayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// Version of the API
	Version *string
	// The UID of the original meeting
	MeetingUID string
	// The occurrence ID for recurring meetings
	OccurrenceID *string
	// The UID of the LF project
	ProjectUID string
	// The scheduled start time of the past meeting
	ScheduledStartTime string
	// The scheduled end time of the past meeting
	ScheduledEndTime string
	// The duration of the meeting in minutes
	Duration int
	// The timezone of the meeting (e.g. 'America/New_York')
	Timezone string
	// The recurrence of the meeting
	Recurrence *Recurrence
	// The title of the meeting
	Title string
	// The description of the meeting
	Description string
	// The committees associated with the meeting
	Committees []*Committee
	// The platform name of where the meeting is hosted
	Platform string
	// The ID of the meeting in the platform (e.g. Zoom meeting ID)
	PlatformMeetingID *string
	// The number of minutes that users are allowed to join the meeting early
	// without being kicked out
	EarlyJoinTimeMinutes *int
	// The type of meeting. This is usually dependent on the committee(s)
	// associated with the meeting
	MeetingType *string
	// The visibility of the meeting's existence to other users
	Visibility *string
	// The restrictedness of joining the meeting (i.e. is the meeting restricted to
	// only invited users or anyone?)
	Restricted *bool
	// The visibility of artifacts to users (e.g. public, only for registrants,
	// only for hosts)
	ArtifactVisibility *string
	// The public join URL for participants to join the meeting via the LFX
	// platform (e.g.
	// 'https://zoom-lfx.platform.linuxfoundation.org/meeting/12343245463')
	PublicLink *string
	// Whether recording is enabled for the meeting
	RecordingEnabled *bool
	// Whether transcription is enabled for the meeting
	TranscriptEnabled *bool
	// Whether automatic youtube uploading is enabled for the meeting
	YoutubeUploadEnabled *bool
	// For zoom platform meetings: the configuration for the meeting
	ZoomConfig *ZoomConfigFull
	// Sessions represent individual start/end periods if a meeting was stopped and
	// restarted
	Sessions []*Session
}

// DeleteMeetingOccurrencePayload is the payload type of the Meeting Service
// service delete-meeting-occurrence method.
type DeleteMeetingOccurrencePayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// If-Match header value for conditional requests
	IfMatch *string
	// Version of the API
	Version *string
	// The UID of the meeting
	UID string
	// The ID of the occurrence to cancel
	OccurrenceID string
}

// DeleteMeetingPayload is the payload type of the Meeting Service service
// delete-meeting method.
type DeleteMeetingPayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// If-Match header value for conditional requests
	IfMatch *string
	// Version of the API
	Version *string
	// The UID of the meeting
	UID *string
}

// DeleteMeetingRegistrantPayload is the payload type of the Meeting Service
// service delete-meeting-registrant method.
type DeleteMeetingRegistrantPayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// If-Match header value for conditional requests
	IfMatch *string
	// Version of the API
	Version *string
	// The UID of the meeting
	MeetingUID *string
	// The UID of the registrant
	UID *string
}

// DeletePastMeetingParticipantPayload is the payload type of the Meeting
// Service service delete-past-meeting-participant method.
type DeletePastMeetingParticipantPayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// If-Match header value for conditional requests
	IfMatch *string
	// Version of the API
	Version *string
	// The unique identifier of the past meeting
	PastMeetingUID *string
	// The UID of the past meeting participant
	UID *string
}

// DeletePastMeetingPayload is the payload type of the Meeting Service service
// delete-past-meeting method.
type DeletePastMeetingPayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// If-Match header value for conditional requests
	IfMatch *string
	// Version of the API
	Version *string
	// The unique identifier of the past meeting
	UID *string
}

// GetMeetingBasePayload is the payload type of the Meeting Service service
// get-meeting-base method.
type GetMeetingBasePayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// Version of the API
	Version *string
	// The UID of the meeting
	UID *string
	// Include cancelled occurrences in the response
	IncludeCancelledOccurrences bool
}

// GetMeetingBaseResult is the result type of the Meeting Service service
// get-meeting-base method.
type GetMeetingBaseResult struct {
	Meeting *MeetingBase
	// ETag header value
	Etag *string
}

// GetMeetingJoinURLPayload is the payload type of the Meeting Service service
// get-meeting-join-url method.
type GetMeetingJoinURLPayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// Version of the API
	Version *string
	// The UID of the meeting
	UID *string
}

// GetMeetingJoinURLResult is the result type of the Meeting Service service
// get-meeting-join-url method.
type GetMeetingJoinURLResult struct {
	// The public join URL for participants to join the meeting via the LFX
	// platform (e.g.
	// 'https://zoom-lfx.platform.linuxfoundation.org/meeting/12343245463')
	JoinURL string
}

// GetMeetingRegistrantPayload is the payload type of the Meeting Service
// service get-meeting-registrant method.
type GetMeetingRegistrantPayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// Version of the API
	Version *string
	// The UID of the meeting
	MeetingUID *string
	// The UID of the registrant
	UID *string
}

// GetMeetingRegistrantResult is the result type of the Meeting Service service
// get-meeting-registrant method.
type GetMeetingRegistrantResult struct {
	Registrant *Registrant
	// ETag header value
	Etag *string
}

// GetMeetingRegistrantsPayload is the payload type of the Meeting Service
// service get-meeting-registrants method.
type GetMeetingRegistrantsPayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// Version of the API
	Version *string
	// The UID of the meeting
	UID *string
}

// GetMeetingRegistrantsResult is the result type of the Meeting Service
// service get-meeting-registrants method.
type GetMeetingRegistrantsResult struct {
	// Meeting registrants
	Registrants []*Registrant
	// Cache control header
	CacheControl *string
}

// GetMeetingRsvpsPayload is the payload type of the Meeting Service service
// get-meeting-rsvps method.
type GetMeetingRsvpsPayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// Version of the API
	Version *string
	// The UID of the meeting this RSVP is for
	MeetingUID string
}

// GetMeetingSettingsPayload is the payload type of the Meeting Service service
// get-meeting-settings method.
type GetMeetingSettingsPayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// Version of the API
	Version *string
	// The UID of the meeting
	UID *string
}

// GetMeetingSettingsResult is the result type of the Meeting Service service
// get-meeting-settings method.
type GetMeetingSettingsResult struct {
	MeetingSettings *MeetingSettings
	// ETag header value
	Etag *string
}

// GetMeetingsPayload is the payload type of the Meeting Service service
// get-meetings method.
type GetMeetingsPayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// Version of the API
	Version *string
	// Include cancelled occurrences in the response
	IncludeCancelledOccurrences bool
}

// GetMeetingsResult is the result type of the Meeting Service service
// get-meetings method.
type GetMeetingsResult struct {
	// Resources found
	Meetings []*MeetingFull
	// Cache control header
	CacheControl *string
}

// GetPastMeetingParticipantPayload is the payload type of the Meeting Service
// service get-past-meeting-participant method.
type GetPastMeetingParticipantPayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// Version of the API
	Version *string
	// The unique identifier of the past meeting
	PastMeetingUID *string
	// The UID of the past meeting participant
	UID *string
}

// GetPastMeetingParticipantResult is the result type of the Meeting Service
// service get-past-meeting-participant method.
type GetPastMeetingParticipantResult struct {
	Participant *PastMeetingParticipant
	// ETag header value
	Etag *string
}

// GetPastMeetingParticipantsPayload is the payload type of the Meeting Service
// service get-past-meeting-participants method.
type GetPastMeetingParticipantsPayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// Version of the API
	Version *string
	// The unique identifier of the past meeting
	UID *string
}

// GetPastMeetingParticipantsResult is the result type of the Meeting Service
// service get-past-meeting-participants method.
type GetPastMeetingParticipantsResult struct {
	// Past meeting participants
	Participants []*PastMeetingParticipant
	// Cache control header
	CacheControl *string
}

// GetPastMeetingPayload is the payload type of the Meeting Service service
// get-past-meeting method.
type GetPastMeetingPayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// Version of the API
	Version *string
	// The unique identifier of the past meeting
	UID *string
}

// GetPastMeetingResult is the result type of the Meeting Service service
// get-past-meeting method.
type GetPastMeetingResult struct {
	PastMeeting *PastMeeting
	// ETag header value
	Etag *string
}

// GetPastMeetingSummariesPayload is the payload type of the Meeting Service
// service get-past-meeting-summaries method.
type GetPastMeetingSummariesPayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// Version of the API
	Version *string
	// The unique identifier of the resource
	UID *string
}

// GetPastMeetingSummariesResult is the result type of the Meeting Service
// service get-past-meeting-summaries method.
type GetPastMeetingSummariesResult struct {
	// Past meeting summaries
	Summaries []*PastMeetingSummary
	// Cache control header
	CacheControl *string
}

// GetPastMeetingSummaryPayload is the payload type of the Meeting Service
// service get-past-meeting-summary method.
type GetPastMeetingSummaryPayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// Version of the API
	Version *string
	// The unique identifier of the past meeting
	PastMeetingUID string
	// The unique identifier of the summary
	SummaryUID string
}

// GetPastMeetingSummaryResult is the result type of the Meeting Service
// service get-past-meeting-summary method.
type GetPastMeetingSummaryResult struct {
	Summary *PastMeetingSummary
	// ETag header value
	Etag *string
}

// GetPastMeetingsPayload is the payload type of the Meeting Service service
// get-past-meetings method.
type GetPastMeetingsPayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// Version of the API
	Version *string
}

// GetPastMeetingsResult is the result type of the Meeting Service service
// get-past-meetings method.
type GetPastMeetingsResult struct {
	// Past meetings found
	PastMeetings []*PastMeeting
	// Cache control header
	CacheControl *string
}

type InternalServerError struct {
	// HTTP status code
	Code string
	// Error message
	Message string
}

// MeetingBase is the result type of the Meeting Service service
// update-meeting-base method.
type MeetingBase struct {
	// The UID of the meeting
	UID *string
	// The UID of the LF project
	ProjectUID *string
	// The start time of the meeting in RFC3339 format
	StartTime *string
	// The duration of the meeting in minutes
	Duration *int
	// The timezone of the meeting (e.g. 'America/New_York')
	Timezone *string
	// The recurrence of the meeting
	Recurrence *Recurrence
	// The title of the meeting
	Title *string
	// The description of the meeting
	Description *string
	// The committees associated with the meeting
	Committees []*Committee
	// The platform name of where the meeting is hosted
	Platform *string
	// The number of minutes that users are allowed to join the meeting early
	// without being kicked out
	EarlyJoinTimeMinutes *int
	// The type of meeting. This is usually dependent on the committee(s)
	// associated with the meeting
	MeetingType *string
	// The visibility of the meeting's existence to other users
	Visibility *string
	// The restrictedness of joining the meeting (i.e. is the meeting restricted to
	// only invited users or anyone?)
	Restricted *bool
	// The visibility of artifacts to users (e.g. public, only for registrants,
	// only for hosts)
	ArtifactVisibility *string
	// The public join URL for participants to join the meeting via the LFX
	// platform (e.g.
	// 'https://zoom-lfx.platform.linuxfoundation.org/meeting/12343245463')
	PublicLink *string
	// Unique, non-guessable, password for the meeting - is needed to join a
	// meeting and is included in invites
	Password *string
	// The number of registrants that have an email delivery error with their
	// invite. The delivery errors are counted as the last invite that was sent to
	// the registrant, so if a registrant previously had a delivery error but not
	// in their most recent invite received, then it does not count towards this
	// field value.
	EmailDeliveryErrorCount *int
	// Whether recording is enabled for the meeting
	RecordingEnabled *bool
	// Whether transcription is enabled for the meeting
	TranscriptEnabled *bool
	// Whether automatic youtube uploading is enabled for the meeting
	YoutubeUploadEnabled *bool
	// For zoom platform meetings: the configuration for the meeting
	ZoomConfig *ZoomConfigFull
	// The number of registrants for the meeting
	RegistrantCount *int
	// Array of meeting occurrences (read-only from platform API)
	Occurrences []*Occurrence
	// The date and time the resource was created
	CreatedAt *string
	// The date and time the resource was last updated
	UpdatedAt *string
}

// MeetingFull is the result type of the Meeting Service service create-meeting
// method.
type MeetingFull struct {
	// The UID of the meeting
	UID *string
	// The UID of the LF project
	ProjectUID *string
	// The start time of the meeting in RFC3339 format
	StartTime *string
	// The duration of the meeting in minutes
	Duration *int
	// The timezone of the meeting (e.g. 'America/New_York')
	Timezone *string
	// The recurrence of the meeting
	Recurrence *Recurrence
	// The title of the meeting
	Title *string
	// The description of the meeting
	Description *string
	// The committees associated with the meeting
	Committees []*Committee
	// The platform name of where the meeting is hosted
	Platform *string
	// The number of minutes that users are allowed to join the meeting early
	// without being kicked out
	EarlyJoinTimeMinutes *int
	// The type of meeting. This is usually dependent on the committee(s)
	// associated with the meeting
	MeetingType *string
	// The visibility of the meeting's existence to other users
	Visibility *string
	// The restrictedness of joining the meeting (i.e. is the meeting restricted to
	// only invited users or anyone?)
	Restricted *bool
	// The visibility of artifacts to users (e.g. public, only for registrants,
	// only for hosts)
	ArtifactVisibility *string
	// The public join URL for participants to join the meeting via the LFX
	// platform (e.g.
	// 'https://zoom-lfx.platform.linuxfoundation.org/meeting/12343245463')
	PublicLink *string
	// Unique, non-guessable, password for the meeting - is needed to join a
	// meeting and is included in invites
	Password *string
	// The number of registrants that have an email delivery error with their
	// invite. The delivery errors are counted as the last invite that was sent to
	// the registrant, so if a registrant previously had a delivery error but not
	// in their most recent invite received, then it does not count towards this
	// field value.
	EmailDeliveryErrorCount *int
	// Whether recording is enabled for the meeting
	RecordingEnabled *bool
	// Whether transcription is enabled for the meeting
	TranscriptEnabled *bool
	// Whether automatic youtube uploading is enabled for the meeting
	YoutubeUploadEnabled *bool
	// For zoom platform meetings: the configuration for the meeting
	ZoomConfig *ZoomConfigFull
	// The number of registrants for the meeting
	RegistrantCount *int
	// Array of meeting occurrences (read-only from platform API)
	Occurrences []*Occurrence
	// The date and time the resource was created
	CreatedAt *string
	// The date and time the resource was last updated
	UpdatedAt *string
	// The organizers of the meeting. This is a list of LFIDs of the meeting
	// organizers.
	Organizers []string
}

// MeetingSettings is the result type of the Meeting Service service
// update-meeting-settings method.
type MeetingSettings struct {
	// The UID of the meeting
	UID *string
	// The organizers of the meeting. This is a list of LFIDs of the meeting
	// organizers.
	Organizers []string
	// The date and time the resource was created
	CreatedAt *string
	// The date and time the resource was last updated
	UpdatedAt *string
}

type NotFoundError struct {
	// HTTP status code
	Code string
	// Error message
	Message string
}

// Meeting occurrence object - read-only data from platform API
type Occurrence struct {
	// ID of the occurrence, also the start time in unix time
	OccurrenceID *string
	// GMT start time of occurrence
	StartTime *string
	// Meeting title for this occurrence
	Title *string
	// Meeting description for this occurrence
	Description *string
	// Occurrence duration in minutes
	Duration *int
	// The recurrence pattern for this occurrence onwards if there is one
	Recurrence *Recurrence
	// Number of registrants for this meeting occurrence
	RegistrantCount *int
	// Number of registrants who declined the invite for this occurrence
	ResponseCountNo *int
	// Number of registrants who accepted the invite for this occurrence
	ResponseCountYes *int
	// Number of registrants who responded maybe to the invite for this occurrence
	ResponseCountMaybe *int
	// Whether the occurrence is cancelled
	IsCancelled *bool
}

// A single join/leave session of a participant in a meeting
type ParticipantSession struct {
	// Session UID from the meeting platform (e.g., Zoom)
	UID string
	// ISO 8601 timestamp when participant joined the session
	JoinTime string
	// ISO 8601 timestamp when participant left the session (null if still in
	// meeting)
	LeaveTime *string
	// Reason provided by the meeting platform for leaving
	LeaveReason *string
}

// PastMeeting is the result type of the Meeting Service service
// create-past-meeting method.
type PastMeeting struct {
	// The unique identifier of the past meeting
	UID *string
	// The UID of the original meeting
	MeetingUID *string
	// The occurrence ID for recurring meetings
	OccurrenceID *string
	// The UID of the LF project
	ProjectUID *string
	// The scheduled start time of the past meeting
	ScheduledStartTime *string
	// The scheduled end time of the past meeting
	ScheduledEndTime *string
	// The duration of the meeting in minutes
	Duration *int
	// The timezone of the meeting (e.g. 'America/New_York')
	Timezone *string
	// The recurrence of the meeting
	Recurrence *Recurrence
	// The title of the meeting
	Title *string
	// The description of the meeting
	Description *string
	// The committees associated with the meeting
	Committees []*Committee
	// The platform name of where the meeting is hosted
	Platform *string
	// The ID of the meeting in the platform (e.g. Zoom meeting ID)
	PlatformMeetingID *string
	// The number of minutes that users are allowed to join the meeting early
	// without being kicked out
	EarlyJoinTimeMinutes *int
	// The type of meeting. This is usually dependent on the committee(s)
	// associated with the meeting
	MeetingType *string
	// The visibility of the meeting's existence to other users
	Visibility *string
	// The restrictedness of joining the meeting (i.e. is the meeting restricted to
	// only invited users or anyone?)
	Restricted *bool
	// The visibility of artifacts to users (e.g. public, only for registrants,
	// only for hosts)
	ArtifactVisibility *string
	// The public join URL for participants to join the meeting via the LFX
	// platform (e.g.
	// 'https://zoom-lfx.platform.linuxfoundation.org/meeting/12343245463')
	PublicLink *string
	// Whether recording is enabled for the meeting
	RecordingEnabled *bool
	// Whether transcription is enabled for the meeting
	TranscriptEnabled *bool
	// Whether automatic youtube uploading is enabled for the meeting
	YoutubeUploadEnabled *bool
	// For zoom platform meetings: the configuration for the meeting
	ZoomConfig *ZoomConfigFull
	// Sessions represent individual start/end periods if a meeting was stopped and
	// restarted
	Sessions []*Session
	// The date and time the resource was created
	CreatedAt *string
	// The date and time the resource was last updated
	UpdatedAt *string
}

// PastMeetingParticipant is the result type of the Meeting Service service
// create-past-meeting-participant method.
type PastMeetingParticipant struct {
	// The UID of the past meeting participant
	UID string
	// The unique identifier of the past meeting
	PastMeetingUID string
	// The UID of the meeting
	MeetingUID string
	// User's email address
	Email string
	// User's first name
	FirstName *string
	// User's last name
	LastName *string
	// If user should have access as a meeting host
	Host *bool
	// User's job title
	JobTitle *string
	// User's organization
	OrgName *string
	// Whether the registrant is in an organization that has a membership with the
	// LF. If unknown, don't pass this field; the API will find the value by default
	OrgIsMember *bool
	// Whether the registrant is in an organization that has a membership with the
	// project (of the meeting). If unknown, don't pass this field; the API will
	// find the value by default
	OrgIsProjectMember *bool
	// User's avatar URL
	AvatarURL *string
	// User's LF ID
	Username *string
	// Whether the participant was invited to this past meeting
	IsInvited *bool
	// Whether the participant attended this past meeting
	IsAttended *bool
	// List of join/leave sessions for this participant
	Sessions []*ParticipantSession
	// The date and time the resource was created
	CreatedAt *string
	// The date and time the resource was last updated
	UpdatedAt *string
}

// PastMeetingSummary is the result type of the Meeting Service service
// update-past-meeting-summary method.
type PastMeetingSummary struct {
	// The unique identifier of the resource
	UID string
	// The unique identifier of the past meeting
	PastMeetingUID string
	// The UID of the original meeting
	MeetingUID string
	// The platform name of where the meeting is hosted
	Platform string
	// Password for accessing the summary (if required)
	Password *string
	// Zoom-specific configuration
	ZoomConfig *PastMeetingSummaryZoomConfig
	// The actual summary content
	SummaryData *SummaryData
	// Whether the summary requires approval
	RequiresApproval bool
	// Whether the summary has been approved
	Approved bool
	// Whether summary email has been sent
	EmailSent bool
	// The date and time the resource was created
	CreatedAt string
	// The date and time the resource was last updated
	UpdatedAt string
}

// Zoom-specific configuration for a past meeting summary
type PastMeetingSummaryZoomConfig struct {
	// The ID of the created meeting in Zoom
	MeetingID *string
	// Zoom meeting UUID
	MeetingUUID *string
}

// RSVPListResult is the result type of the Meeting Service service
// get-meeting-rsvps method.
type RSVPListResult struct {
	// List of RSVP responses
	Rsvps []*RSVPResponse
}

// RSVPResponse is the result type of the Meeting Service service
// create-meeting-rsvp method.
type RSVPResponse struct {
	// The unique identifier for this RSVP
	ID string
	// The UID of the meeting this RSVP is for
	MeetingUID string
	// The ID of the registrant submitting this RSVP
	RegistrantID string
	// The username of the registrant
	Username string
	// The email of the registrant
	Email string
	// The RSVP response
	Response string
	// The scope of the RSVP (single occurrence, all occurrences, or this and
	// following)
	Scope string
	// The ID of the specific occurrence (required for 'single' and
	// 'this_and_following' scopes)
	OccurrenceID *string
	// The date and time the resource was created
	CreatedAt *string
	// The date and time the resource was last updated
	UpdatedAt *string
}

// Meeting recurrence object
type Recurrence struct {
	// The recurrence type
	Type int
	// Define the interval at which the meeting should recur.
	// For instance, if you would like to schedule a meeting that recurs every two
	// months,
	// you must set the value of this field as '2' and the value of the 'type'
	// parameter as '3'.
	// For a daily meeting, the maximum interval you can set is '90' days.
	// For a weekly meeting the maximum interval that you can set is of '12' weeks.
	// For a monthly meeting, there is a maximum of '3' months.
	RepeatInterval int
	// This field is required if you're scheduling a recurring meeting of type '2'
	// to state which day(s)
	// of the week the meeting should repeat. The value for this field could be a
	// number between '1' to '7' in string format.
	// For instance, if the meeting should recur on Sunday, provide '1' as the
	// value of this field.
	// If you would like the meeting to occur on multiple days of a week, you
	// should provide comma separated values for this field.
	// For instance, if the meeting should recur on Sundays and Tuesdays provide
	// '1,3' as the value of this field.
	// 1 - Sunday
	// 2 - Monday
	// 3 - Tuesday
	// 4 - Wednesday
	// 5 - Thursday
	// 6 - Friday
	// 7 - Saturday
	WeeklyDays *string
	// Use this field only if you're scheduling a recurring meeting of type '3' to
	// state which day in a month, the meeting should recur. The value range is
	// from 1 to 31. For instance, if you would like the meeting to recur on 23rd
	// of each month, provide '23' as the value of this field and '1' as the value
	// of the 'repeat_interval' field. Instead, if you would like the meeting to
	// recur every three months, on 23rd of the month, change the value of the
	// 'repeat_interval' field to '3'.
	MonthlyDay *int
	// Use this field only if you're scheduling a recurring meeting of type '3' to
	// state the week of the month when the meeting should recur. If you use this
	// field, you must also use the 'monthly_week_day' field to state the day of
	// the week when the meeting should recur. '-1' - Last week of the month. 1 -
	// First week of the month. 2 - Second week of the month. 3 - Third week of the
	// month. 4 - Fourth week of the month.
	MonthlyWeek *int
	// Use this field only if you're scheduling a recurring meeting of type '3' to
	// state a specific day in a week when the monthly meeting should recur. To use
	// this field, you must also use the 'monthly_week' field. 1 - Sunday 2 -
	// Monday 3 - Tuesday 4 - Wednesday 5 - Thursday 6 - Friday 7 - Saturday
	MonthlyWeekDay *int
	// Select how many times the meeting should recur before it is canceled. Cannot
	// be used with 'end_date_time'.
	EndTimes *int
	// Select the final date on which the meeting will recur before it is canceled.
	// Cannot be used with 'end_times'. should be in GMT. should be in
	// 'yyyy-MM-ddTHH:mm:ssZ' format.
	EndDateTime *string
}

// Registrant is the result type of the Meeting Service service
// create-meeting-registrant method.
type Registrant struct {
	// The UID of the registrant
	UID string
	// The UID of the meeting
	MeetingUID string
	// User's email address
	Email string
	// User's first name
	FirstName *string
	// User's last name
	LastName *string
	// If user should have access as a meeting host
	Host *bool
	// Type of registrant
	Type string
	// The UID of the committee if registrant is a committee member
	CommitteeUID *string
	// User's job title
	JobTitle *string
	// The ID of the specific occurrence the user should be invited to. If blank,
	// user is invited to all occurrences
	OccurrenceID *string
	// User's organization
	OrgName *string
	// Whether the registrant is in an organization that has a membership with the
	// LF. If unknown, don't pass this field; the API will find the value by default
	OrgIsMember *bool
	// Whether the registrant is in an organization that has a membership with the
	// project (of the meeting). If unknown, don't pass this field; the API will
	// find the value by default
	OrgIsProjectMember *bool
	// User's avatar URL
	AvatarURL *string
	// User's LF ID
	Username *string
	// The date and time the resource was created
	CreatedAt *string
	// The date and time the resource was last updated
	UpdatedAt *string
}

// ResendMeetingRegistrantInvitationPayload is the payload type of the Meeting
// Service service resend-meeting-registrant-invitation method.
type ResendMeetingRegistrantInvitationPayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// Version of the API
	Version *string
	// The UID of the meeting
	MeetingUID *string
	// The UID of the registrant
	UID *string
}

type ServiceUnavailableError struct {
	// HTTP status code
	Code string
	// Error message
	Message string
}

// A single start/end session of a meeting on the platform
type Session struct {
	// The unique identifier of the session
	UID string
	// The start time of the session
	StartTime string
	// The end time of the session (may be null if session is ongoing)
	EndTime *string
}

// AI-generated summary content for a past meeting
type SummaryData struct {
	// Summary start time
	StartTime string
	// Summary end time
	EndTime string
	// Summary title
	Title *string
	// The main AI-generated summary content
	Content *string
	// URL to the full summary document
	DocURL *string
	// User-edited summary content
	EditedContent *string
}

type UnauthorizedError struct {
	// HTTP status code
	Code string
	// Error message
	Message string
}

// UpdateMeetingBasePayload is the payload type of the Meeting Service service
// update-meeting-base method.
type UpdateMeetingBasePayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// If-Match header value for conditional requests
	IfMatch *string
	// Version of the API
	Version *string
	// The UID of the meeting
	UID string
	// The UID of the LF project
	ProjectUID string
	// The start time of the meeting in RFC3339 format
	StartTime string
	// The duration of the meeting in minutes
	Duration int
	// The timezone of the meeting (e.g. 'America/New_York')
	Timezone string
	// The recurrence of the meeting
	Recurrence *Recurrence
	// The title of the meeting
	Title string
	// The description of the meeting
	Description string
	// The committees associated with the meeting
	Committees []*Committee
	// The platform name of where the meeting is hosted
	Platform *string
	// The number of minutes that users are allowed to join the meeting early
	// without being kicked out
	EarlyJoinTimeMinutes *int
	// The type of meeting. This is usually dependent on the committee(s)
	// associated with the meeting
	MeetingType *string
	// The visibility of the meeting's existence to other users
	Visibility *string
	// The restrictedness of joining the meeting (i.e. is the meeting restricted to
	// only invited users or anyone?)
	Restricted *bool
	// The visibility of artifacts to users (e.g. public, only for registrants,
	// only for hosts)
	ArtifactVisibility *string
	// Whether recording is enabled for the meeting
	RecordingEnabled *bool
	// Whether transcription is enabled for the meeting
	TranscriptEnabled *bool
	// Whether automatic youtube uploading is enabled for the meeting
	YoutubeUploadEnabled *bool
	// For zoom platform meetings: the configuration for the meeting
	ZoomConfig *ZoomConfigPost
}

// UpdateMeetingRegistrantPayload is the payload type of the Meeting Service
// service update-meeting-registrant method.
type UpdateMeetingRegistrantPayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// If-Match header value for conditional requests
	IfMatch *string
	// Version of the API
	Version *string
	// The UID of the meeting
	MeetingUID string
	// The UID of the registrant
	UID *string
	// User's email address
	Email string
	// User's first name
	FirstName *string
	// User's last name
	LastName *string
	// If user should have access as a meeting host
	Host *bool
	// User's job title
	JobTitle *string
	// User's organization
	OrgName *string
	// The ID of the specific occurrence the user should be invited to. If blank,
	// user is invited to all occurrences
	OccurrenceID *string
	// User's avatar URL
	AvatarURL *string
	// User's LF ID
	Username *string
}

// UpdateMeetingSettingsPayload is the payload type of the Meeting Service
// service update-meeting-settings method.
type UpdateMeetingSettingsPayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// If-Match header value for conditional requests
	IfMatch *string
	// Version of the API
	Version *string
	// The UID of the meeting
	UID *string
	// The organizers of the meeting. This is a list of LFIDs of the meeting
	// organizers.
	Organizers []string
}

// UpdatePastMeetingParticipantPayload is the payload type of the Meeting
// Service service update-past-meeting-participant method.
type UpdatePastMeetingParticipantPayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// If-Match header value for conditional requests
	IfMatch *string
	// Version of the API
	Version *string
	// The unique identifier of the past meeting
	PastMeetingUID string
	// The UID of the past meeting participant
	UID *string
	// User's email address
	Email string
	// User's first name
	FirstName *string
	// User's last name
	LastName *string
	// If user should have access as a meeting host
	Host *bool
	// User's job title
	JobTitle *string
	// User's organization
	OrgName *string
	// User's avatar URL
	AvatarURL *string
	// User's LF ID
	Username *string
	// Whether the participant was invited to this past meeting
	IsInvited *bool
	// Whether the participant attended this past meeting
	IsAttended *bool
}

// UpdatePastMeetingSummaryPayload is the payload type of the Meeting Service
// service update-past-meeting-summary method.
type UpdatePastMeetingSummaryPayload struct {
	// JWT token issued by Heimdall
	BearerToken *string
	// Version of the API
	Version *string
	// If-Match header value for conditional requests
	IfMatch *string
	// The unique identifier of the past meeting
	PastMeetingUID string
	// The unique identifier of the summary
	SummaryUID string
	// User-edited summary content
	EditedContent *string
	// Whether the summary has been approved
	Approved *bool
}

// Meeting attributes specific to Zoom platform that contain both writable and
// read-only attributes
type ZoomConfigFull struct {
	// The ID of the created meeting in Zoom
	MeetingID *string
	// The zoom-defined passcode for the meeting. Required if joining via dial-in,
	// or by clicking 'join meeting' in the zoom client & putting in the meeting id
	// and passcode.
	Passcode *string
	// For zoom platform meetings: whether Zoom AI companion is enabled
	AiCompanionEnabled *bool
	// For zoom platform meetings: whether AI summary approval is required
	AiSummaryRequireApproval *bool
}

// Meeting attributes specific to Zoom platform that are writable
type ZoomConfigPost struct {
	// For zoom platform meetings: whether Zoom AI companion is enabled
	AiCompanionEnabled *bool
	// For zoom platform meetings: whether AI summary approval is required
	AiSummaryRequireApproval *bool
}

// ZoomWebhookPayload is the payload type of the Meeting Service service
// zoom-webhook method.
type ZoomWebhookPayload struct {
	// The type of event
	Event string
	// Event timestamp in milliseconds
	EventTs int64
	// Contains meeting, participant, or recording data depending on event type
	Payload any
	// HMAC-SHA256 signature of the request body
	ZoomSignature string
	// Timestamp when the webhook was sent
	ZoomTimestamp string
}

// ZoomWebhookResponse is the result type of the Meeting Service service
// zoom-webhook method.
type ZoomWebhookResponse struct {
	// Processing status
	Status *string
	// Optional message
	Message *string
	// The plain token received in the validation request
	PlainToken *string
	// The HMAC SHA-256 hash of the plain token
	EncryptedToken *string
}

// Error returns an error description.
func (e *BadRequestError) Error() string {
	return ""
}

// ErrorName returns "BadRequestError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *BadRequestError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "BadRequestError".
func (e *BadRequestError) GoaErrorName() string {
	return "BadRequest"
}

// Error returns an error description.
func (e *ConflictError) Error() string {
	return ""
}

// ErrorName returns "ConflictError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *ConflictError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "ConflictError".
func (e *ConflictError) GoaErrorName() string {
	return "Conflict"
}

// Error returns an error description.
func (e *InternalServerError) Error() string {
	return ""
}

// ErrorName returns "InternalServerError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *InternalServerError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "InternalServerError".
func (e *InternalServerError) GoaErrorName() string {
	return "InternalServerError"
}

// Error returns an error description.
func (e *NotFoundError) Error() string {
	return ""
}

// ErrorName returns "NotFoundError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *NotFoundError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "NotFoundError".
func (e *NotFoundError) GoaErrorName() string {
	return "NotFound"
}

// Error returns an error description.
func (e *ServiceUnavailableError) Error() string {
	return ""
}

// ErrorName returns "ServiceUnavailableError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *ServiceUnavailableError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "ServiceUnavailableError".
func (e *ServiceUnavailableError) GoaErrorName() string {
	return "ServiceUnavailable"
}

// Error returns an error description.
func (e *UnauthorizedError) Error() string {
	return ""
}

// ErrorName returns "UnauthorizedError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *UnauthorizedError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "UnauthorizedError".
func (e *UnauthorizedError) GoaErrorName() string {
	return "Unauthorized"
}
