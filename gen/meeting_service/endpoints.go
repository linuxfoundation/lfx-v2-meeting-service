// Code generated by goa v3.21.1, DO NOT EDIT.
//
// Meeting Service endpoints
//
// Command:
// $ goa gen github.com/linuxfoundation/lfx-v2-meeting-service/design

package meetingservice

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "Meeting Service" service endpoints.
type Endpoints struct {
	GetMeetings             goa.Endpoint
	CreateMeeting           goa.Endpoint
	GetMeetingBase          goa.Endpoint
	GetMeetingSettings      goa.Endpoint
	UpdateMeetingBase       goa.Endpoint
	UpdateMeetingSettings   goa.Endpoint
	DeleteMeeting           goa.Endpoint
	GetMeetingRegistrants   goa.Endpoint
	CreateMeetingRegistrant goa.Endpoint
	GetMeetingRegistrant    goa.Endpoint
	UpdateMeetingRegistrant goa.Endpoint
	DeleteMeetingRegistrant goa.Endpoint
	ZoomWebhook             goa.Endpoint
	GetPastMeetings         goa.Endpoint
	CreatePastMeeting       goa.Endpoint
	GetPastMeeting          goa.Endpoint
	DeletePastMeeting       goa.Endpoint
	Readyz                  goa.Endpoint
	Livez                   goa.Endpoint
}

// NewEndpoints wraps the methods of the "Meeting Service" service with
// endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		GetMeetings:             NewGetMeetingsEndpoint(s, a.JWTAuth),
		CreateMeeting:           NewCreateMeetingEndpoint(s, a.JWTAuth),
		GetMeetingBase:          NewGetMeetingBaseEndpoint(s, a.JWTAuth),
		GetMeetingSettings:      NewGetMeetingSettingsEndpoint(s, a.JWTAuth),
		UpdateMeetingBase:       NewUpdateMeetingBaseEndpoint(s, a.JWTAuth),
		UpdateMeetingSettings:   NewUpdateMeetingSettingsEndpoint(s, a.JWTAuth),
		DeleteMeeting:           NewDeleteMeetingEndpoint(s, a.JWTAuth),
		GetMeetingRegistrants:   NewGetMeetingRegistrantsEndpoint(s, a.JWTAuth),
		CreateMeetingRegistrant: NewCreateMeetingRegistrantEndpoint(s, a.JWTAuth),
		GetMeetingRegistrant:    NewGetMeetingRegistrantEndpoint(s, a.JWTAuth),
		UpdateMeetingRegistrant: NewUpdateMeetingRegistrantEndpoint(s, a.JWTAuth),
		DeleteMeetingRegistrant: NewDeleteMeetingRegistrantEndpoint(s, a.JWTAuth),
		ZoomWebhook:             NewZoomWebhookEndpoint(s),
		GetPastMeetings:         NewGetPastMeetingsEndpoint(s, a.JWTAuth),
		CreatePastMeeting:       NewCreatePastMeetingEndpoint(s, a.JWTAuth),
		GetPastMeeting:          NewGetPastMeetingEndpoint(s, a.JWTAuth),
		DeletePastMeeting:       NewDeletePastMeetingEndpoint(s, a.JWTAuth),
		Readyz:                  NewReadyzEndpoint(s),
		Livez:                   NewLivezEndpoint(s),
	}
}

// Use applies the given middleware to all the "Meeting Service" service
// endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.GetMeetings = m(e.GetMeetings)
	e.CreateMeeting = m(e.CreateMeeting)
	e.GetMeetingBase = m(e.GetMeetingBase)
	e.GetMeetingSettings = m(e.GetMeetingSettings)
	e.UpdateMeetingBase = m(e.UpdateMeetingBase)
	e.UpdateMeetingSettings = m(e.UpdateMeetingSettings)
	e.DeleteMeeting = m(e.DeleteMeeting)
	e.GetMeetingRegistrants = m(e.GetMeetingRegistrants)
	e.CreateMeetingRegistrant = m(e.CreateMeetingRegistrant)
	e.GetMeetingRegistrant = m(e.GetMeetingRegistrant)
	e.UpdateMeetingRegistrant = m(e.UpdateMeetingRegistrant)
	e.DeleteMeetingRegistrant = m(e.DeleteMeetingRegistrant)
	e.ZoomWebhook = m(e.ZoomWebhook)
	e.GetPastMeetings = m(e.GetPastMeetings)
	e.CreatePastMeeting = m(e.CreatePastMeeting)
	e.GetPastMeeting = m(e.GetPastMeeting)
	e.DeletePastMeeting = m(e.DeletePastMeeting)
	e.Readyz = m(e.Readyz)
	e.Livez = m(e.Livez)
}

// NewGetMeetingsEndpoint returns an endpoint function that calls the method
// "get-meetings" of service "Meeting Service".
func NewGetMeetingsEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetMeetingsPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.BearerToken != nil {
			token = *p.BearerToken
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.GetMeetings(ctx, p)
	}
}

// NewCreateMeetingEndpoint returns an endpoint function that calls the method
// "create-meeting" of service "Meeting Service".
func NewCreateMeetingEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*CreateMeetingPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.BearerToken != nil {
			token = *p.BearerToken
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.CreateMeeting(ctx, p)
	}
}

// NewGetMeetingBaseEndpoint returns an endpoint function that calls the method
// "get-meeting-base" of service "Meeting Service".
func NewGetMeetingBaseEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetMeetingBasePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.BearerToken != nil {
			token = *p.BearerToken
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.GetMeetingBase(ctx, p)
	}
}

// NewGetMeetingSettingsEndpoint returns an endpoint function that calls the
// method "get-meeting-settings" of service "Meeting Service".
func NewGetMeetingSettingsEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetMeetingSettingsPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.BearerToken != nil {
			token = *p.BearerToken
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.GetMeetingSettings(ctx, p)
	}
}

// NewUpdateMeetingBaseEndpoint returns an endpoint function that calls the
// method "update-meeting-base" of service "Meeting Service".
func NewUpdateMeetingBaseEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*UpdateMeetingBasePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.BearerToken != nil {
			token = *p.BearerToken
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.UpdateMeetingBase(ctx, p)
	}
}

// NewUpdateMeetingSettingsEndpoint returns an endpoint function that calls the
// method "update-meeting-settings" of service "Meeting Service".
func NewUpdateMeetingSettingsEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*UpdateMeetingSettingsPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.BearerToken != nil {
			token = *p.BearerToken
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.UpdateMeetingSettings(ctx, p)
	}
}

// NewDeleteMeetingEndpoint returns an endpoint function that calls the method
// "delete-meeting" of service "Meeting Service".
func NewDeleteMeetingEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*DeleteMeetingPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.BearerToken != nil {
			token = *p.BearerToken
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.DeleteMeeting(ctx, p)
	}
}

// NewGetMeetingRegistrantsEndpoint returns an endpoint function that calls the
// method "get-meeting-registrants" of service "Meeting Service".
func NewGetMeetingRegistrantsEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetMeetingRegistrantsPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.BearerToken != nil {
			token = *p.BearerToken
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.GetMeetingRegistrants(ctx, p)
	}
}

// NewCreateMeetingRegistrantEndpoint returns an endpoint function that calls
// the method "create-meeting-registrant" of service "Meeting Service".
func NewCreateMeetingRegistrantEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*CreateMeetingRegistrantPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.BearerToken != nil {
			token = *p.BearerToken
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.CreateMeetingRegistrant(ctx, p)
	}
}

// NewGetMeetingRegistrantEndpoint returns an endpoint function that calls the
// method "get-meeting-registrant" of service "Meeting Service".
func NewGetMeetingRegistrantEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetMeetingRegistrantPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.BearerToken != nil {
			token = *p.BearerToken
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.GetMeetingRegistrant(ctx, p)
	}
}

// NewUpdateMeetingRegistrantEndpoint returns an endpoint function that calls
// the method "update-meeting-registrant" of service "Meeting Service".
func NewUpdateMeetingRegistrantEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*UpdateMeetingRegistrantPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.BearerToken != nil {
			token = *p.BearerToken
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.UpdateMeetingRegistrant(ctx, p)
	}
}

// NewDeleteMeetingRegistrantEndpoint returns an endpoint function that calls
// the method "delete-meeting-registrant" of service "Meeting Service".
func NewDeleteMeetingRegistrantEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*DeleteMeetingRegistrantPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.BearerToken != nil {
			token = *p.BearerToken
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.DeleteMeetingRegistrant(ctx, p)
	}
}

// NewZoomWebhookEndpoint returns an endpoint function that calls the method
// "zoom-webhook" of service "Meeting Service".
func NewZoomWebhookEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*ZoomWebhookPayload)
		return s.ZoomWebhook(ctx, p)
	}
}

// NewGetPastMeetingsEndpoint returns an endpoint function that calls the
// method "get-past-meetings" of service "Meeting Service".
func NewGetPastMeetingsEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetPastMeetingsPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.BearerToken != nil {
			token = *p.BearerToken
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.GetPastMeetings(ctx, p)
	}
}

// NewCreatePastMeetingEndpoint returns an endpoint function that calls the
// method "create-past-meeting" of service "Meeting Service".
func NewCreatePastMeetingEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*CreatePastMeetingPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.BearerToken != nil {
			token = *p.BearerToken
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.CreatePastMeeting(ctx, p)
	}
}

// NewGetPastMeetingEndpoint returns an endpoint function that calls the method
// "get-past-meeting" of service "Meeting Service".
func NewGetPastMeetingEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetPastMeetingPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.BearerToken != nil {
			token = *p.BearerToken
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.GetPastMeeting(ctx, p)
	}
}

// NewDeletePastMeetingEndpoint returns an endpoint function that calls the
// method "delete-past-meeting" of service "Meeting Service".
func NewDeletePastMeetingEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*DeletePastMeetingPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var token string
		if p.BearerToken != nil {
			token = *p.BearerToken
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.DeletePastMeeting(ctx, p)
	}
}

// NewReadyzEndpoint returns an endpoint function that calls the method
// "readyz" of service "Meeting Service".
func NewReadyzEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		return s.Readyz(ctx)
	}
}

// NewLivezEndpoint returns an endpoint function that calls the method "livez"
// of service "Meeting Service".
func NewLivezEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		return s.Livez(ctx)
	}
}
